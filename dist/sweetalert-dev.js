;(function(window, document, undefined) {
  "use strict";
  
  (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// SweetAlert
// 2014-2015 (c) - Tristan Edwards
// github.com/t4t5/sweetalert

/*
 * jQuery-like functions for manipulating the DOM
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _modulesHandleDom = require('./modules/handle-dom');

/*
 * Handy utilities
 */

var _modulesUtils = require('./modules/utils');

/*
 *  Handle sweetAlert's DOM elements
 */

var _modulesHandleSwalDom = require('./modules/handle-swal-dom');

// Handle button events and keyboard events

var _modulesHandleClick = require('./modules/handle-click');

var _modulesHandleKey = require('./modules/handle-key');

var _modulesHandleKey2 = _interopRequireDefault(_modulesHandleKey);

// Default values

var _modulesDefaultParams = require('./modules/default-params');

var _modulesDefaultParams2 = _interopRequireDefault(_modulesDefaultParams);

var _modulesSetParams = require('./modules/set-params');

var _modulesSetParams2 = _interopRequireDefault(_modulesSetParams);

/*
 * Remember state in cases where opening and handling a modal will fiddle with it.
 * (We also use window.previousActiveElement as a global variable)
 */
var previousWindowKeyDown;
var lastFocusedButton;

/*
 * Global sweetAlert function
 * (this is what the user calls)
 */
var sweetAlert, swal;

exports['default'] = sweetAlert = swal = function () {
  var customizations = arguments[0];

  (0, _modulesHandleDom.addClass)(document.body, 'stop-scrolling');
  (0, _modulesHandleSwalDom.resetInput)();

  /*
   * Use argument if defined or default value from params object otherwise.
   * Supports the case where a default value is boolean true and should be
   * overridden by a corresponding explicit argument which is boolean false.
   */
  function argumentOrDefault(key) {
    var args = customizations;
    return args[key] === undefined ? _modulesDefaultParams2['default'][key] : args[key];
  }

  if (customizations === undefined) {
    (0, _modulesUtils.logStr)('SweetAlert expects at least 1 attribute!');
    return false;
  }

  var params = (0, _modulesUtils.extend)({}, _modulesDefaultParams2['default']);

  switch (typeof customizations) {

    // Ex: swal("Hello", "Just testing", "info");
    case 'string':
      params.title = customizations;
      params.text = arguments[1] || '';
      params.type = arguments[2] || '';
      break;

    // Ex: swal({ title:"Hello", text: "Just testing", type: "info" });
    case 'object':
      if (customizations.title === undefined) {
        (0, _modulesUtils.logStr)('Missing "title" argument!');
        return false;
      }

      params.title = customizations.title;

      for (var customName in _modulesDefaultParams2['default']) {
        params[customName] = argumentOrDefault(customName);
      }

      // Show "Confirm" instead of "OK" if cancel button is visible
      params.confirmButtonText = params.showCancelButton ? 'Confirm' : _modulesDefaultParams2['default'].confirmButtonText;
      params.confirmButtonText = argumentOrDefault('confirmButtonText');

      // Callback function when clicking on "OK"/"Cancel"
      params.doneFunction = arguments[1] || null;

      break;

    default:
      (0, _modulesUtils.logStr)('Unexpected type of argument! Expected "string" or "object", got ' + typeof customizations);
      return false;

  }

  (0, _modulesSetParams2['default'])(params);
  (0, _modulesHandleSwalDom.fixVerticalPosition)();
  (0, _modulesHandleSwalDom.openModal)(arguments[1]);

  // Modal interactions
  var modal = (0, _modulesHandleSwalDom.getModal)();

  /*
   * Make sure all modal buttons respond to all events
   */
  var $buttons = modal.querySelectorAll('button');
  var buttonEvents = ['onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'onfocus'];
  var onButtonEvent = function onButtonEvent(e) {
    return (0, _modulesHandleClick.handleButton)(e, params, modal);
  };

  for (var btnIndex = 0; btnIndex < $buttons.length; btnIndex++) {
    for (var evtIndex = 0; evtIndex < buttonEvents.length; evtIndex++) {
      var btnEvt = buttonEvents[evtIndex];
      $buttons[btnIndex][btnEvt] = onButtonEvent;
    }
  }

  // Clicking outside the modal dismisses it (if allowed by user)
  (0, _modulesHandleSwalDom.getOverlay)().onclick = onButtonEvent;

  previousWindowKeyDown = window.onkeydown;

  var onKeyEvent = function onKeyEvent(e) {
    return (0, _modulesHandleKey2['default'])(e, params, modal);
  };
  window.onkeydown = onKeyEvent;

  window.onfocus = function () {
    // When the user has focused away and focused back from the whole window.
    setTimeout(function () {
      // Put in a timeout to jump out of the event sequence.
      // Calling focus() in the event sequence confuses things.
      if (lastFocusedButton !== undefined) {
        lastFocusedButton.focus();
        lastFocusedButton = undefined;
      }
    }, 0);
  };

  // Show alert with enabled buttons always
  swal.enableButtons();
};

/*
 * Set default params for each popup
 * @param {Object} userParams
 */
sweetAlert.setDefaults = swal.setDefaults = function (userParams) {
  if (!userParams) {
    throw new Error('userParams is required');
  }
  if (typeof userParams !== 'object') {
    throw new Error('userParams has to be a object');
  }

  (0, _modulesUtils.extend)(_modulesDefaultParams2['default'], userParams);
};

/*
 * Animation when closing modal
 */
sweetAlert.close = swal.close = function () {
  var modal = (0, _modulesHandleSwalDom.getModal)();

  (0, _modulesHandleDom.fadeOut)((0, _modulesHandleSwalDom.getOverlay)(), 5);
  (0, _modulesHandleDom.fadeOut)(modal, 5);
  (0, _modulesHandleDom.removeClass)(modal, 'showSweetAlert');
  (0, _modulesHandleDom.addClass)(modal, 'hideSweetAlert');
  (0, _modulesHandleDom.removeClass)(modal, 'visible');

  /*
   * Reset icon animations
   */
  var $successIcon = modal.querySelector('.sa-icon.sa-success');
  (0, _modulesHandleDom.removeClass)($successIcon, 'animate');
  (0, _modulesHandleDom.removeClass)($successIcon.querySelector('.sa-tip'), 'animateSuccessTip');
  (0, _modulesHandleDom.removeClass)($successIcon.querySelector('.sa-long'), 'animateSuccessLong');

  var $errorIcon = modal.querySelector('.sa-icon.sa-error');
  (0, _modulesHandleDom.removeClass)($errorIcon, 'animateErrorIcon');
  (0, _modulesHandleDom.removeClass)($errorIcon.querySelector('.sa-x-mark'), 'animateXMark');

  var $warningIcon = modal.querySelector('.sa-icon.sa-warning');
  (0, _modulesHandleDom.removeClass)($warningIcon, 'pulseWarning');
  (0, _modulesHandleDom.removeClass)($warningIcon.querySelector('.sa-body'), 'pulseWarningIns');
  (0, _modulesHandleDom.removeClass)($warningIcon.querySelector('.sa-dot'), 'pulseWarningIns');

  // Reset custom class (delay so that UI changes aren't visible)
  setTimeout(function () {
    var customClass = modal.getAttribute('data-custom-class');
    (0, _modulesHandleDom.removeClass)(modal, customClass);
  }, 300);

  // Make page scrollable again
  (0, _modulesHandleDom.removeClass)(document.body, 'stop-scrolling');

  // Reset the page to its previous state
  window.onkeydown = previousWindowKeyDown;
  if (window.previousActiveElement) {
    window.previousActiveElement.focus();
  }
  lastFocusedButton = undefined;
  clearTimeout(modal.timeout);

  return true;
};

/*
 * Validation of the input field is done by user
 * If something is wrong => call showInputError with errorMessage
 */
sweetAlert.showInputError = swal.showInputError = function (errorMessage) {
  var modal = (0, _modulesHandleSwalDom.getModal)();

  var $errorIcon = modal.querySelector('.sa-input-error');
  (0, _modulesHandleDom.addClass)($errorIcon, 'show');

  var $errorContainer = modal.querySelector('.sa-error-container');
  (0, _modulesHandleDom.addClass)($errorContainer, 'show');

  $errorContainer.querySelector('p').innerHTML = errorMessage;

  setTimeout(function () {
    sweetAlert.enableButtons();
  }, 1);

  modal.querySelector('input').focus();
};

/*
 * Reset input error DOM elements
 */
sweetAlert.resetInputError = swal.resetInputError = function (event) {
  // If press enter => ignore
  if (event && event.keyCode === 13) {
    return false;
  }

  var $modal = (0, _modulesHandleSwalDom.getModal)();

  var $errorIcon = $modal.querySelector('.sa-input-error');
  (0, _modulesHandleDom.removeClass)($errorIcon, 'show');

  var $errorContainer = $modal.querySelector('.sa-error-container');
  (0, _modulesHandleDom.removeClass)($errorContainer, 'show');
};

/*
 * Disable confirm and cancel buttons
 */
sweetAlert.disableButtons = swal.disableButtons = function (event) {
  var modal = (0, _modulesHandleSwalDom.getModal)();
  var $confirmButton = modal.querySelector('button.confirm');
  var $cancelButton = modal.querySelector('button.cancel');
  $confirmButton.disabled = true;
  $cancelButton.disabled = true;
};

/*
 * Enable confirm and cancel buttons
 */
sweetAlert.enableButtons = swal.enableButtons = function (event) {
  var modal = (0, _modulesHandleSwalDom.getModal)();
  var $confirmButton = modal.querySelector('button.confirm');
  var $cancelButton = modal.querySelector('button.cancel');
  $confirmButton.disabled = false;
  $cancelButton.disabled = false;
};

if (typeof window !== 'undefined') {
  // The 'handle-click' module requires
  // that 'sweetAlert' was set as global.
  window.sweetAlert = window.swal = sweetAlert;
} else {
  (0, _modulesUtils.logStr)('SweetAlert is a frontend module!');
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var defaultParams = {
  title: '',
  text: '',
  type: null,
  allowOutsideClick: false,
  showConfirmButton: true,
  showCancelButton: false,
  closeOnConfirm: true,
  closeOnCancel: true,
  confirmButtonText: 'OK',
  confirmButtonColor: '#8CD4F5',
  cancelButtonText: 'Cancel',
  imageUrl: null,
  imageSize: null,
  timer: null,
  customClass: '',
  html: false,
  animation: true,
  allowEscapeKey: true,
  inputType: 'text',
  inputPlaceholder: '',
  inputValue: '',
  showLoaderOnConfirm: false
};

exports['default'] = defaultParams;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Db2RlL3N3ZWV0YWxlcnQvZGV2L21vZHVsZXMvZGVmYXVsdC1wYXJhbXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJLGFBQWEsR0FBRztBQUNsQixPQUFLLEVBQUUsRUFBRTtBQUNULE1BQUksRUFBRSxFQUFFO0FBQ1IsTUFBSSxFQUFFLElBQUk7QUFDVixtQkFBaUIsRUFBRSxLQUFLO0FBQ3hCLG1CQUFpQixFQUFFLElBQUk7QUFDdkIsa0JBQWdCLEVBQUUsS0FBSztBQUN2QixnQkFBYyxFQUFFLElBQUk7QUFDcEIsZUFBYSxFQUFFLElBQUk7QUFDbkIsbUJBQWlCLEVBQUUsSUFBSTtBQUN2QixvQkFBa0IsRUFBRSxTQUFTO0FBQzdCLGtCQUFnQixFQUFFLFFBQVE7QUFDMUIsVUFBUSxFQUFFLElBQUk7QUFDZCxXQUFTLEVBQUUsSUFBSTtBQUNmLE9BQUssRUFBRSxJQUFJO0FBQ1gsYUFBVyxFQUFFLEVBQUU7QUFDZixNQUFJLEVBQUUsS0FBSztBQUNYLFdBQVMsRUFBRSxJQUFJO0FBQ2YsZ0JBQWMsRUFBRSxJQUFJO0FBQ3BCLFdBQVMsRUFBRSxNQUFNO0FBQ2pCLGtCQUFnQixFQUFFLEVBQUU7QUFDcEIsWUFBVSxFQUFFLEVBQUU7QUFDZCxxQkFBbUIsRUFBRSxLQUFLO0NBQzNCLENBQUM7O3FCQUVhLGFBQWEiLCJmaWxlIjoiL0NvZGUvc3dlZXRhbGVydC9kZXYvbW9kdWxlcy9kZWZhdWx0LXBhcmFtcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZhdWx0UGFyYW1zID0ge1xuICB0aXRsZTogJycsXG4gIHRleHQ6ICcnLFxuICB0eXBlOiBudWxsLFxuICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsXG4gIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxuICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSxcbiAgY2xvc2VPbkNvbmZpcm06IHRydWUsXG4gIGNsb3NlT25DYW5jZWw6IHRydWUsXG4gIGNvbmZpcm1CdXR0b25UZXh0OiAnT0snLFxuICBjb25maXJtQnV0dG9uQ29sb3I6ICcjOENENEY1JyxcbiAgY2FuY2VsQnV0dG9uVGV4dDogJ0NhbmNlbCcsXG4gIGltYWdlVXJsOiBudWxsLFxuICBpbWFnZVNpemU6IG51bGwsXG4gIHRpbWVyOiBudWxsLFxuICBjdXN0b21DbGFzczogJycsXG4gIGh0bWw6IGZhbHNlLFxuICBhbmltYXRpb246IHRydWUsXG4gIGFsbG93RXNjYXBlS2V5OiB0cnVlLFxuICBpbnB1dFR5cGU6ICd0ZXh0JyxcbiAgaW5wdXRQbGFjZWhvbGRlcjogJycsXG4gIGlucHV0VmFsdWU6ICcnLFxuICBzaG93TG9hZGVyT25Db25maXJtOiBmYWxzZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFBhcmFtcztcbiJdfQ==
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _utils = require('./utils');

var _handleSwalDom = require('./handle-swal-dom');

var _handleDom = require('./handle-dom');

/*
 * User clicked on "Confirm"/"OK" or "Cancel"
 */
var handleButton = function handleButton(event, params, modal) {
  var e = event || window.event;
  var target = e.target || e.srcElement;

  var targetedConfirm = target.className.indexOf('confirm') !== -1;
  var targetedOverlay = target.className.indexOf('sweet-overlay') !== -1;
  var modalIsVisible = (0, _handleDom.hasClass)(modal, 'visible');
  var doneFunctionExists = params.doneFunction && modal.getAttribute('data-has-done-function') === 'true';

  // Since the user can change the background-color of the confirm button programmatically,
  // we must calculate what the color should be on hover/active
  var normalColor, hoverColor, activeColor;
  if (targetedConfirm && params.confirmButtonColor) {
    normalColor = params.confirmButtonColor;
    hoverColor = (0, _utils.colorLuminance)(normalColor, -0.04);
    activeColor = (0, _utils.colorLuminance)(normalColor, -0.14);
  }

  function shouldSetConfirmButtonColor(color) {
    if (targetedConfirm && params.confirmButtonColor) {
      // target.style.backgroundColor = color;
    }
  }

  switch (e.type) {
    case 'mouseover':
      shouldSetConfirmButtonColor(hoverColor);
      break;

    case 'mouseout':
      shouldSetConfirmButtonColor(normalColor);
      break;

    case 'mousedown':
      shouldSetConfirmButtonColor(activeColor);
      break;

    case 'mouseup':
      shouldSetConfirmButtonColor(hoverColor);
      break;

    case 'focus':
      var $confirmButton = modal.querySelector('button.confirm');
      var $cancelButton = modal.querySelector('button.cancel');

      if (targetedConfirm) {
        $cancelButton.style.boxShadow = 'none';
      } else {
        $confirmButton.style.boxShadow = 'none';
      }
      break;

    case 'click':
      var clickedOnModal = modal === target;
      var clickedOnModalChild = (0, _handleDom.isDescendant)(modal, target);

      // Ignore click outside if allowOutsideClick is false
      if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && !params.allowOutsideClick) {
        break;
      }

      if (targetedConfirm && doneFunctionExists && modalIsVisible) {
        handleConfirm(modal, params);
      } else if (doneFunctionExists && modalIsVisible || targetedOverlay) {
        handleCancel(modal, params);
      } else if ((0, _handleDom.isDescendant)(modal, target) && target.tagName === 'BUTTON') {
        sweetAlert.close();
      }
      break;
  }
};

/*
 *  User clicked on "Confirm"/"OK"
 */
var handleConfirm = function handleConfirm(modal, params) {
  var callbackValue = true;

  if ((0, _handleDom.hasClass)(modal, 'show-input')) {
    callbackValue = modal.querySelector('input').value;

    if (!callbackValue) {
      callbackValue = '';
    }
  }

  params.doneFunction(callbackValue);

  if (params.closeOnConfirm) {
    sweetAlert.close();
  }
  // Disable cancel and confirm button if the parameter is true
  if (params.showLoaderOnConfirm) {
    sweetAlert.disableButtons();
  }
};

/*
 *  User clicked on "Cancel"
 */
var handleCancel = function handleCancel(modal, params) {
  // Check if callback function expects a parameter (to track cancel actions)
  var functionAsStr = String(params.doneFunction).replace(/\s/g, '');
  var functionHandlesCancel = functionAsStr.substring(0, 9) === 'function(' && functionAsStr.substring(9, 10) !== ')';

  if (functionHandlesCancel) {
    params.doneFunction(false);
  }

  if (params.closeOnCancel) {
    sweetAlert.close();
  }
};

exports['default'] = {
  handleButton: handleButton,
  handleConfirm: handleConfirm,
  handleCancel: handleCancel
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var hasClass = function hasClass(elem, className) {
  return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');
};

var addClass = function addClass(elem, className) {
  if (!hasClass(elem, className)) {
    elem.className += ' ' + className;
  }
};

var removeClass = function removeClass(elem, className) {
  var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, ' ') + ' ';
  if (hasClass(elem, className)) {
    while (newClass.indexOf(' ' + className + ' ') >= 0) {
      newClass = newClass.replace(' ' + className + ' ', ' ');
    }
    elem.className = newClass.replace(/^\s+|\s+$/g, '');
  }
};

var escapeHtml = function escapeHtml(str) {
  var div = document.createElement('div');
  div.appendChild(document.createTextNode(str));
  return div.innerHTML;
};

var _show = function _show(elem) {
  elem.style.opacity = '';
  elem.style.display = 'block';
};

var show = function show(elems) {
  if (elems && !elems.length) {
    return _show(elems);
  }
  for (var i = 0; i < elems.length; ++i) {
    _show(elems[i]);
  }
};

var _hide = function _hide(elem) {
  elem.style.opacity = '';
  elem.style.display = 'none';
};

var hide = function hide(elems) {
  if (elems && !elems.length) {
    return _hide(elems);
  }
  for (var i = 0; i < elems.length; ++i) {
    _hide(elems[i]);
  }
};

var isDescendant = function isDescendant(parent, child) {
  var node = child.parentNode;
  while (node !== null) {
    if (node === parent) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
};

var getTopMargin = function getTopMargin(elem) {
  elem.style.left = '-9999px';
  elem.style.display = 'block';

  var height = elem.clientHeight,
      padding;
  if (typeof getComputedStyle !== "undefined") {
    // IE 8
    padding = parseInt(getComputedStyle(elem).getPropertyValue('padding-top'), 10);
  } else {
    padding = parseInt(elem.currentStyle.padding);
  }

  elem.style.left = '';
  elem.style.display = 'none';
  return '-' + parseInt((height + padding) / 2) + 'px';
};

var fadeIn = function fadeIn(elem, interval) {
  if (+elem.style.opacity < 1) {
    interval = interval || 16;
    elem.style.opacity = 0;
    elem.style.display = 'block';
    var last = +new Date();
    var tick = function tick() {
      elem.style.opacity = +elem.style.opacity + (new Date() - last) / 100;
      last = +new Date();

      if (+elem.style.opacity < 1) {
        setTimeout(tick, interval);
      }
    };
    tick();
  }
  elem.style.display = 'block'; //fallback IE8
};

var fadeOut = function fadeOut(elem, interval) {
  interval = interval || 16;
  elem.style.opacity = 1;
  var last = +new Date();
  var tick = function tick() {
    elem.style.opacity = +elem.style.opacity - (new Date() - last) / 100;
    last = +new Date();

    if (+elem.style.opacity > 0) {
      setTimeout(tick, interval);
    } else {
      elem.style.display = 'none';
    }
  };
  tick();
};

var fireClick = function fireClick(node) {
  // Taken from http://www.nonobtrusive.com/2011/11/29/programatically-fire-crossbrowser-click-event-with-javascript/
  // Then fixed for today's Chrome browser.
  if (typeof MouseEvent === 'function') {
    // Up-to-date approach
    var mevt = new MouseEvent('click', {
      view: window,
      bubbles: false,
      cancelable: true
    });
    node.dispatchEvent(mevt);
  } else if (document.createEvent) {
    // Fallback
    var evt = document.createEvent('MouseEvents');
    evt.initEvent('click', false, false);
    node.dispatchEvent(evt);
  } else if (document.createEventObject) {
    node.fireEvent('onclick');
  } else if (typeof node.onclick === 'function') {
    node.onclick();
  }
};

var stopEventPropagation = function stopEventPropagation(e) {
  // In particular, make sure the space bar doesn't scroll the main window.
  if (typeof e.stopPropagation === 'function') {
    e.stopPropagation();
    e.preventDefault();
  } else if (window.event && window.event.hasOwnProperty('cancelBubble')) {
    window.event.cancelBubble = true;
  }
};

exports.hasClass = hasClass;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.escapeHtml = escapeHtml;
exports._show = _show;
exports.show = show;
exports._hide = _hide;
exports.hide = hide;
exports.isDescendant = isDescendant;
exports.getTopMargin = getTopMargin;
exports.fadeIn = fadeIn;
exports.fadeOut = fadeOut;
exports.fireClick = fireClick;
exports.stopEventPropagation = stopEventPropagation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _handleDom = require('./handle-dom');

var _handleSwalDom = require('./handle-swal-dom');

var handleKeyDown = function handleKeyDown(event, params, modal) {
  var e = event || window.event;
  var keyCode = e.keyCode || e.which;

  var $okButton = modal.querySelector('button.confirm');
  var $cancelButton = modal.querySelector('button.cancel');
  var $modalButtons = modal.querySelectorAll('button[tabindex]');

  if ([9, 13, 32, 27].indexOf(keyCode) === -1) {
    // Don't do work on keys we don't care about.
    return;
  }

  var $targetElement = e.target || e.srcElement;

  var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.
  for (var i = 0; i < $modalButtons.length; i++) {
    if ($targetElement === $modalButtons[i]) {
      btnIndex = i;
      break;
    }
  }

  if (keyCode === 9) {
    // TAB
    if (btnIndex === -1) {
      // No button focused. Jump to the confirm button.
      $targetElement = $okButton;
    } else {
      // Cycle to the next button
      if (btnIndex === $modalButtons.length - 1) {
        $targetElement = $modalButtons[0];
      } else {
        $targetElement = $modalButtons[btnIndex + 1];
      }
    }

    (0, _handleDom.stopEventPropagation)(e);
    $targetElement.focus();

    if (params.confirmButtonColor) {
      (0, _handleSwalDom.setFocusStyle)($targetElement, params.confirmButtonColor);
    }
  } else {
    if (keyCode === 13) {
      if ($targetElement.tagName === 'INPUT') {
        $targetElement = $okButton;
        $okButton.focus();
      }

      if (btnIndex === -1) {
        // ENTER/SPACE clicked outside of a button.
        $targetElement = $okButton;
      } else {
        // Do nothing - let the browser handle it.
        $targetElement = undefined;
      }
    } else if (keyCode === 27 && params.allowEscapeKey === true) {
      $targetElement = $cancelButton;
      (0, _handleDom.fireClick)($targetElement, e);
    } else {
      // Fallback - let the browser handle it.
      $targetElement = undefined;
    }
  }
};

exports['default'] = handleKeyDown;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Db2RlL3N3ZWV0YWxlcnQvZGV2L21vZHVsZXMvaGFuZGxlLWtleS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7eUJBQWdELGNBQWM7OzZCQUNoQyxtQkFBbUI7O0FBR2pELElBQUksYUFBYSxHQUFHLFNBQWhCLGFBQWEsQ0FBWSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUNqRCxNQUFJLENBQUMsR0FBRyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztBQUM5QixNQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRW5DLE1BQUksU0FBUyxHQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMxRCxNQUFJLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pELE1BQUksYUFBYSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztBQUcvRCxNQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOztBQUUzQyxXQUFPO0dBQ1I7O0FBRUQsTUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDOztBQUU5QyxNQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUM3QyxRQUFJLGNBQWMsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDdkMsY0FBUSxHQUFHLENBQUMsQ0FBQztBQUNiLFlBQU07S0FDUDtHQUNGOztBQUVELE1BQUksT0FBTyxLQUFLLENBQUMsRUFBRTs7QUFFakIsUUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLEVBQUU7O0FBRW5CLG9CQUFjLEdBQUcsU0FBUyxDQUFDO0tBQzVCLE1BQU07O0FBRUwsVUFBSSxRQUFRLEtBQUssYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDekMsc0JBQWMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDbkMsTUFBTTtBQUNMLHNCQUFjLEdBQUcsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztPQUM5QztLQUNGOztBQUVELHlDQUFxQixDQUFDLENBQUMsQ0FBQztBQUN4QixrQkFBYyxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUV2QixRQUFJLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRTtBQUM3Qix3Q0FBYyxjQUFjLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDMUQ7R0FDRixNQUFNO0FBQ0wsUUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFO0FBQ2xCLFVBQUksY0FBYyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7QUFDdEMsc0JBQWMsR0FBRyxTQUFTLENBQUM7QUFDM0IsaUJBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztPQUNuQjs7QUFFRCxVQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRTs7QUFFbkIsc0JBQWMsR0FBRyxTQUFTLENBQUM7T0FDNUIsTUFBTTs7QUFFTCxzQkFBYyxHQUFHLFNBQVMsQ0FBQztPQUM1QjtLQUNGLE1BQU0sSUFBSSxPQUFPLEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO0FBQzNELG9CQUFjLEdBQUcsYUFBYSxDQUFDO0FBQy9CLGdDQUFVLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM5QixNQUFNOztBQUVMLG9CQUFjLEdBQUcsU0FBUyxDQUFDO0tBQzVCO0dBQ0Y7Q0FDRixDQUFDOztxQkFFYSxhQUFhIiwiZmlsZSI6Ii9Db2RlL3N3ZWV0YWxlcnQvZGV2L21vZHVsZXMvaGFuZGxlLWtleS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0b3BFdmVudFByb3BhZ2F0aW9uLCBmaXJlQ2xpY2sgfSBmcm9tICcuL2hhbmRsZS1kb20nO1xuaW1wb3J0IHsgc2V0Rm9jdXNTdHlsZSB9IGZyb20gJy4vaGFuZGxlLXN3YWwtZG9tJztcblxuXG52YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMsIG1vZGFsKSB7XG4gIHZhciBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZSB8fCBlLndoaWNoO1xuXG4gIHZhciAkb2tCdXR0b24gICAgID0gbW9kYWwucXVlcnlTZWxlY3RvcignYnV0dG9uLmNvbmZpcm0nKTtcbiAgdmFyICRjYW5jZWxCdXR0b24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCdidXR0b24uY2FuY2VsJyk7XG4gIHZhciAkbW9kYWxCdXR0b25zID0gbW9kYWwucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uW3RhYmluZGV4XScpO1xuXG5cbiAgaWYgKFs5LCAxMywgMzIsIDI3XS5pbmRleE9mKGtleUNvZGUpID09PSAtMSkge1xuICAgIC8vIERvbid0IGRvIHdvcmsgb24ga2V5cyB3ZSBkb24ndCBjYXJlIGFib3V0LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciAkdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuICB2YXIgYnRuSW5kZXggPSAtMTsgLy8gRmluZCB0aGUgYnV0dG9uIC0gbm90ZSwgdGhpcyBpcyBhIG5vZGVsaXN0LCBub3QgYW4gYXJyYXkuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgJG1vZGFsQnV0dG9ucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICgkdGFyZ2V0RWxlbWVudCA9PT0gJG1vZGFsQnV0dG9uc1tpXSkge1xuICAgICAgYnRuSW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleUNvZGUgPT09IDkpIHtcbiAgICAvLyBUQUJcbiAgICBpZiAoYnRuSW5kZXggPT09IC0xKSB7XG4gICAgICAvLyBObyBidXR0b24gZm9jdXNlZC4gSnVtcCB0byB0aGUgY29uZmlybSBidXR0b24uXG4gICAgICAkdGFyZ2V0RWxlbWVudCA9ICRva0J1dHRvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3ljbGUgdG8gdGhlIG5leHQgYnV0dG9uXG4gICAgICBpZiAoYnRuSW5kZXggPT09ICRtb2RhbEJ1dHRvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAkdGFyZ2V0RWxlbWVudCA9ICRtb2RhbEJ1dHRvbnNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdGFyZ2V0RWxlbWVudCA9ICRtb2RhbEJ1dHRvbnNbYnRuSW5kZXggKyAxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wRXZlbnRQcm9wYWdhdGlvbihlKTtcbiAgICAkdGFyZ2V0RWxlbWVudC5mb2N1cygpO1xuXG4gICAgaWYgKHBhcmFtcy5jb25maXJtQnV0dG9uQ29sb3IpIHtcbiAgICAgIHNldEZvY3VzU3R5bGUoJHRhcmdldEVsZW1lbnQsIHBhcmFtcy5jb25maXJtQnV0dG9uQ29sb3IpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGlmICgkdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAgICR0YXJnZXRFbGVtZW50ID0gJG9rQnV0dG9uO1xuICAgICAgICAkb2tCdXR0b24uZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJ0bkluZGV4ID09PSAtMSkge1xuICAgICAgICAvLyBFTlRFUi9TUEFDRSBjbGlja2VkIG91dHNpZGUgb2YgYSBidXR0b24uXG4gICAgICAgICR0YXJnZXRFbGVtZW50ID0gJG9rQnV0dG9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRG8gbm90aGluZyAtIGxldCB0aGUgYnJvd3NlciBoYW5kbGUgaXQuXG4gICAgICAgICR0YXJnZXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gMjcgJiYgcGFyYW1zLmFsbG93RXNjYXBlS2V5ID09PSB0cnVlKSB7XG4gICAgICAkdGFyZ2V0RWxlbWVudCA9ICRjYW5jZWxCdXR0b247XG4gICAgICBmaXJlQ2xpY2soJHRhcmdldEVsZW1lbnQsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGYWxsYmFjayAtIGxldCB0aGUgYnJvd3NlciBoYW5kbGUgaXQuXG4gICAgICAkdGFyZ2V0RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZUtleURvd247XG4iXX0=
},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
<<<<<<< HEAD

var _utils = require('./utils');

=======

var _utils = require('./utils');

>>>>>>> 442673c... remove background color/box shadow and add special classes
var _handleDom = require('./handle-dom');

var _defaultParams = require('./default-params');

var _defaultParams2 = _interopRequireDefault(_defaultParams);

/*
 * Add modal + overlay to DOM
 */

var _injectedHtml = require('./injected-html');

var _injectedHtml2 = _interopRequireDefault(_injectedHtml);

var modalClass = '.sweet-alert';
var overlayClass = '.sweet-overlay';
var inputHtml = '<fieldset>\n                  <input type="text" tabIndex="3" />\n                  <div class="sa-input-error"></div>\n                </fieldset>';

var sweetAlertInitialize = function sweetAlertInitialize() {
  var sweetWrap = document.createElement('div');
  sweetWrap.innerHTML = _injectedHtml2['default'];

  // Append elements to body
  while (sweetWrap.firstChild) {
    document.body.appendChild(sweetWrap.firstChild);
  }
};

/*
 * Get DOM element of modal
 */
var getModal = function getModal() {
  var $modal = document.querySelector(modalClass);

  if (!$modal) {
    sweetAlertInitialize();
    $modal = getModal();
  }

  return $modal;
};
<<<<<<< HEAD

/*
 * Build Input DOM
 */
var buildInput = function buildInput() {
  var $modal = getModal();
  var $inputContainer = $modal.querySelector('.sa-input-container');
  $inputContainer.innerHTML = inputHtml;
};
=======
>>>>>>> 442673c... remove background color/box shadow and add special classes

/*
 * Get DOM element of input (in modal)
 */
var getInput = function getInput() {
  var $modal = getModal();
  if ($modal) {
    return $modal.querySelector('input');
  }
};

/*
 * Get DOM element of overlay
 */
var getOverlay = function getOverlay() {
  return document.querySelector(overlayClass);
};

/*
 * Add box-shadow style to button (depending on its chosen bg-color)
 */
var setFocusStyle = function setFocusStyle($button, bgColor) {
<<<<<<< HEAD
  var rgbColor = (0, _utils.hexToRgb)(bgColor);
  $button.style.boxShadow = '0 0 2px rgba(' + rgbColor + ', 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)';
=======
  // var rgbColor = hexToRgb(bgColor);
  // $button.style.boxShadow = '0 0 2px rgba(' + rgbColor + ', 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)';
>>>>>>> 442673c... remove background color/box shadow and add special classes
};

/*
 * Animation when opening modal
 */
var openModal = function openModal(callback) {
  var $modal = getModal();
  (0, _handleDom.fadeIn)(getOverlay(), 10);
  (0, _handleDom.show)($modal);
  (0, _handleDom.addClass)($modal, 'showSweetAlert');
  (0, _handleDom.removeClass)($modal, 'hideSweetAlert');

  window.previousActiveElement = document.activeElement;
  var $okButton = $modal.querySelector('button.confirm');
  $okButton.focus();

  setTimeout(function () {
    (0, _handleDom.addClass)($modal, 'visible');
  }, 500);

  var timer = $modal.getAttribute('data-timer');

  if (timer !== 'null' && timer !== '') {
    var timerCallback = callback;
    $modal.timeout = setTimeout(function () {
      var doneFunctionExists = (timerCallback || null) && $modal.getAttribute('data-has-done-function') === 'true';
      if (doneFunctionExists) {
        timerCallback(null);
      } else {
        sweetAlert.close();
      }
    }, timer);
  }
};

/*
 * Reset the styling of the input
 * (for example if errors have been shown)
 */
var resetInput = function resetInput() {
  var $modal = getModal();
  var $input = getInput();

  (0, _handleDom.removeClass)($modal, 'show-input');
<<<<<<< HEAD
  if ($input !== null) {
    $input.value = _defaultParams2['default'].inputValue;
    $input.setAttribute('type', _defaultParams2['default'].inputType);
    $input.setAttribute('placeholder', _defaultParams2['default'].inputPlaceholder);
  }
=======
  $input.value = _defaultParams2['default'].inputValue;
  $input.setAttribute('type', _defaultParams2['default'].inputType);
  $input.setAttribute('placeholder', _defaultParams2['default'].inputPlaceholder);
>>>>>>> 442673c... remove background color/box shadow and add special classes

  resetInputError();
};

var resetInputError = function resetInputError(event) {
  // If press enter => ignore
  if (event && event.keyCode === 13) {
    return false;
  }

  var $modal = getModal();

  var $errorIcon = $modal.querySelector('.sa-input-error');
<<<<<<< HEAD
  if ($errorIcon !== null) {
    (0, _handleDom.removeClass)($errorIcon, 'show');
  }
=======
  (0, _handleDom.removeClass)($errorIcon, 'show');
>>>>>>> 442673c... remove background color/box shadow and add special classes

  var $errorContainer = $modal.querySelector('.sa-error-container');
  (0, _handleDom.removeClass)($errorContainer, 'show');
};

/*
 * Set "margin-top"-property on modal based on its computed height
 */
var fixVerticalPosition = function fixVerticalPosition() {
  var $modal = getModal();
  $modal.style.marginTop = (0, _handleDom.getTopMargin)(getModal());
};

exports.sweetAlertInitialize = sweetAlertInitialize;
exports.getModal = getModal;
exports.getOverlay = getOverlay;
exports.buildInput = buildInput;
exports.getInput = getInput;
exports.setFocusStyle = setFocusStyle;
exports.openModal = openModal;
exports.resetInput = resetInput;
exports.resetInputError = resetInputError;
exports.fixVerticalPosition = fixVerticalPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Db2RlL3N3ZWV0YWxlcnQvZGV2L21vZHVsZXMvaGFuZGxlLXN3YWwtZG9tLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3FCQUF5QixTQUFTOzt5QkFDZ0MsY0FBYzs7NkJBQ3RELGtCQUFrQjs7Ozs7Ozs7NEJBUW5CLGlCQUFpQjs7OztBQU4xQyxJQUFJLFVBQVUsR0FBSyxjQUFjLENBQUM7QUFDbEMsSUFBSSxZQUFZLEdBQUcsZ0JBQWdCLENBQUM7O0FBT3BDLElBQUksb0JBQW9CLEdBQUcsU0FBdkIsb0JBQW9CLEdBQWM7QUFDcEMsTUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QyxXQUFTLENBQUMsU0FBUyw0QkFBZSxDQUFDOzs7QUFHbkMsU0FBTyxTQUFTLENBQUMsVUFBVSxFQUFFO0FBQzNCLFlBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUNqRDtDQUNGLENBQUM7Ozs7O0FBS0YsSUFBSSxRQUFRLEdBQUcsU0FBWCxRQUFRLEdBQWM7QUFDeEIsTUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQzs7QUFFaEQsTUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNYLHdCQUFvQixFQUFFLENBQUM7QUFDdkIsVUFBTSxHQUFHLFFBQVEsRUFBRSxDQUFDO0dBQ3JCOztBQUVELFNBQU8sTUFBTSxDQUFDO0NBQ2YsQ0FBQzs7Ozs7QUFLRixJQUFJLFFBQVEsR0FBRyxTQUFYLFFBQVEsR0FBYztBQUN4QixNQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztBQUN4QixNQUFJLE1BQU0sRUFBRTtBQUNWLFdBQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUN0QztDQUNGLENBQUM7Ozs7O0FBS0YsSUFBSSxVQUFVLEdBQUcsU0FBYixVQUFVLEdBQWM7QUFDMUIsU0FBTyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzdDLENBQUM7Ozs7O0FBS0YsSUFBSSxhQUFhLEdBQUcsU0FBaEIsYUFBYSxDQUFZLE9BQU8sRUFBRSxPQUFPLEVBQUU7OztDQUc5QyxDQUFDOzs7OztBQUtGLElBQUksU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFZLFFBQVEsRUFBRTtBQUNqQyxNQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztBQUN4Qix5QkFBTyxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6Qix1QkFBSyxNQUFNLENBQUMsQ0FBQztBQUNiLDJCQUFTLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ25DLDhCQUFZLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDOztBQUV0QyxRQUFNLENBQUMscUJBQXFCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztBQUN0RCxNQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdkQsV0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUVsQixZQUFVLENBQUMsWUFBWTtBQUNyQiw2QkFBUyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDN0IsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFUixNQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUU5QyxNQUFJLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtBQUNwQyxRQUFJLGFBQWEsR0FBRyxRQUFRLENBQUM7QUFDN0IsVUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsWUFBVztBQUNyQyxVQUFJLGtCQUFrQixHQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQSxJQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsS0FBSyxNQUFNLEFBQUMsQ0FBQztBQUMvRyxVQUFJLGtCQUFrQixFQUFFO0FBQ3RCLHFCQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDckIsTUFDSTtBQUNILGtCQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7T0FDcEI7S0FDRixFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQ1g7Q0FDRixDQUFDOzs7Ozs7QUFNRixJQUFJLFVBQVUsR0FBRyxTQUFiLFVBQVUsR0FBYztBQUMxQixNQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztBQUN4QixNQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQzs7QUFFeEIsOEJBQVksTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2xDLFFBQU0sQ0FBQyxLQUFLLEdBQUcsMkJBQWMsVUFBVSxDQUFDO0FBQ3hDLFFBQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLDJCQUFjLFNBQVMsQ0FBQyxDQUFDO0FBQ3JELFFBQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLDJCQUFjLGdCQUFnQixDQUFDLENBQUM7O0FBRW5FLGlCQUFlLEVBQUUsQ0FBQztDQUNuQixDQUFDOztBQUdGLElBQUksZUFBZSxHQUFHLFNBQWxCLGVBQWUsQ0FBWSxLQUFLLEVBQUU7O0FBRXBDLE1BQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssRUFBRSxFQUFFO0FBQ2pDLFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRUQsTUFBSSxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7O0FBRXhCLE1BQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN6RCw4QkFBWSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRWhDLE1BQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNsRSw4QkFBWSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdEMsQ0FBQzs7Ozs7QUFNRixJQUFJLG1CQUFtQixHQUFHLFNBQXRCLG1CQUFtQixHQUFjO0FBQ25DLE1BQUksTUFBTSxHQUFHLFFBQVEsRUFBRSxDQUFDO0FBQ3hCLFFBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLDZCQUFhLFFBQVEsRUFBRSxDQUFDLENBQUM7Q0FDbkQsQ0FBQzs7UUFJQSxvQkFBb0IsR0FBcEIsb0JBQW9CO1FBQ3BCLFFBQVEsR0FBUixRQUFRO1FBQ1IsVUFBVSxHQUFWLFVBQVU7UUFDVixRQUFRLEdBQVIsUUFBUTtRQUNSLGFBQWEsR0FBYixhQUFhO1FBQ2IsU0FBUyxHQUFULFNBQVM7UUFDVCxVQUFVLEdBQVYsVUFBVTtRQUNWLGVBQWUsR0FBZixlQUFlO1FBQ2YsbUJBQW1CLEdBQW5CLG1CQUFtQiIsImZpbGUiOiIvQ29kZS9zd2VldGFsZXJ0L2Rldi9tb2R1bGVzL2hhbmRsZS1zd2FsLWRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhleFRvUmdiIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyByZW1vdmVDbGFzcywgZ2V0VG9wTWFyZ2luLCBmYWRlSW4sIHNob3csIGFkZENsYXNzIH0gZnJvbSAnLi9oYW5kbGUtZG9tJztcbmltcG9ydCBkZWZhdWx0UGFyYW1zIGZyb20gJy4vZGVmYXVsdC1wYXJhbXMnO1xuXG52YXIgbW9kYWxDbGFzcyAgID0gJy5zd2VldC1hbGVydCc7XG52YXIgb3ZlcmxheUNsYXNzID0gJy5zd2VldC1vdmVybGF5JztcblxuLypcbiAqIEFkZCBtb2RhbCArIG92ZXJsYXkgdG8gRE9NXG4gKi9cbmltcG9ydCBpbmplY3RlZEhUTUwgZnJvbSAnLi9pbmplY3RlZC1odG1sJztcblxudmFyIHN3ZWV0QWxlcnRJbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzd2VldFdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc3dlZXRXcmFwLmlubmVySFRNTCA9IGluamVjdGVkSFRNTDtcblxuICAvLyBBcHBlbmQgZWxlbWVudHMgdG8gYm9keVxuICB3aGlsZSAoc3dlZXRXcmFwLmZpcnN0Q2hpbGQpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN3ZWV0V3JhcC5maXJzdENoaWxkKTtcbiAgfVxufTtcblxuLypcbiAqIEdldCBET00gZWxlbWVudCBvZiBtb2RhbFxuICovXG52YXIgZ2V0TW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgdmFyICRtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW9kYWxDbGFzcyk7XG5cbiAgaWYgKCEkbW9kYWwpIHtcbiAgICBzd2VldEFsZXJ0SW5pdGlhbGl6ZSgpO1xuICAgICRtb2RhbCA9IGdldE1vZGFsKCk7XG4gIH1cblxuICByZXR1cm4gJG1vZGFsO1xufTtcblxuLypcbiAqIEdldCBET00gZWxlbWVudCBvZiBpbnB1dCAoaW4gbW9kYWwpXG4gKi9cbnZhciBnZXRJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgJG1vZGFsID0gZ2V0TW9kYWwoKTtcbiAgaWYgKCRtb2RhbCkge1xuICAgIHJldHVybiAkbW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgfVxufTtcblxuLypcbiAqIEdldCBET00gZWxlbWVudCBvZiBvdmVybGF5XG4gKi9cbnZhciBnZXRPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG92ZXJsYXlDbGFzcyk7XG59O1xuXG4vKlxuICogQWRkIGJveC1zaGFkb3cgc3R5bGUgdG8gYnV0dG9uIChkZXBlbmRpbmcgb24gaXRzIGNob3NlbiBiZy1jb2xvcilcbiAqL1xudmFyIHNldEZvY3VzU3R5bGUgPSBmdW5jdGlvbigkYnV0dG9uLCBiZ0NvbG9yKSB7XG4gIC8vIHZhciByZ2JDb2xvciA9IGhleFRvUmdiKGJnQ29sb3IpO1xuICAvLyAkYnV0dG9uLnN0eWxlLmJveFNoYWRvdyA9ICcwIDAgMnB4IHJnYmEoJyArIHJnYkNvbG9yICsgJywgMC44KSwgaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwgMCwgMCwgMC4wNSknO1xufTtcblxuLypcbiAqIEFuaW1hdGlvbiB3aGVuIG9wZW5pbmcgbW9kYWxcbiAqL1xudmFyIG9wZW5Nb2RhbCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciAkbW9kYWwgPSBnZXRNb2RhbCgpO1xuICBmYWRlSW4oZ2V0T3ZlcmxheSgpLCAxMCk7XG4gIHNob3coJG1vZGFsKTtcbiAgYWRkQ2xhc3MoJG1vZGFsLCAnc2hvd1N3ZWV0QWxlcnQnKTtcbiAgcmVtb3ZlQ2xhc3MoJG1vZGFsLCAnaGlkZVN3ZWV0QWxlcnQnKTtcblxuICB3aW5kb3cucHJldmlvdXNBY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgdmFyICRva0J1dHRvbiA9ICRtb2RhbC5xdWVyeVNlbGVjdG9yKCdidXR0b24uY29uZmlybScpO1xuICAkb2tCdXR0b24uZm9jdXMoKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBhZGRDbGFzcygkbW9kYWwsICd2aXNpYmxlJyk7XG4gIH0sIDUwMCk7XG5cbiAgdmFyIHRpbWVyID0gJG1vZGFsLmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lcicpO1xuXG4gIGlmICh0aW1lciAhPT0gJ251bGwnICYmIHRpbWVyICE9PSAnJykge1xuICAgIHZhciB0aW1lckNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgJG1vZGFsLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRvbmVGdW5jdGlvbkV4aXN0cyA9ICgodGltZXJDYWxsYmFjayB8fCBudWxsKSAmJiAkbW9kYWwuZ2V0QXR0cmlidXRlKCdkYXRhLWhhcy1kb25lLWZ1bmN0aW9uJykgPT09ICd0cnVlJyk7XG4gICAgICBpZiAoZG9uZUZ1bmN0aW9uRXhpc3RzKSB7IFxuICAgICAgICB0aW1lckNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN3ZWV0QWxlcnQuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9LCB0aW1lcik7XG4gIH1cbn07XG5cbi8qXG4gKiBSZXNldCB0aGUgc3R5bGluZyBvZiB0aGUgaW5wdXRcbiAqIChmb3IgZXhhbXBsZSBpZiBlcnJvcnMgaGF2ZSBiZWVuIHNob3duKVxuICovXG52YXIgcmVzZXRJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgJG1vZGFsID0gZ2V0TW9kYWwoKTtcbiAgdmFyICRpbnB1dCA9IGdldElucHV0KCk7XG5cbiAgcmVtb3ZlQ2xhc3MoJG1vZGFsLCAnc2hvdy1pbnB1dCcpO1xuICAkaW5wdXQudmFsdWUgPSBkZWZhdWx0UGFyYW1zLmlucHV0VmFsdWU7XG4gICRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBkZWZhdWx0UGFyYW1zLmlucHV0VHlwZSk7XG4gICRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJywgZGVmYXVsdFBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyKTtcblxuICByZXNldElucHV0RXJyb3IoKTtcbn07XG5cblxudmFyIHJlc2V0SW5wdXRFcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIC8vIElmIHByZXNzIGVudGVyID0+IGlnbm9yZVxuICBpZiAoZXZlbnQgJiYgZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgJG1vZGFsID0gZ2V0TW9kYWwoKTtcblxuICB2YXIgJGVycm9ySWNvbiA9ICRtb2RhbC5xdWVyeVNlbGVjdG9yKCcuc2EtaW5wdXQtZXJyb3InKTtcbiAgcmVtb3ZlQ2xhc3MoJGVycm9ySWNvbiwgJ3Nob3cnKTtcblxuICB2YXIgJGVycm9yQ29udGFpbmVyID0gJG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5zYS1lcnJvci1jb250YWluZXInKTtcbiAgcmVtb3ZlQ2xhc3MoJGVycm9yQ29udGFpbmVyLCAnc2hvdycpO1xufTtcblxuXG4vKlxuICogU2V0IFwibWFyZ2luLXRvcFwiLXByb3BlcnR5IG9uIG1vZGFsIGJhc2VkIG9uIGl0cyBjb21wdXRlZCBoZWlnaHRcbiAqL1xudmFyIGZpeFZlcnRpY2FsUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyICRtb2RhbCA9IGdldE1vZGFsKCk7XG4gICRtb2RhbC5zdHlsZS5tYXJnaW5Ub3AgPSBnZXRUb3BNYXJnaW4oZ2V0TW9kYWwoKSk7XG59O1xuXG5cbmV4cG9ydCB7IFxuICBzd2VldEFsZXJ0SW5pdGlhbGl6ZSxcbiAgZ2V0TW9kYWwsXG4gIGdldE92ZXJsYXksXG4gIGdldElucHV0LFxuICBzZXRGb2N1c1N0eWxlLFxuICBvcGVuTW9kYWwsXG4gIHJlc2V0SW5wdXQsXG4gIHJlc2V0SW5wdXRFcnJvcixcbiAgZml4VmVydGljYWxQb3NpdGlvblxufTtcbiJdfQ==
},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var injectedHTML =

// Dark overlay
"<div class=\"sweet-overlay\" tabIndex=\"-1\"></div>" +

// Modal
"<div class=\"sweet-alert\">" +

// Error icon
"<div class=\"sa-icon sa-error\">\n      <span class=\"sa-x-mark\">\n        <span class=\"sa-line sa-left\"></span>\n        <span class=\"sa-line sa-right\"></span>\n      </span>\n    </div>" +

// Warning icon
"<div class=\"sa-icon sa-warning\">\n      <span class=\"sa-body\"></span>\n      <span class=\"sa-dot\"></span>\n    </div>" +

// Info icon
"<div class=\"sa-icon sa-info\"></div>" +

// Success icon
"<div class=\"sa-icon sa-success\">\n      <span class=\"sa-line sa-tip\"></span>\n      <span class=\"sa-line sa-long\"></span>\n\n      <div class=\"sa-placeholder\"></div>\n      <div class=\"sa-fix\"></div>\n    </div>" + "<div class=\"sa-icon sa-custom\"></div>" +

// Title, text and input
"<h2>Title</h2>\n    <p>Text</p>\n    <div class=\"sa-input-container\">\n    </div>\n    " +

// Input errors
"<div class=\"sa-error-container\">\n      <div class=\"icon\"><!-- Remove \"!\" for 508 reasons --></div>\n      <p><!-- Remove \"Not valid!\" for 508 reasons --></p>\n    </div>" +

// Cancel and confirm buttons
"<div class=\"sa-button-container\">\n      <button class=\"cancel uscis-button uscis-button-gray\" tabIndex=\"2\">Cancel</button>\n      <div class=\"sa-confirm-button-container\">\n        <button class=\"confirm uscis-button uscis-button-blue\" tabIndex=\"1\">OK</button>" +

// Loading animation
"<div class=\"la-ball-fall\">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div>" +

// End of modal
"</div>";

exports["default"] = injectedHTML;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Db2RlL3N3ZWV0YWxlcnQvZGV2L21vZHVsZXMvaW5qZWN0ZWQtaHRtbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUksWUFBWTs7O0FBR2Q7Ozs2QkFHMkI7OztrTUFRbEI7Ozs2SEFNQTs7O3VDQUc4Qjs7OytOQVM5Qiw0Q0FFZ0M7Ozs0SkFRM0I7Ozs0R0FNTDs7O21SQU02RTs7OzZJQVM3RTs7O1FBR0QsQ0FBQzs7cUJBRUksWUFBWSIsImZpbGUiOiIvQ29kZS9zd2VldGFsZXJ0L2Rldi9tb2R1bGVzL2luamVjdGVkLWh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5qZWN0ZWRIVE1MID0gXG5cbiAgLy8gRGFyayBvdmVybGF5XG4gIGA8ZGl2IGNsYXNzPVwic3dlZXQtb3ZlcmxheVwiIHRhYkluZGV4PVwiLTFcIj48L2Rpdj5gICtcblxuICAvLyBNb2RhbFxuICBgPGRpdiBjbGFzcz1cInN3ZWV0LWFsZXJ0XCI+YCArXG5cbiAgICAvLyBFcnJvciBpY29uXG4gICAgYDxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLWVycm9yXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInNhLXgtbWFya1wiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNhLWxpbmUgc2EtbGVmdFwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzYS1saW5lIHNhLXJpZ2h0XCI+PC9zcGFuPlxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PmAgK1xuXG4gICAgLy8gV2FybmluZyBpY29uXG4gICAgYDxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLXdhcm5pbmdcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwic2EtYm9keVwiPjwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwic2EtZG90XCI+PC9zcGFuPlxuICAgIDwvZGl2PmAgK1xuXG4gICAgLy8gSW5mbyBpY29uXG4gICAgYDxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLWluZm9cIj48L2Rpdj5gICtcblxuICAgIC8vIFN1Y2Nlc3MgaWNvblxuICAgIGA8ZGl2IGNsYXNzPVwic2EtaWNvbiBzYS1zdWNjZXNzXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInNhLWxpbmUgc2EtdGlwXCI+PC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3M9XCJzYS1saW5lIHNhLWxvbmdcIj48L3NwYW4+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJzYS1wbGFjZWhvbGRlclwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInNhLWZpeFwiPjwvZGl2PlxuICAgIDwvZGl2PmAgK1xuXG4gICAgYDxkaXYgY2xhc3M9XCJzYS1pY29uIHNhLWN1c3RvbVwiPjwvZGl2PmAgK1xuXG4gICAgLy8gVGl0bGUsIHRleHQgYW5kIGlucHV0XG4gICAgYDxoMj5UaXRsZTwvaDI+XG4gICAgPHA+VGV4dDwvcD5cbiAgICA8ZmllbGRzZXQ+XG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB0YWJJbmRleD1cIjNcIiAvPlxuICAgICAgPGRpdiBjbGFzcz1cInNhLWlucHV0LWVycm9yXCI+PC9kaXY+XG4gICAgPC9maWVsZHNldD5gICtcblxuICAgIC8vIElucHV0IGVycm9yc1xuICAgIGA8ZGl2IGNsYXNzPVwic2EtZXJyb3ItY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiaWNvblwiPiE8L2Rpdj5cbiAgICAgIDxwPk5vdCB2YWxpZCE8L3A+XG4gICAgPC9kaXY+YCArXG5cbiAgICAvLyBDYW5jZWwgYW5kIGNvbmZpcm0gYnV0dG9uc1xuICAgIGA8ZGl2IGNsYXNzPVwic2EtYnV0dG9uLWNvbnRhaW5lclwiPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhbmNlbCB1c2Npcy1idXR0b24gdXNjaXMtYnV0dG9uLWdyYXlcIiB0YWJJbmRleD1cIjJcIj5DYW5jZWw8L2J1dHRvbj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzYS1jb25maXJtLWJ1dHRvbi1jb250YWluZXJcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNvbmZpcm0gdXNjaXMtYnV0dG9uIHVzY2lzLWJ1dHRvbi1ibHVlXCIgdGFiSW5kZXg9XCIxXCI+T0s8L2J1dHRvbj5gICsgXG5cbiAgICAgICAgLy8gTG9hZGluZyBhbmltYXRpb25cbiAgICAgICAgYDxkaXYgY2xhc3M9XCJsYS1iYWxsLWZhbGxcIj5cbiAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gICtcblxuICAvLyBFbmQgb2YgbW9kYWxcbiAgYDwvZGl2PmA7XG5cbmV4cG9ydCBkZWZhdWx0IGluamVjdGVkSFRNTDtcbiJdfQ==
},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _utils = require('./utils');
<<<<<<< HEAD

var _handleSwalDom = require('./handle-swal-dom');

=======

var _handleSwalDom = require('./handle-swal-dom');

>>>>>>> 442673c... remove background color/box shadow and add special classes
var _handleDom = require('./handle-dom');

/*
 * Set type, text and actions on modal
 */
var alertTypes = ['error', 'warning', 'info', 'success', 'input', 'prompt'];

var setParameters = function setParameters(params) {
  var modal = (0, _handleSwalDom.getModal)();

  var $title = modal.querySelector('h2');
  var $text = modal.querySelector('p');
  var $cancelBtn = modal.querySelector('button.cancel');
  var $confirmBtn = modal.querySelector('button.confirm');

  /*
   * Title
   */
  $title.innerHTML = params.html ? params.title : (0, _handleDom.escapeHtml)(params.title).split('\n').join('<br>');

  /*
   * Text
   */
  $text.innerHTML = params.html ? params.text : (0, _handleDom.escapeHtml)(params.text || '').split('\n').join('<br>');
  if (params.text) (0, _handleDom.show)($text);

  /*
   * Custom class
   */
  if (params.customClass) {
    (0, _handleDom.addClass)(modal, params.customClass);
    modal.setAttribute('data-custom-class', params.customClass);
  } else {
    // Find previously set classes and remove them
    var customClass = modal.getAttribute('data-custom-class');
    (0, _handleDom.removeClass)(modal, customClass);
    modal.setAttribute('data-custom-class', '');
  }

  /*
   * Icon
   */
  (0, _handleDom.hide)(modal.querySelectorAll('.sa-icon'));

  if (params.type && !(0, _utils.isIE8)()) {
    var _ret = (function () {

      var validType = false;

      for (var i = 0; i < alertTypes.length; i++) {
        if (params.type === alertTypes[i]) {
          validType = true;
          break;
        }
      }

      if (!validType) {
        logStr('Unknown alert type: ' + params.type);
        return {
          v: false
        };
      }

      var typesWithIcons = ['success', 'error', 'warning', 'info'];
      var $icon = undefined;

      if (typesWithIcons.indexOf(params.type) !== -1) {
        $icon = modal.querySelector('.sa-icon.' + 'sa-' + params.type);
        (0, _handleDom.show)($icon);
      }

<<<<<<< HEAD
      //add input if the type is input
      if (params.type === alertTypes[4]) {
        (0, _handleSwalDom.buildInput)();
      }
=======
>>>>>>> 442673c... remove background color/box shadow and add special classes
      var $input = (0, _handleSwalDom.getInput)();

      // Animate icon
      switch (params.type) {

        case 'success':
          (0, _handleDom.addClass)($icon, 'animate');
          (0, _handleDom.addClass)($icon.querySelector('.sa-tip'), 'animateSuccessTip');
          (0, _handleDom.addClass)($icon.querySelector('.sa-long'), 'animateSuccessLong');
          break;

        case 'error':
          (0, _handleDom.addClass)($icon, 'animateErrorIcon');
          (0, _handleDom.addClass)($icon.querySelector('.sa-x-mark'), 'animateXMark');
          break;

        case 'warning':
          (0, _handleDom.addClass)($icon, 'pulseWarning');
          (0, _handleDom.addClass)($icon.querySelector('.sa-body'), 'pulseWarningIns');
          (0, _handleDom.addClass)($icon.querySelector('.sa-dot'), 'pulseWarningIns');
          break;

        case 'input':
        case 'prompt':
          $input.setAttribute('type', params.inputType);
          $input.value = params.inputValue;
          $input.setAttribute('placeholder', params.inputPlaceholder);
          (0, _handleDom.addClass)(modal, 'show-input');
          setTimeout(function () {
            $input.focus();
            $input.addEventListener('keyup', swal.resetInputError);
          }, 400);
          break;
      }
    })();

    if (typeof _ret === 'object') return _ret.v;
  }

  /*
   * Custom image
   */
  if (params.imageUrl) {
    var $customIcon = modal.querySelector('.sa-icon.sa-custom');

    $customIcon.style.backgroundImage = 'url(' + params.imageUrl + ')';
    (0, _handleDom.show)($customIcon);

    var _imgWidth = 80;
    var _imgHeight = 80;

    if (params.imageSize) {
      var dimensions = params.imageSize.toString().split('x');
      var imgWidth = dimensions[0];
      var imgHeight = dimensions[1];

      if (!imgWidth || !imgHeight) {
        logStr('Parameter imageSize expects value with format WIDTHxHEIGHT, got ' + params.imageSize);
      } else {
        _imgWidth = imgWidth;
        _imgHeight = imgHeight;
      }
    }

    $customIcon.setAttribute('style', $customIcon.getAttribute('style') + 'width:' + _imgWidth + 'px; height:' + _imgHeight + 'px');
  }

  /*
   * Show cancel button?
   */
  modal.setAttribute('data-has-cancel-button', params.showCancelButton);
  if (params.showCancelButton) {
    $cancelBtn.style.display = 'inline-block';
<<<<<<< HEAD
=======
  } else {
    (0, _handleDom.hide)($cancelBtn);
>>>>>>> 442673c... remove background color/box shadow and add special classes
  }

  /*
   * Show confirm button?
   */
  modal.setAttribute('data-has-confirm-button', params.showConfirmButton);
  if (params.showConfirmButton) {
    $confirmBtn.style.display = 'inline-block';
  } else {
    (0, _handleDom.hide)($confirmBtn);
  }

  /*
   * Custom text on cancel/confirm buttons
   */
  if (params.cancelButtonText) {
    $cancelBtn.innerHTML = (0, _handleDom.escapeHtml)(params.cancelButtonText);
  }
  if (params.confirmButtonText) {
    $confirmBtn.innerHTML = (0, _handleDom.escapeHtml)(params.confirmButtonText);
  }

  /*
   * Custom color on confirm button
   */
  if (params.confirmButtonColor) {}
  // Set confirm button to selected background color
  // $confirmBtn.style.backgroundColor = params.confirmButtonColor;

  // Set the confirm button color to the loading ring
  // $confirmBtn.style.borderLeftColor = params.confirmLoadingButtonColor;
  // $confirmBtn.style.borderRightColor = params.confirmLoadingButtonColor;

<<<<<<< HEAD
    // Set box-shadow to default focused button
    (0, _handleSwalDom.setFocusStyle)($confirmBtn, params.confirmButtonColor);
  }
=======
  // Set box-shadow to default focused button
  // setFocusStyle($confirmBtn, params.confirmButtonColor);
>>>>>>> 442673c... remove background color/box shadow and add special classes

  /*
   * Allow outside click
   */
  modal.setAttribute('data-allow-outside-click', params.allowOutsideClick);

  /*
   * Callback function
   */
  var hasDoneFunction = params.doneFunction ? true : false;
  modal.setAttribute('data-has-done-function', hasDoneFunction);

  /*
   * Animation
   */
  if (!params.animation) {
    modal.setAttribute('data-animation', 'none');
  } else if (typeof params.animation === 'string') {
    modal.setAttribute('data-animation', params.animation); // Custom animation
  } else {
      modal.setAttribute('data-animation', 'pop');
    }

  /*
   * Timer
   */
  modal.setAttribute('data-timer', params.timer);
};

exports['default'] = setParameters;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(require,module,exports){
/*
 * Allow user to pass their own params
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var extend = function extend(a, b) {
  for (var key in b) {
    if (b.hasOwnProperty(key)) {
      a[key] = b[key];
    }
  }
  return a;
};

/*
 * Convert HEX codes to RGB values (#000000 -> rgb(0,0,0))
 */
var hexToRgb = function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) : null;
};

/*
 * Check if the user is using Internet Explorer 8 (for fallbacks)
 */
var isIE8 = function isIE8() {
  return window.attachEvent && !window.addEventListener;
};

/*
 * IE compatible logging for developers
 */
var logStr = function logStr(string) {
  if (window.console) {
    // IE...
    window.console.log('SweetAlert: ' + string);
  }
};

/*
 * Set hover, active and focus-states for buttons 
 * (source: http://www.sitepoint.com/javascript-generate-lighter-darker-color)
 */
var colorLuminance = function colorLuminance(hex, lum) {
  // Validate hex string
  hex = String(hex).replace(/[^0-9a-f]/gi, '');
  if (hex.length < 6) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  lum = lum || 0;

  // Convert to decimal and change luminosity
  var rgb = '#';
  var c;
  var i;

  for (i = 0; i < 3; i++) {
    c = parseInt(hex.substr(i * 2, 2), 16);
    c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
    rgb += ('00' + c).substr(c.length);
  }

  return rgb;
};

exports.extend = extend;
exports.hexToRgb = hexToRgb;
exports.isIE8 = isIE8;
exports.logStr = logStr;
exports.colorLuminance = colorLuminance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Db2RlL3N3ZWV0YWxlcnQvZGV2L21vZHVsZXMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFJLE1BQU0sR0FBRyxTQUFULE1BQU0sQ0FBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQzFCLE9BQUssSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO0FBQ2pCLFFBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN6QixPQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCO0dBQ0Y7QUFDRCxTQUFPLENBQUMsQ0FBQztDQUNWLENBQUM7Ozs7O0FBS0YsSUFBSSxRQUFRLEdBQUcsU0FBWCxRQUFRLENBQVksR0FBRyxFQUFFO0FBQzNCLE1BQUksTUFBTSxHQUFHLDJDQUEyQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuRSxTQUFPLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztDQUNsSCxDQUFDOzs7OztBQUtGLElBQUksS0FBSyxHQUFHLFNBQVIsS0FBSyxHQUFjO0FBQ3JCLFNBQVEsTUFBTSxDQUFDLFdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRTtDQUN6RCxDQUFDOzs7OztBQUtGLElBQUksTUFBTSxHQUFHLFNBQVQsTUFBTSxDQUFZLE1BQU0sRUFBRTtBQUM1QixNQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7O0FBRWxCLFVBQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsQ0FBQztHQUM3QztDQUNGLENBQUM7Ozs7OztBQU1GLElBQUksY0FBYyxHQUFHLFNBQWpCLGNBQWMsQ0FBWSxHQUFHLEVBQUUsR0FBRyxFQUFFOztBQUV0QyxLQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0MsTUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNsQixPQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDM0Q7QUFDRCxLQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQzs7O0FBR2YsTUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2QsTUFBSSxDQUFDLENBQUM7QUFDTixNQUFJLENBQUMsQ0FBQzs7QUFFTixPQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QixLQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2QyxLQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckUsT0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDcEM7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWixDQUFDOztRQUlBLE1BQU0sR0FBTixNQUFNO1FBQ04sUUFBUSxHQUFSLFFBQVE7UUFDUixLQUFLLEdBQUwsS0FBSztRQUNMLE1BQU0sR0FBTixNQUFNO1FBQ04sY0FBYyxHQUFkLGNBQWMiLCJmaWxlIjoiL0NvZGUvc3dlZXRhbGVydC9kZXYvbW9kdWxlcy91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBbGxvdyB1c2VyIHRvIHBhc3MgdGhlaXIgb3duIHBhcmFtc1xuICovXG52YXIgZXh0ZW5kID0gZnVuY3Rpb24oYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGlmIChiLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGFba2V5XSA9IGJba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuXG4vKlxuICogQ29udmVydCBIRVggY29kZXMgdG8gUkdCIHZhbHVlcyAoIzAwMDAwMCAtPiByZ2IoMCwwLDApKVxuICovXG52YXIgaGV4VG9SZ2IgPSBmdW5jdGlvbihoZXgpIHtcbiAgdmFyIHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICByZXR1cm4gcmVzdWx0ID8gcGFyc2VJbnQocmVzdWx0WzFdLCAxNikgKyAnLCAnICsgcGFyc2VJbnQocmVzdWx0WzJdLCAxNikgKyAnLCAnICsgcGFyc2VJbnQocmVzdWx0WzNdLCAxNikgOiBudWxsO1xufTtcblxuLypcbiAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHVzaW5nIEludGVybmV0IEV4cGxvcmVyIDggKGZvciBmYWxsYmFja3MpXG4gKi9cbnZhciBpc0lFOCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHdpbmRvdy5hdHRhY2hFdmVudCAmJiAhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpO1xufTtcblxuLypcbiAqIElFIGNvbXBhdGlibGUgbG9nZ2luZyBmb3IgZGV2ZWxvcGVyc1xuICovXG52YXIgbG9nU3RyID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgIC8vIElFLi4uXG4gICAgd2luZG93LmNvbnNvbGUubG9nKCdTd2VldEFsZXJ0OiAnICsgc3RyaW5nKTtcbiAgfVxufTtcblxuLypcbiAqIFNldCBob3ZlciwgYWN0aXZlIGFuZCBmb2N1cy1zdGF0ZXMgZm9yIGJ1dHRvbnMgXG4gKiAoc291cmNlOiBodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vamF2YXNjcmlwdC1nZW5lcmF0ZS1saWdodGVyLWRhcmtlci1jb2xvcilcbiAqL1xudmFyIGNvbG9yTHVtaW5hbmNlID0gZnVuY3Rpb24oaGV4LCBsdW0pIHtcbiAgLy8gVmFsaWRhdGUgaGV4IHN0cmluZ1xuICBoZXggPSBTdHJpbmcoaGV4KS5yZXBsYWNlKC9bXjAtOWEtZl0vZ2ksICcnKTtcbiAgaWYgKGhleC5sZW5ndGggPCA2KSB7XG4gICAgaGV4ID0gaGV4WzBdICsgaGV4WzBdICsgaGV4WzFdICsgaGV4WzFdICsgaGV4WzJdICsgaGV4WzJdO1xuICB9XG4gIGx1bSA9IGx1bSB8fCAwO1xuXG4gIC8vIENvbnZlcnQgdG8gZGVjaW1hbCBhbmQgY2hhbmdlIGx1bWlub3NpdHlcbiAgdmFyIHJnYiA9ICcjJztcbiAgdmFyIGM7XG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICBjID0gcGFyc2VJbnQoaGV4LnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICBjID0gTWF0aC5yb3VuZChNYXRoLm1pbihNYXRoLm1heCgwLCBjICsgYyAqIGx1bSksIDI1NSkpLnRvU3RyaW5nKDE2KTtcbiAgICByZ2IgKz0gKCcwMCcgKyBjKS5zdWJzdHIoYy5sZW5ndGgpO1xuICB9XG5cbiAgcmV0dXJuIHJnYjtcbn07XG5cblxuZXhwb3J0IHtcbiAgZXh0ZW5kLFxuICBoZXhUb1JnYixcbiAgaXNJRTgsXG4gIGxvZ1N0cixcbiAgY29sb3JMdW1pbmFuY2Vcbn07XG4iXX0=
},{}]},{},[1])
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,
=======
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZXYvc3dlZXRhbGVydC5lczYuanMiLCJkZXYvbW9kdWxlcy9kZWZhdWx0LXBhcmFtcy5qcyIsImRldi9tb2R1bGVzL2hhbmRsZS1jbGljay5qcyIsImRldi9tb2R1bGVzL2hhbmRsZS1kb20uanMiLCJkZXYvbW9kdWxlcy9oYW5kbGUta2V5LmpzIiwiZGV2L21vZHVsZXMvaGFuZGxlLXN3YWwtZG9tLmpzIiwiZGV2L21vZHVsZXMvaW5qZWN0ZWQtaHRtbC5qcyIsImRldi9tb2R1bGVzL3NldC1wYXJhbXMuanMiLCJkZXYvbW9kdWxlcy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9TQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIFN3ZWV0QWxlcnRcbi8vIDIwMTQtMjAxNSAoYykgLSBUcmlzdGFuIEVkd2FyZHNcbi8vIGdpdGh1Yi5jb20vdDR0NS9zd2VldGFsZXJ0XG5cbi8qXG4gKiBqUXVlcnktbGlrZSBmdW5jdGlvbnMgZm9yIG1hbmlwdWxhdGluZyB0aGUgRE9NXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9tb2R1bGVzSGFuZGxlRG9tID0gcmVxdWlyZSgnLi9tb2R1bGVzL2hhbmRsZS1kb20nKTtcblxuLypcbiAqIEhhbmR5IHV0aWxpdGllc1xuICovXG5cbnZhciBfbW9kdWxlc1V0aWxzID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJyk7XG5cbi8qXG4gKiAgSGFuZGxlIHN3ZWV0QWxlcnQncyBET00gZWxlbWVudHNcbiAqL1xuXG52YXIgX21vZHVsZXNIYW5kbGVTd2FsRG9tID0gcmVxdWlyZSgnLi9tb2R1bGVzL2hhbmRsZS1zd2FsLWRvbScpO1xuXG4vLyBIYW5kbGUgYnV0dG9uIGV2ZW50cyBhbmQga2V5Ym9hcmQgZXZlbnRzXG5cbnZhciBfbW9kdWxlc0hhbmRsZUNsaWNrID0gcmVxdWlyZSgnLi9tb2R1bGVzL2hhbmRsZS1jbGljaycpO1xuXG52YXIgX21vZHVsZXNIYW5kbGVLZXkgPSByZXF1aXJlKCcuL21vZHVsZXMvaGFuZGxlLWtleScpO1xuXG52YXIgX21vZHVsZXNIYW5kbGVLZXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlc0hhbmRsZUtleSk7XG5cbi8vIERlZmF1bHQgdmFsdWVzXG5cbnZhciBfbW9kdWxlc0RlZmF1bHRQYXJhbXMgPSByZXF1aXJlKCcuL21vZHVsZXMvZGVmYXVsdC1wYXJhbXMnKTtcblxudmFyIF9tb2R1bGVzRGVmYXVsdFBhcmFtczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGVzRGVmYXVsdFBhcmFtcyk7XG5cbnZhciBfbW9kdWxlc1NldFBhcmFtcyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9zZXQtcGFyYW1zJyk7XG5cbnZhciBfbW9kdWxlc1NldFBhcmFtczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGVzU2V0UGFyYW1zKTtcblxuLypcbiAqIFJlbWVtYmVyIHN0YXRlIGluIGNhc2VzIHdoZXJlIG9wZW5pbmcgYW5kIGhhbmRsaW5nIGEgbW9kYWwgd2lsbCBmaWRkbGUgd2l0aCBpdC5cbiAqIChXZSBhbHNvIHVzZSB3aW5kb3cucHJldmlvdXNBY3RpdmVFbGVtZW50IGFzIGEgZ2xvYmFsIHZhcmlhYmxlKVxuICovXG52YXIgcHJldmlvdXNXaW5kb3dLZXlEb3duO1xudmFyIGxhc3RGb2N1c2VkQnV0dG9uO1xuXG4vKlxuICogR2xvYmFsIHN3ZWV0QWxlcnQgZnVuY3Rpb25cbiAqICh0aGlzIGlzIHdoYXQgdGhlIHVzZXIgY2FsbHMpXG4gKi9cbnZhciBzd2VldEFsZXJ0LCBzd2FsO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBzd2VldEFsZXJ0ID0gc3dhbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGN1c3RvbWl6YXRpb25zID0gYXJndW1lbnRzWzBdO1xuXG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5hZGRDbGFzcykoZG9jdW1lbnQuYm9keSwgJ3N0b3Atc2Nyb2xsaW5nJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZVN3YWxEb20ucmVzZXRJbnB1dCkoKTtcblxuICAvKlxuICAgKiBVc2UgYXJndW1lbnQgaWYgZGVmaW5lZCBvciBkZWZhdWx0IHZhbHVlIGZyb20gcGFyYW1zIG9iamVjdCBvdGhlcndpc2UuXG4gICAqIFN1cHBvcnRzIHRoZSBjYXNlIHdoZXJlIGEgZGVmYXVsdCB2YWx1ZSBpcyBib29sZWFuIHRydWUgYW5kIHNob3VsZCBiZVxuICAgKiBvdmVycmlkZGVuIGJ5IGEgY29ycmVzcG9uZGluZyBleHBsaWNpdCBhcmd1bWVudCB3aGljaCBpcyBib29sZWFuIGZhbHNlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJndW1lbnRPckRlZmF1bHQoa2V5KSB7XG4gICAgdmFyIGFyZ3MgPSBjdXN0b21pemF0aW9ucztcbiAgICByZXR1cm4gYXJnc1trZXldID09PSB1bmRlZmluZWQgPyBfbW9kdWxlc0RlZmF1bHRQYXJhbXMyWydkZWZhdWx0J11ba2V5XSA6IGFyZ3Nba2V5XTtcbiAgfVxuXG4gIGlmIChjdXN0b21pemF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgKDAsIF9tb2R1bGVzVXRpbHMubG9nU3RyKSgnU3dlZXRBbGVydCBleHBlY3RzIGF0IGxlYXN0IDEgYXR0cmlidXRlIScpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSAoMCwgX21vZHVsZXNVdGlscy5leHRlbmQpKHt9LCBfbW9kdWxlc0RlZmF1bHRQYXJhbXMyWydkZWZhdWx0J10pO1xuXG4gIHN3aXRjaCAodHlwZW9mIGN1c3RvbWl6YXRpb25zKSB7XG5cbiAgICAvLyBFeDogc3dhbChcIkhlbGxvXCIsIFwiSnVzdCB0ZXN0aW5nXCIsIFwiaW5mb1wiKTtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcGFyYW1zLnRpdGxlID0gY3VzdG9taXphdGlvbnM7XG4gICAgICBwYXJhbXMudGV4dCA9IGFyZ3VtZW50c1sxXSB8fCAnJztcbiAgICAgIHBhcmFtcy50eXBlID0gYXJndW1lbnRzWzJdIHx8ICcnO1xuICAgICAgYnJlYWs7XG5cbiAgICAvLyBFeDogc3dhbCh7IHRpdGxlOlwiSGVsbG9cIiwgdGV4dDogXCJKdXN0IHRlc3RpbmdcIiwgdHlwZTogXCJpbmZvXCIgfSk7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChjdXN0b21pemF0aW9ucy50aXRsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICgwLCBfbW9kdWxlc1V0aWxzLmxvZ1N0cikoJ01pc3NpbmcgXCJ0aXRsZVwiIGFyZ3VtZW50IScpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHBhcmFtcy50aXRsZSA9IGN1c3RvbWl6YXRpb25zLnRpdGxlO1xuXG4gICAgICBmb3IgKHZhciBjdXN0b21OYW1lIGluIF9tb2R1bGVzRGVmYXVsdFBhcmFtczJbJ2RlZmF1bHQnXSkge1xuICAgICAgICBwYXJhbXNbY3VzdG9tTmFtZV0gPSBhcmd1bWVudE9yRGVmYXVsdChjdXN0b21OYW1lKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2hvdyBcIkNvbmZpcm1cIiBpbnN0ZWFkIG9mIFwiT0tcIiBpZiBjYW5jZWwgYnV0dG9uIGlzIHZpc2libGVcbiAgICAgIHBhcmFtcy5jb25maXJtQnV0dG9uVGV4dCA9IHBhcmFtcy5zaG93Q2FuY2VsQnV0dG9uID8gJ0NvbmZpcm0nIDogX21vZHVsZXNEZWZhdWx0UGFyYW1zMlsnZGVmYXVsdCddLmNvbmZpcm1CdXR0b25UZXh0O1xuICAgICAgcGFyYW1zLmNvbmZpcm1CdXR0b25UZXh0ID0gYXJndW1lbnRPckRlZmF1bHQoJ2NvbmZpcm1CdXR0b25UZXh0Jyk7XG5cbiAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gY2xpY2tpbmcgb24gXCJPS1wiL1wiQ2FuY2VsXCJcbiAgICAgIHBhcmFtcy5kb25lRnVuY3Rpb24gPSBhcmd1bWVudHNbMV0gfHwgbnVsbDtcblxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgKDAsIF9tb2R1bGVzVXRpbHMubG9nU3RyKSgnVW5leHBlY3RlZCB0eXBlIG9mIGFyZ3VtZW50ISBFeHBlY3RlZCBcInN0cmluZ1wiIG9yIFwib2JqZWN0XCIsIGdvdCAnICsgdHlwZW9mIGN1c3RvbWl6YXRpb25zKTtcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICB9XG5cbiAgKDAsIF9tb2R1bGVzU2V0UGFyYW1zMlsnZGVmYXVsdCddKShwYXJhbXMpO1xuICAoMCwgX21vZHVsZXNIYW5kbGVTd2FsRG9tLmZpeFZlcnRpY2FsUG9zaXRpb24pKCk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZVN3YWxEb20ub3Blbk1vZGFsKShhcmd1bWVudHNbMV0pO1xuXG4gIC8vIE1vZGFsIGludGVyYWN0aW9uc1xuICB2YXIgbW9kYWwgPSAoMCwgX21vZHVsZXNIYW5kbGVTd2FsRG9tLmdldE1vZGFsKSgpO1xuXG4gIC8qXG4gICAqIE1ha2Ugc3VyZSBhbGwgbW9kYWwgYnV0dG9ucyByZXNwb25kIHRvIGFsbCBldmVudHNcbiAgICovXG4gIHZhciAkYnV0dG9ucyA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpO1xuICB2YXIgYnV0dG9uRXZlbnRzID0gWydvbmNsaWNrJywgJ29ubW91c2VvdmVyJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZXVwJywgJ29uZm9jdXMnXTtcbiAgdmFyIG9uQnV0dG9uRXZlbnQgPSBmdW5jdGlvbiBvbkJ1dHRvbkV2ZW50KGUpIHtcbiAgICByZXR1cm4gKDAsIF9tb2R1bGVzSGFuZGxlQ2xpY2suaGFuZGxlQnV0dG9uKShlLCBwYXJhbXMsIG1vZGFsKTtcbiAgfTtcblxuICBmb3IgKHZhciBidG5JbmRleCA9IDA7IGJ0bkluZGV4IDwgJGJ1dHRvbnMubGVuZ3RoOyBidG5JbmRleCsrKSB7XG4gICAgZm9yICh2YXIgZXZ0SW5kZXggPSAwOyBldnRJbmRleCA8IGJ1dHRvbkV2ZW50cy5sZW5ndGg7IGV2dEluZGV4KyspIHtcbiAgICAgIHZhciBidG5FdnQgPSBidXR0b25FdmVudHNbZXZ0SW5kZXhdO1xuICAgICAgJGJ1dHRvbnNbYnRuSW5kZXhdW2J0bkV2dF0gPSBvbkJ1dHRvbkV2ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8vIENsaWNraW5nIG91dHNpZGUgdGhlIG1vZGFsIGRpc21pc3NlcyBpdCAoaWYgYWxsb3dlZCBieSB1c2VyKVxuICAoMCwgX21vZHVsZXNIYW5kbGVTd2FsRG9tLmdldE92ZXJsYXkpKCkub25jbGljayA9IG9uQnV0dG9uRXZlbnQ7XG5cbiAgcHJldmlvdXNXaW5kb3dLZXlEb3duID0gd2luZG93Lm9ua2V5ZG93bjtcblxuICB2YXIgb25LZXlFdmVudCA9IGZ1bmN0aW9uIG9uS2V5RXZlbnQoZSkge1xuICAgIHJldHVybiAoMCwgX21vZHVsZXNIYW5kbGVLZXkyWydkZWZhdWx0J10pKGUsIHBhcmFtcywgbW9kYWwpO1xuICB9O1xuICB3aW5kb3cub25rZXlkb3duID0gb25LZXlFdmVudDtcblxuICB3aW5kb3cub25mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBXaGVuIHRoZSB1c2VyIGhhcyBmb2N1c2VkIGF3YXkgYW5kIGZvY3VzZWQgYmFjayBmcm9tIHRoZSB3aG9sZSB3aW5kb3cuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBQdXQgaW4gYSB0aW1lb3V0IHRvIGp1bXAgb3V0IG9mIHRoZSBldmVudCBzZXF1ZW5jZS5cbiAgICAgIC8vIENhbGxpbmcgZm9jdXMoKSBpbiB0aGUgZXZlbnQgc2VxdWVuY2UgY29uZnVzZXMgdGhpbmdzLlxuICAgICAgaWYgKGxhc3RGb2N1c2VkQnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGFzdEZvY3VzZWRCdXR0b24uZm9jdXMoKTtcbiAgICAgICAgbGFzdEZvY3VzZWRCdXR0b24gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgLy8gU2hvdyBhbGVydCB3aXRoIGVuYWJsZWQgYnV0dG9ucyBhbHdheXNcbiAgc3dhbC5lbmFibGVCdXR0b25zKCk7XG59O1xuXG4vKlxuICogU2V0IGRlZmF1bHQgcGFyYW1zIGZvciBlYWNoIHBvcHVwXG4gKiBAcGFyYW0ge09iamVjdH0gdXNlclBhcmFtc1xuICovXG5zd2VldEFsZXJ0LnNldERlZmF1bHRzID0gc3dhbC5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uICh1c2VyUGFyYW1zKSB7XG4gIGlmICghdXNlclBhcmFtcykge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlclBhcmFtcyBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGlmICh0eXBlb2YgdXNlclBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZXJQYXJhbXMgaGFzIHRvIGJlIGEgb2JqZWN0Jyk7XG4gIH1cblxuICAoMCwgX21vZHVsZXNVdGlscy5leHRlbmQpKF9tb2R1bGVzRGVmYXVsdFBhcmFtczJbJ2RlZmF1bHQnXSwgdXNlclBhcmFtcyk7XG59O1xuXG4vKlxuICogQW5pbWF0aW9uIHdoZW4gY2xvc2luZyBtb2RhbFxuICovXG5zd2VldEFsZXJ0LmNsb3NlID0gc3dhbC5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1vZGFsID0gKDAsIF9tb2R1bGVzSGFuZGxlU3dhbERvbS5nZXRNb2RhbCkoKTtcblxuICAoMCwgX21vZHVsZXNIYW5kbGVEb20uZmFkZU91dCkoKDAsIF9tb2R1bGVzSGFuZGxlU3dhbERvbS5nZXRPdmVybGF5KSgpLCA1KTtcbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLmZhZGVPdXQpKG1vZGFsLCA1KTtcbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLnJlbW92ZUNsYXNzKShtb2RhbCwgJ3Nob3dTd2VldEFsZXJ0Jyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5hZGRDbGFzcykobW9kYWwsICdoaWRlU3dlZXRBbGVydCcpO1xuICAoMCwgX21vZHVsZXNIYW5kbGVEb20ucmVtb3ZlQ2xhc3MpKG1vZGFsLCAndmlzaWJsZScpO1xuXG4gIC8qXG4gICAqIFJlc2V0IGljb24gYW5pbWF0aW9uc1xuICAgKi9cbiAgdmFyICRzdWNjZXNzSWNvbiA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5zYS1pY29uLnNhLXN1Y2Nlc3MnKTtcbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLnJlbW92ZUNsYXNzKSgkc3VjY2Vzc0ljb24sICdhbmltYXRlJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5yZW1vdmVDbGFzcykoJHN1Y2Nlc3NJY29uLnF1ZXJ5U2VsZWN0b3IoJy5zYS10aXAnKSwgJ2FuaW1hdGVTdWNjZXNzVGlwJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5yZW1vdmVDbGFzcykoJHN1Y2Nlc3NJY29uLnF1ZXJ5U2VsZWN0b3IoJy5zYS1sb25nJyksICdhbmltYXRlU3VjY2Vzc0xvbmcnKTtcblxuICB2YXIgJGVycm9ySWNvbiA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5zYS1pY29uLnNhLWVycm9yJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5yZW1vdmVDbGFzcykoJGVycm9ySWNvbiwgJ2FuaW1hdGVFcnJvckljb24nKTtcbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLnJlbW92ZUNsYXNzKSgkZXJyb3JJY29uLnF1ZXJ5U2VsZWN0b3IoJy5zYS14LW1hcmsnKSwgJ2FuaW1hdGVYTWFyaycpO1xuXG4gIHZhciAkd2FybmluZ0ljb24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuc2EtaWNvbi5zYS13YXJuaW5nJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5yZW1vdmVDbGFzcykoJHdhcm5pbmdJY29uLCAncHVsc2VXYXJuaW5nJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5yZW1vdmVDbGFzcykoJHdhcm5pbmdJY29uLnF1ZXJ5U2VsZWN0b3IoJy5zYS1ib2R5JyksICdwdWxzZVdhcm5pbmdJbnMnKTtcbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLnJlbW92ZUNsYXNzKSgkd2FybmluZ0ljb24ucXVlcnlTZWxlY3RvcignLnNhLWRvdCcpLCAncHVsc2VXYXJuaW5nSW5zJyk7XG5cbiAgLy8gUmVzZXQgY3VzdG9tIGNsYXNzIChkZWxheSBzbyB0aGF0IFVJIGNoYW5nZXMgYXJlbid0IHZpc2libGUpXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXN0b21DbGFzcyA9IG1vZGFsLmdldEF0dHJpYnV0ZSgnZGF0YS1jdXN0b20tY2xhc3MnKTtcbiAgICAoMCwgX21vZHVsZXNIYW5kbGVEb20ucmVtb3ZlQ2xhc3MpKG1vZGFsLCBjdXN0b21DbGFzcyk7XG4gIH0sIDMwMCk7XG5cbiAgLy8gTWFrZSBwYWdlIHNjcm9sbGFibGUgYWdhaW5cbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLnJlbW92ZUNsYXNzKShkb2N1bWVudC5ib2R5LCAnc3RvcC1zY3JvbGxpbmcnKTtcblxuICAvLyBSZXNldCB0aGUgcGFnZSB0byBpdHMgcHJldmlvdXMgc3RhdGVcbiAgd2luZG93Lm9ua2V5ZG93biA9IHByZXZpb3VzV2luZG93S2V5RG93bjtcbiAgaWYgKHdpbmRvdy5wcmV2aW91c0FjdGl2ZUVsZW1lbnQpIHtcbiAgICB3aW5kb3cucHJldmlvdXNBY3RpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cbiAgbGFzdEZvY3VzZWRCdXR0b24gPSB1bmRlZmluZWQ7XG4gIGNsZWFyVGltZW91dChtb2RhbC50aW1lb3V0KTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qXG4gKiBWYWxpZGF0aW9uIG9mIHRoZSBpbnB1dCBmaWVsZCBpcyBkb25lIGJ5IHVzZXJcbiAqIElmIHNvbWV0aGluZyBpcyB3cm9uZyA9PiBjYWxsIHNob3dJbnB1dEVycm9yIHdpdGggZXJyb3JNZXNzYWdlXG4gKi9cbnN3ZWV0QWxlcnQuc2hvd0lucHV0RXJyb3IgPSBzd2FsLnNob3dJbnB1dEVycm9yID0gZnVuY3Rpb24gKGVycm9yTWVzc2FnZSkge1xuICB2YXIgbW9kYWwgPSAoMCwgX21vZHVsZXNIYW5kbGVTd2FsRG9tLmdldE1vZGFsKSgpO1xuXG4gIHZhciAkZXJyb3JJY29uID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnNhLWlucHV0LWVycm9yJyk7XG4gICgwLCBfbW9kdWxlc0hhbmRsZURvbS5hZGRDbGFzcykoJGVycm9ySWNvbiwgJ3Nob3cnKTtcblxuICB2YXIgJGVycm9yQ29udGFpbmVyID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnNhLWVycm9yLWNvbnRhaW5lcicpO1xuICAoMCwgX21vZHVsZXNIYW5kbGVEb20uYWRkQ2xhc3MpKCRlcnJvckNvbnRhaW5lciwgJ3Nob3cnKTtcblxuICAkZXJyb3JDb250YWluZXIucXVlcnlTZWxlY3RvcigncCcpLmlubmVySFRNTCA9IGVycm9yTWVzc2FnZTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBzd2VldEFsZXJ0LmVuYWJsZUJ1dHRvbnMoKTtcbiAgfSwgMSk7XG5cbiAgbW9kYWwucXVlcnlTZWxlY3RvcignaW5wdXQnKS5mb2N1cygpO1xufTtcblxuLypcbiAqIFJlc2V0IGlucHV0IGVycm9yIERPTSBlbGVtZW50c1xuICovXG5zd2VldEFsZXJ0LnJlc2V0SW5wdXRFcnJvciA9IHN3YWwucmVzZXRJbnB1dEVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIC8vIElmIHByZXNzIGVudGVyID0+IGlnbm9yZVxuICBpZiAoZXZlbnQgJiYgZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgJG1vZGFsID0gKDAsIF9tb2R1bGVzSGFuZGxlU3dhbERvbS5nZXRNb2RhbCkoKTtcblxuICB2YXIgJGVycm9ySWNvbiA9ICRtb2RhbC5xdWVyeVNlbGVjdG9yKCcuc2EtaW5wdXQtZXJyb3InKTtcbiAgKDAsIF9tb2R1bGVzSGFuZGxlRG9tLnJlbW92ZUNsYXNzKSgkZXJyb3JJY29uLCAnc2hvdycpO1xuXG4gIHZhciAkZXJyb3JDb250YWluZXIgPSAkbW9kYWwucXVlcnlTZWxlY3RvcignLnNhLWVycm9yLWNvbnRhaW5lcicpO1xuICAoMCwgX21vZHVsZXNIYW5kbGVEb20ucmVtb3ZlQ2xhc3MpKCRlcnJvckNvbnRhaW5lciwgJ3Nob3cnKTtcbn07XG5cbi8qXG4gKiBEaXNhYmxlIGNvbmZpcm0gYW5kIGNhbmNlbCBidXR0b25zXG4gKi9cbnN3ZWV0QWxlcnQuZGlzYWJsZUJ1dHRvbnMgPSBzd2FsLmRpc2FibGVCdXR0b25zID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciBtb2RhbCA9ICgwLCBfbW9kdWxlc0hhbmRsZVN3YWxEb20uZ2V0TW9kYWwpKCk7XG4gIHZhciAkY29uZmlybUJ1dHRvbiA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5jb25maXJtJyk7XG4gIHZhciAkY2FuY2VsQnV0dG9uID0gbW9kYWwucXVlcnlTZWxlY3RvcignYnV0dG9uLmNhbmNlbCcpO1xuICAkY29uZmlybUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICRjYW5jZWxCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xufTtcblxuLypcbiAqIEVuYWJsZSBjb25maXJtIGFuZCBjYW5jZWwgYnV0dG9uc1xuICovXG5zd2VldEFsZXJ0LmVuYWJsZUJ1dHRvbnMgPSBzd2FsLmVuYWJsZUJ1dHRvbnMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgdmFyIG1vZGFsID0gKDAsIF9tb2R1bGVzSGFuZGxlU3dhbERvbS5nZXRNb2RhbCkoKTtcbiAgdmFyICRjb25maXJtQnV0dG9uID0gbW9kYWwucXVlcnlTZWxlY3RvcignYnV0dG9uLmNvbmZpcm0nKTtcbiAgdmFyICRjYW5jZWxCdXR0b24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCdidXR0b24uY2FuY2VsJyk7XG4gICRjb25maXJtQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICRjYW5jZWxCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbn07XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAvLyBUaGUgJ2hhbmRsZS1jbGljaycgbW9kdWxlIHJlcXVpcmVzXG4gIC8vIHRoYXQgJ3N3ZWV0QWxlcnQnIHdhcyBzZXQgYXMgZ2xvYmFsLlxuICB3aW5kb3cuc3dlZXRBbGVydCA9IHdpbmRvdy5zd2FsID0gc3dlZXRBbGVydDtcbn0gZWxzZSB7XG4gICgwLCBfbW9kdWxlc1V0aWxzLmxvZ1N0cikoJ1N3ZWV0QWxlcnQgaXMgYSBmcm9udGVuZCBtb2R1bGUhJyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOURiMlJsTDNOM1pXVjBZV3hsY25RdlpHVjJMM04zWldWMFlXeGxjblF1WlhNMkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3p0blEwRm5RazhzYzBKQlFYTkNPenM3T3pzN05FSkJWM1JDTEdsQ1FVRnBRanM3T3pzN08yOURRV05xUWl3eVFrRkJNa0k3T3pzN2EwTkJTWGRDTEhkQ1FVRjNRanM3WjBOQlEzaEVMSE5DUVVGelFqczdPenM3TzI5RFFVbDBRaXd3UWtGQk1FSTdPenM3WjBOQlF6RkNMSE5DUVVGelFqczdPenM3T3pzN1FVRk5hRVFzU1VGQlNTeHhRa0ZCY1VJc1EwRkJRenRCUVVNeFFpeEpRVUZKTEdsQ1FVRnBRaXhEUVVGRE96czdPenM3UVVGUGRFSXNTVUZCU1N4VlFVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRE96dHhRa0ZGVGl4VlFVRlZMRWRCUVVjc1NVRkJTU3hIUVVGSExGbEJRVmM3UVVGRE5VTXNUVUZCU1N4alFVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVnNReXhyUTBGQlV5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZETVVNc2VVTkJRVmtzUTBGQlF6czdPenM3T3p0QlFVOWlMRmRCUVZNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUXpsQ0xGRkJRVWtzU1VGQlNTeEhRVUZITEdOQlFXTXNRMEZCUXp0QlFVTXhRaXhYUVVGUExFRkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRk5CUVZNc1IwRkJTeXhyUTBGQll5eEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UjBGRGNFVTdPMEZCUlVRc1RVRkJTU3hqUVVGakxFdEJRVXNzVTBGQlV5eEZRVUZGTzBGQlEyaERMRGhDUVVGUExEQkRRVUV3UXl4RFFVRkRMRU5CUVVNN1FVRkRia1FzVjBGQlR5eExRVUZMTEVOQlFVTTdSMEZEWkRzN1FVRkZSQ3hOUVVGSkxFMUJRVTBzUjBGQlJ5d3dRa0ZCVHl4RlFVRkZMRzlEUVVGblFpeERRVUZET3p0QlFVVjJReXhWUVVGUkxFOUJRVThzWTBGQll6czdPMEZCUnpOQ0xGTkJRVXNzVVVGQlVUdEJRVU5ZTEZsQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1kwRkJZeXhEUVVGRE8wRkJRemxDTEZsQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVrc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTnNReXhaUVVGTkxFTkJRVU1zU1VGQlNTeEhRVUZKTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03UVVGRGJFTXNXVUZCVFRzN1FVRkJRVHRCUVVkU0xGTkJRVXNzVVVGQlVUdEJRVU5ZTEZWQlFVa3NZMEZCWXl4RFFVRkRMRXRCUVVzc1MwRkJTeXhUUVVGVExFVkJRVVU3UVVGRGRFTXNhME5CUVU4c01rSkJRVEpDTEVOQlFVTXNRMEZCUXp0QlFVTndReXhsUVVGUExFdEJRVXNzUTBGQlF6dFBRVU5rT3p0QlFVVkVMRmxCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXpzN1FVRkZjRU1zVjBGQlN5eEpRVUZKTEZWQlFWVXNkVU5CUVcxQ08wRkJRM0JETEdOQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRQUVVOd1JEczdPMEZCUjBRc1dVRkJUU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4VFFVRlRMRWRCUVVjc2EwTkJRV01zYVVKQlFXbENMRU5CUVVNN1FVRkRha2NzV1VGQlRTeERRVUZETEdsQ1FVRnBRaXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdPenRCUVVkc1JTeFpRVUZOTEVOQlFVTXNXVUZCV1N4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTTdPMEZCUlRORExGbEJRVTA3TzBGQlFVRXNRVUZGVWp0QlFVTkZMR2REUVVGUExHdEZRVUZyUlN4SFFVRkhMRTlCUVU4c1kwRkJZeXhEUVVGRExFTkJRVU03UVVGRGJrY3NZVUZCVHl4TFFVRkxMRU5CUVVNN08wRkJRVUVzUjBGRmFFSTdPMEZCUlVRc2NVTkJRV01zVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEZEVJc2EwUkJRWEZDTEVOQlFVTTdRVUZEZEVJc2RVTkJRVlVzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN096dEJRVWQ0UWl4TlFVRkpMRXRCUVVzc1IwRkJSeXh4UTBGQlZTeERRVUZET3pzN096dEJRVTEyUWl4TlFVRkpMRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGFFUXNUVUZCU1N4WlFVRlpMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVVzWVVGQllTeEZRVUZGTEZsQlFWa3NSVUZCUlN4aFFVRmhMRVZCUVVVc1YwRkJWeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEyNUhMRTFCUVVrc1lVRkJZU3hIUVVGSExGTkJRV2hDTEdGQlFXRXNRMEZCU1N4RFFVRkRPMWRCUVVzc2MwTkJRV0VzUTBGQlF5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNN1IwRkJRU3hEUVVGRE96dEJRVVV4UkN4UFFVRkxMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU1zUlVGQlJTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzUlVGQlJUdEJRVU0zUkN4VFFVRkxMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU1zUlVGQlJTeFJRVUZSTEVkQlFVY3NXVUZCV1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzUlVGQlJUdEJRVU5xUlN4VlFVRkpMRTFCUVUwc1IwRkJSeXhaUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEY0VNc1kwRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMR0ZCUVdFc1EwRkJRenRMUVVNMVF6dEhRVU5HT3pzN1FVRkhSQ3g1UTBGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4aFFVRmhMRU5CUVVNN08wRkJSWEpETEhWQ1FVRnhRaXhIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTTdPMEZCUlhwRExFMUJRVWtzVlVGQlZTeEhRVUZITEZOQlFXSXNWVUZCVlN4RFFVRkpMRU5CUVVNN1YwRkJTeXh0UTBGQll5eERRVUZETEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJRenRIUVVGQkxFTkJRVU03UVVGRGVFUXNVVUZCVFN4RFFVRkRMRk5CUVZNc1IwRkJSeXhWUVVGVkxFTkJRVU03TzBGQlJUbENMRkZCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzV1VGQldUczdRVUZGTTBJc1kwRkJWU3hEUVVGRExGbEJRVms3T3p0QlFVZHlRaXhWUVVGSkxHbENRVUZwUWl4TFFVRkxMRk5CUVZNc1JVRkJSVHRCUVVOdVF5eDVRa0ZCYVVJc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU14UWl4NVFrRkJhVUlzUjBGQlJ5eFRRVUZUTEVOQlFVTTdUMEZETDBJN1MwRkRSaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBkQlExQXNRMEZCUXpzN08wRkJSMFlzVFVGQlNTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRPME5CUTNSQ096czdPenM3UVVGUlJDeFZRVUZWTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVlVGQlV5eFZRVUZWTEVWQlFVVTdRVUZETDBRc1RVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJUdEJRVU5tTEZWQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNRMEZCUXp0SFFVTXpRenRCUVVORUxFMUJRVWtzVDBGQlR5eFZRVUZWTEV0QlFVc3NVVUZCVVN4RlFVRkZPMEZCUTJ4RExGVkJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNLMEpCUVN0Q0xFTkJRVU1zUTBGQlF6dEhRVU5zUkRzN1FVRkZSQ3dyUkVGQmMwSXNWVUZCVlN4RFFVRkRMRU5CUVVNN1EwRkRia01zUTBGQlF6czdPenM3UVVGTlJpeFZRVUZWTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzV1VGQlZ6dEJRVU42UXl4TlFVRkpMRXRCUVVzc1IwRkJSeXh4UTBGQlZTeERRVUZET3p0QlFVVjJRaXhwUTBGQlVTeDFRMEZCV1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM3BDTEdsRFFVRlJMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5zUWl4eFEwRkJXU3hMUVVGTExFVkJRVVVzWjBKQlFXZENMRU5CUVVNc1EwRkJRenRCUVVOeVF5eHJRMEZCVXl4TFFVRkxMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0QlFVTnNReXh4UTBGQldTeExRVUZMTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN096czdPMEZCU3psQ0xFMUJRVWtzV1VGQldTeEhRVUZITEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0QlFVTTVSQ3h4UTBGQldTeFpRVUZaTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRja01zY1VOQlFWa3NXVUZCV1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8wRkJRM2hGTEhGRFFVRlpMRmxCUVZrc1EwRkJReXhoUVVGaExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF6czdRVUZGTVVVc1RVRkJTU3hWUVVGVkxFZEJRVWNzUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzBGQlF6RkVMSEZEUVVGWkxGVkJRVlVzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRelZETEhGRFFVRlpMRlZCUVZVc1EwRkJReXhoUVVGaExFTkJRVU1zV1VGQldTeERRVUZETEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVNN08wRkJSWEJGTEUxQlFVa3NXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRCUVVNNVJDeHhRMEZCV1N4WlFVRlpMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03UVVGRE1VTXNjVU5CUVZrc1dVRkJXU3hEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eERRVUZETzBGQlEzWkZMSEZEUVVGWkxGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXpzN08wRkJSM1JGTEZsQlFWVXNRMEZCUXl4WlFVRlhPMEZCUTNCQ0xGRkJRVWtzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3gxUTBGQldTeExRVUZMTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1IwRkRha01zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXpzN08wRkJSMUlzY1VOQlFWa3NVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRPenM3UVVGSE4wTXNVVUZCVFN4RFFVRkRMRk5CUVZNc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXp0QlFVTjZReXhOUVVGSkxFMUJRVTBzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRCUVVOb1F5eFZRVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdSMEZEZEVNN1FVRkRSQ3h0UWtGQmFVSXNSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkRPVUlzWTBGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRk5VSXNVMEZCVHl4SlFVRkpMRU5CUVVNN1EwRkRZaXhEUVVGRE96czdPenM3UVVGUFJpeFZRVUZWTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzVlVGQlV5eFpRVUZaTEVWQlFVVTdRVUZEZGtVc1RVRkJTU3hMUVVGTExFZEJRVWNzY1VOQlFWVXNRMEZCUXpzN1FVRkZka0lzVFVGQlNTeFZRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMEZCUTNoRUxHdERRVUZUTEZWQlFWVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenM3UVVGRk4wSXNUVUZCU1N4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8wRkJRMnBGTEd0RFFVRlRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6czdRVUZGYkVNc2FVSkJRV1VzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1UwRkJVeXhIUVVGSExGbEJRVmtzUTBGQlF6czdRVUZGTlVRc1dVRkJWU3hEUVVGRExGbEJRVmM3UVVGRGNFSXNZMEZCVlN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRE8wZEJRelZDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVTRzVDBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dERRVU4wUXl4RFFVRkRPenM3T3p0QlFVMUdMRlZCUVZVc1EwRkJReXhsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4VlFVRlRMRXRCUVVzc1JVRkJSVHM3UVVGRmJFVXNUVUZCU1N4TFFVRkxMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTEVWQlFVVTdRVUZEYWtNc1YwRkJUeXhMUVVGTExFTkJRVU03UjBGRFpEczdRVUZGUkN4TlFVRkpMRTFCUVUwc1IwRkJSeXh4UTBGQlZTeERRVUZET3p0QlFVVjRRaXhOUVVGSkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZEZWtRc2NVTkJRVmtzVlVGQlZTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPenRCUVVWb1F5eE5RVUZKTEdWQlFXVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNN1FVRkRiRVVzY1VOQlFWa3NaVUZCWlN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wTkJRM1JETEVOQlFVTTdPenM3TzBGQlMwWXNWVUZCVlN4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUTJoRkxFMUJRVWtzUzBGQlN5eEhRVUZITEhGRFFVRlZMRU5CUVVNN1FVRkRka0lzVFVGQlNTeGpRVUZqTEVkQlFVY3NTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMEZCUXpORUxFMUJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03UVVGRGVrUXNaMEpCUVdNc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlF5OUNMR1ZCUVdFc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETzBOQlF5OUNMRU5CUVVNN096czdPMEZCUzBZc1ZVRkJWU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRlZCUVZNc1MwRkJTeXhGUVVGRk8wRkJRemxFTEUxQlFVa3NTMEZCU3l4SFFVRkhMSEZEUVVGVkxFTkJRVU03UVVGRGRrSXNUVUZCU1N4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wRkJRek5FTEUxQlFVa3NZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdRVUZEZWtRc1owSkJRV01zUTBGQlF5eFJRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTJoRExHVkJRV0VzUTBGQlF5eFJRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRPME5CUTJoRExFTkJRVU03TzBGQlJVWXNTVUZCU1N4UFFVRlBMRTFCUVUwc1MwRkJTeXhYUVVGWExFVkJRVVU3T3p0QlFVZHFReXhSUVVGTkxFTkJRVU1zVlVGQlZTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wTkJRemxETEUxQlFVMDdRVUZEVEN3MFFrRkJUeXhyUTBGQmEwTXNRMEZCUXl4RFFVRkRPME5CUXpWRElpd2labWxzWlNJNklpOURiMlJsTDNOM1pXVjBZV3hsY25RdlpHVjJMM04zWldWMFlXeGxjblF1WlhNMkxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z1UzZGxaWFJCYkdWeWRGeHVMeThnTWpBeE5DMHlNREUxSUNoaktTQXRJRlJ5YVhOMFlXNGdSV1IzWVhKa2MxeHVMeThnWjJsMGFIVmlMbU52YlM5ME5IUTFMM04zWldWMFlXeGxjblJjYmx4dUx5cGNiaUFxSUdwUmRXVnllUzFzYVd0bElHWjFibU4wYVc5dWN5Qm1iM0lnYldGdWFYQjFiR0YwYVc1bklIUm9aU0JFVDAxY2JpQXFMMXh1YVcxd2IzSjBJSHRjYmlBZ2FHRnpRMnhoYzNNc0lHRmtaRU5zWVhOekxDQnlaVzF2ZG1WRGJHRnpjeXhjYmlBZ1pYTmpZWEJsU0hSdGJDeGNiaUFnWDNOb2IzY3NJSE5vYjNjc0lGOW9hV1JsTENCb2FXUmxMRnh1SUNCcGMwUmxjMk5sYm1SaGJuUXNYRzRnSUdkbGRGUnZjRTFoY21kcGJpeGNiaUFnWm1Ga1pVbHVMQ0JtWVdSbFQzVjBMRnh1SUNCbWFYSmxRMnhwWTJzc1hHNGdJSE4wYjNCRmRtVnVkRkJ5YjNCaFoyRjBhVzl1WEc1OUlHWnliMjBnSnk0dmJXOWtkV3hsY3k5b1lXNWtiR1V0Wkc5dEp6dGNibHh1THlwY2JpQXFJRWhoYm1SNUlIVjBhV3hwZEdsbGMxeHVJQ292WEc1cGJYQnZjblFnZTF4dUlDQmxlSFJsYm1Rc1hHNGdJR2hsZUZSdlVtZGlMRnh1SUNCcGMwbEZPQ3hjYmlBZ2JHOW5VM1J5TEZ4dUlDQmpiMnh2Y2t4MWJXbHVZVzVqWlZ4dWZTQm1jbTl0SUNjdUwyMXZaSFZzWlhNdmRYUnBiSE1uTzF4dVhHNHZLbHh1SUNvZ0lFaGhibVJzWlNCemQyVmxkRUZzWlhKMEozTWdSRTlOSUdWc1pXMWxiblJ6WEc0Z0tpOWNibWx0Y0c5eWRDQjdYRzRnSUhOM1pXVjBRV3hsY25SSmJtbDBhV0ZzYVhwbExGeHVJQ0JuWlhSTmIyUmhiQ3hjYmlBZ1oyVjBUM1psY214aGVTeGNiaUFnWjJWMFNXNXdkWFFzWEc0Z0lITmxkRVp2WTNWelUzUjViR1VzWEc0Z0lHOXdaVzVOYjJSaGJDeGNiaUFnY21WelpYUkpibkIxZEN4Y2JpQWdabWw0Vm1WeWRHbGpZV3hRYjNOcGRHbHZibHh1ZlNCbWNtOXRJQ2N1TDIxdlpIVnNaWE12YUdGdVpHeGxMWE4zWVd3dFpHOXRKenRjYmx4dVhHNHZMeUJJWVc1a2JHVWdZblYwZEc5dUlHVjJaVzUwY3lCaGJtUWdhMlY1WW05aGNtUWdaWFpsYm5SelhHNXBiWEJ2Y25RZ2V5Qm9ZVzVrYkdWQ2RYUjBiMjRzSUdoaGJtUnNaVU52Ym1acGNtMHNJR2hoYm1Sc1pVTmhibU5sYkNCOUlHWnliMjBnSnk0dmJXOWtkV3hsY3k5b1lXNWtiR1V0WTJ4cFkyc25PMXh1YVcxd2IzSjBJR2hoYm1Sc1pVdGxlVVJ2ZDI0Z1puSnZiU0FuTGk5dGIyUjFiR1Z6TDJoaGJtUnNaUzFyWlhrbk8xeHVYRzVjYmk4dklFUmxabUYxYkhRZ2RtRnNkV1Z6WEc1cGJYQnZjblFnWkdWbVlYVnNkRkJoY21GdGN5Qm1jbTl0SUNjdUwyMXZaSFZzWlhNdlpHVm1ZWFZzZEMxd1lYSmhiWE1uTzF4dWFXMXdiM0owSUhObGRGQmhjbUZ0WlhSbGNuTWdabkp2YlNBbkxpOXRiMlIxYkdWekwzTmxkQzF3WVhKaGJYTW5PMXh1WEc0dktseHVJQ29nVW1WdFpXMWlaWElnYzNSaGRHVWdhVzRnWTJGelpYTWdkMmhsY21VZ2IzQmxibWx1WnlCaGJtUWdhR0Z1Wkd4cGJtY2dZU0J0YjJSaGJDQjNhV3hzSUdacFpHUnNaU0IzYVhSb0lHbDBMbHh1SUNvZ0tGZGxJR0ZzYzI4Z2RYTmxJSGRwYm1SdmR5NXdjbVYyYVc5MWMwRmpkR2wyWlVWc1pXMWxiblFnWVhNZ1lTQm5iRzlpWVd3Z2RtRnlhV0ZpYkdVcFhHNGdLaTljYm5aaGNpQndjbVYyYVc5MWMxZHBibVJ2ZDB0bGVVUnZkMjQ3WEc1MllYSWdiR0Z6ZEVadlkzVnpaV1JDZFhSMGIyNDdYRzVjYmx4dUx5cGNiaUFxSUVkc2IySmhiQ0J6ZDJWbGRFRnNaWEowSUdaMWJtTjBhVzl1WEc0Z0tpQW9kR2hwY3lCcGN5QjNhR0YwSUhSb1pTQjFjMlZ5SUdOaGJHeHpLVnh1SUNvdlhHNTJZWElnYzNkbFpYUkJiR1Z5ZEN3Z2MzZGhiRHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnYzNkbFpYUkJiR1Z5ZENBOUlITjNZV3dnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnZG1GeUlHTjFjM1J2YldsNllYUnBiMjV6SUQwZ1lYSm5kVzFsYm5Seld6QmRPMXh1WEc0Z0lHRmtaRU5zWVhOektHUnZZM1Z0Wlc1MExtSnZaSGtzSUNkemRHOXdMWE5qY205c2JHbHVaeWNwTzF4dUlDQnlaWE5sZEVsdWNIVjBLQ2s3WEc1Y2JpQWdMeXBjYmlBZ0lDb2dWWE5sSUdGeVozVnRaVzUwSUdsbUlHUmxabWx1WldRZ2IzSWdaR1ZtWVhWc2RDQjJZV3gxWlNCbWNtOXRJSEJoY21GdGN5QnZZbXBsWTNRZ2IzUm9aWEozYVhObExseHVJQ0FnS2lCVGRYQndiM0owY3lCMGFHVWdZMkZ6WlNCM2FHVnlaU0JoSUdSbFptRjFiSFFnZG1Gc2RXVWdhWE1nWW05dmJHVmhiaUIwY25WbElHRnVaQ0J6YUc5MWJHUWdZbVZjYmlBZ0lDb2diM1psY25KcFpHUmxiaUJpZVNCaElHTnZjbkpsYzNCdmJtUnBibWNnWlhod2JHbGphWFFnWVhKbmRXMWxiblFnZDJocFkyZ2dhWE1nWW05dmJHVmhiaUJtWVd4elpTNWNiaUFnSUNvdlhHNGdJR1oxYm1OMGFXOXVJR0Z5WjNWdFpXNTBUM0pFWldaaGRXeDBLR3RsZVNrZ2UxeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ1kzVnpkRzl0YVhwaGRHbHZibk03WEc0Z0lDQWdjbVYwZFhKdUlDaGhjbWR6VzJ0bGVWMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ1B5QWdaR1ZtWVhWc2RGQmhjbUZ0YzF0clpYbGRJRG9nWVhKbmMxdHJaWGxkTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR04xYzNSdmJXbDZZWFJwYjI1eklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0JzYjJkVGRISW9KMU4zWldWMFFXeGxjblFnWlhod1pXTjBjeUJoZENCc1pXRnpkQ0F4SUdGMGRISnBZblYwWlNFbktUdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0IyWVhJZ2NHRnlZVzF6SUQwZ1pYaDBaVzVrS0h0OUxDQmtaV1poZFd4MFVHRnlZVzF6S1R0Y2JseHVJQ0J6ZDJsMFkyZ2dLSFI1Y0dWdlppQmpkWE4wYjIxcGVtRjBhVzl1Y3lrZ2UxeHVYRzRnSUNBZ0x5OGdSWGc2SUhOM1lXd29YQ0pJWld4c2Ixd2lMQ0JjSWtwMWMzUWdkR1Z6ZEdsdVoxd2lMQ0JjSW1sdVptOWNJaWs3WEc0Z0lDQWdZMkZ6WlNBbmMzUnlhVzVuSnpwY2JpQWdJQ0FnSUhCaGNtRnRjeTUwYVhSc1pTQTlJR04xYzNSdmJXbDZZWFJwYjI1ek8xeHVJQ0FnSUNBZ2NHRnlZVzF6TG5SbGVIUWdJRDBnWVhKbmRXMWxiblJ6V3pGZElIeDhJQ2NuTzF4dUlDQWdJQ0FnY0dGeVlXMXpMblI1Y0dVZ0lEMGdZWEpuZFcxbGJuUnpXekpkSUh4OElDY25PMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBdkx5QkZlRG9nYzNkaGJDaDdJSFJwZEd4bE9sd2lTR1ZzYkc5Y0lpd2dkR1Y0ZERvZ1hDSktkWE4wSUhSbGMzUnBibWRjSWl3Z2RIbHdaVG9nWENKcGJtWnZYQ0lnZlNrN1hHNGdJQ0FnWTJGelpTQW5iMkpxWldOMEp6cGNiaUFnSUNBZ0lHbG1JQ2hqZFhOMGIyMXBlbUYwYVc5dWN5NTBhWFJzWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUd4dloxTjBjaWduVFdsemMybHVaeUJjSW5ScGRHeGxYQ0lnWVhKbmRXMWxiblFoSnlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY0dGeVlXMXpMblJwZEd4bElEMGdZM1Z6ZEc5dGFYcGhkR2x2Ym5NdWRHbDBiR1U3WEc1Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdOMWMzUnZiVTVoYldVZ2FXNGdaR1ZtWVhWc2RGQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQndZWEpoYlhOYlkzVnpkRzl0VG1GdFpWMGdQU0JoY21kMWJXVnVkRTl5UkdWbVlYVnNkQ2hqZFhOMGIyMU9ZVzFsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdVMmh2ZHlCY0lrTnZibVpwY20xY0lpQnBibk4wWldGa0lHOW1JRndpVDB0Y0lpQnBaaUJqWVc1alpXd2dZblYwZEc5dUlHbHpJSFpwYzJsaWJHVmNiaUFnSUNBZ0lIQmhjbUZ0Y3k1amIyNW1hWEp0UW5WMGRHOXVWR1Y0ZENBOUlIQmhjbUZ0Y3k1emFHOTNRMkZ1WTJWc1FuVjBkRzl1SUQ4Z0owTnZibVpwY20wbklEb2daR1ZtWVhWc2RGQmhjbUZ0Y3k1amIyNW1hWEp0UW5WMGRHOXVWR1Y0ZER0Y2JpQWdJQ0FnSUhCaGNtRnRjeTVqYjI1bWFYSnRRblYwZEc5dVZHVjRkQ0E5SUdGeVozVnRaVzUwVDNKRVpXWmhkV3gwS0NkamIyNW1hWEp0UW5WMGRHOXVWR1Y0ZENjcE8xeHVYRzRnSUNBZ0lDQXZMeUJEWVd4c1ltRmpheUJtZFc1amRHbHZiaUIzYUdWdUlHTnNhV05yYVc1bklHOXVJRndpVDB0Y0lpOWNJa05oYm1ObGJGd2lYRzRnSUNBZ0lDQndZWEpoYlhNdVpHOXVaVVoxYm1OMGFXOXVJRDBnWVhKbmRXMWxiblJ6V3pGZElIeDhJRzUxYkd3N1hHNWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJR3h2WjFOMGNpZ25WVzVsZUhCbFkzUmxaQ0IwZVhCbElHOW1JR0Z5WjNWdFpXNTBJU0JGZUhCbFkzUmxaQ0JjSW5OMGNtbHVaMXdpSUc5eUlGd2liMkpxWldOMFhDSXNJR2R2ZENBbklDc2dkSGx3Wlc5bUlHTjFjM1J2YldsNllYUnBiMjV6S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNCOVhHNWNiaUFnYzJWMFVHRnlZVzFsZEdWeWN5aHdZWEpoYlhNcE8xeHVJQ0JtYVhoV1pYSjBhV05oYkZCdmMybDBhVzl1S0NrN1hHNGdJRzl3Wlc1TmIyUmhiQ2hoY21kMWJXVnVkSE5iTVYwcE8xeHVYRzRnSUM4dklFMXZaR0ZzSUdsdWRHVnlZV04wYVc5dWMxeHVJQ0IyWVhJZ2JXOWtZV3dnUFNCblpYUk5iMlJoYkNncE8xeHVYRzVjYmlBZ0x5cGNiaUFnSUNvZ1RXRnJaU0J6ZFhKbElHRnNiQ0J0YjJSaGJDQmlkWFIwYjI1eklISmxjM0J2Ym1RZ2RHOGdZV3hzSUdWMlpXNTBjMXh1SUNBZ0tpOWNiaUFnZG1GeUlDUmlkWFIwYjI1eklEMGdiVzlrWVd3dWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnblluVjBkRzl1SnlrN1hHNGdJSFpoY2lCaWRYUjBiMjVGZG1WdWRITWdQU0JiSjI5dVkyeHBZMnNuTENBbmIyNXRiM1Z6Wlc5MlpYSW5MQ0FuYjI1dGIzVnpaVzkxZENjc0lDZHZibTF2ZFhObFpHOTNiaWNzSUNkdmJtMXZkWE5sZFhBbkxDQW5iMjVtYjJOMWN5ZGRPMXh1SUNCMllYSWdiMjVDZFhSMGIyNUZkbVZ1ZENBOUlDaGxLU0E5UGlCb1lXNWtiR1ZDZFhSMGIyNG9aU3dnY0dGeVlXMXpMQ0J0YjJSaGJDazdYRzVjYmlBZ1ptOXlJQ2hzWlhRZ1luUnVTVzVrWlhnZ1BTQXdPeUJpZEc1SmJtUmxlQ0E4SUNSaWRYUjBiMjV6TG14bGJtZDBhRHNnWW5SdVNXNWtaWGdyS3lrZ2UxeHVJQ0FnSUdadmNpQW9iR1YwSUdWMmRFbHVaR1Y0SUQwZ01Ec2daWFowU1c1a1pYZ2dQQ0JpZFhSMGIyNUZkbVZ1ZEhNdWJHVnVaM1JvT3lCbGRuUkpibVJsZUNzcktTQjdYRzRnSUNBZ0lDQnNaWFFnWW5SdVJYWjBJRDBnWW5WMGRHOXVSWFpsYm5SelcyVjJkRWx1WkdWNFhUdGNiaUFnSUNBZ0lDUmlkWFIwYjI1elcySjBia2x1WkdWNFhWdGlkRzVGZG5SZElEMGdiMjVDZFhSMGIyNUZkbVZ1ZER0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QkRiR2xqYTJsdVp5QnZkWFJ6YVdSbElIUm9aU0J0YjJSaGJDQmthWE50YVhOelpYTWdhWFFnS0dsbUlHRnNiRzkzWldRZ1lua2dkWE5sY2lsY2JpQWdaMlYwVDNabGNteGhlU2dwTG05dVkyeHBZMnNnUFNCdmJrSjFkSFJ2YmtWMlpXNTBPMXh1WEc0Z0lIQnlaWFpwYjNWelYybHVaRzkzUzJWNVJHOTNiaUE5SUhkcGJtUnZkeTV2Ym10bGVXUnZkMjQ3WEc1Y2JpQWdkbUZ5SUc5dVMyVjVSWFpsYm5RZ1BTQW9aU2tnUFQ0Z2FHRnVaR3hsUzJWNVJHOTNiaWhsTENCd1lYSmhiWE1zSUcxdlpHRnNLVHRjYmlBZ2QybHVaRzkzTG05dWEyVjVaRzkzYmlBOUlHOXVTMlY1UlhabGJuUTdYRzVjYmlBZ2QybHVaRzkzTG05dVptOWpkWE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0x5OGdWMmhsYmlCMGFHVWdkWE5sY2lCb1lYTWdabTlqZFhObFpDQmhkMkY1SUdGdVpDQm1iMk4xYzJWa0lHSmhZMnNnWm5KdmJTQjBhR1VnZDJodmJHVWdkMmx1Wkc5M0xseHVJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdMeThnVUhWMElHbHVJR0VnZEdsdFpXOTFkQ0IwYnlCcWRXMXdJRzkxZENCdlppQjBhR1VnWlhabGJuUWdjMlZ4ZFdWdVkyVXVYRzRnSUNBZ0lDQXZMeUJEWVd4c2FXNW5JR1p2WTNWektDa2dhVzRnZEdobElHVjJaVzUwSUhObGNYVmxibU5sSUdOdmJtWjFjMlZ6SUhSb2FXNW5jeTVjYmlBZ0lDQWdJR2xtSUNoc1lYTjBSbTlqZFhObFpFSjFkSFJ2YmlBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUd4aGMzUkdiMk4xYzJWa1FuVjBkRzl1TG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUd4aGMzUkdiMk4xYzJWa1FuVjBkRzl1SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc0lEQXBPMXh1SUNCOU8xeHVJQ0JjYmlBZ0x5OGdVMmh2ZHlCaGJHVnlkQ0IzYVhSb0lHVnVZV0pzWldRZ1luVjBkRzl1Y3lCaGJIZGhlWE5jYmlBZ2MzZGhiQzVsYm1GaWJHVkNkWFIwYjI1ektDazdYRzU5TzF4dVhHNWNibHh1THlwY2JpQXFJRk5sZENCa1pXWmhkV3gwSUhCaGNtRnRjeUJtYjNJZ1pXRmphQ0J3YjNCMWNGeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSFZ6WlhKUVlYSmhiWE5jYmlBcUwxeHVjM2RsWlhSQmJHVnlkQzV6WlhSRVpXWmhkV3gwY3lBOUlITjNZV3d1YzJWMFJHVm1ZWFZzZEhNZ1BTQm1kVzVqZEdsdmJpaDFjMlZ5VUdGeVlXMXpLU0I3WEc0Z0lHbG1JQ2doZFhObGNsQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduZFhObGNsQmhjbUZ0Y3lCcGN5QnlaWEYxYVhKbFpDY3BPMXh1SUNCOVhHNGdJR2xtSUNoMGVYQmxiMllnZFhObGNsQmhjbUZ0Y3lBaFBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozVnpaWEpRWVhKaGJYTWdhR0Z6SUhSdklHSmxJR0VnYjJKcVpXTjBKeWs3WEc0Z0lIMWNibHh1SUNCbGVIUmxibVFvWkdWbVlYVnNkRkJoY21GdGN5d2dkWE5sY2xCaGNtRnRjeWs3WEc1OU8xeHVYRzVjYmk4cVhHNGdLaUJCYm1sdFlYUnBiMjRnZDJobGJpQmpiRzl6YVc1bklHMXZaR0ZzWEc0Z0tpOWNibk4zWldWMFFXeGxjblF1WTJ4dmMyVWdQU0J6ZDJGc0xtTnNiM05sSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUhaaGNpQnRiMlJoYkNBOUlHZGxkRTF2WkdGc0tDazdYRzVjYmlBZ1ptRmtaVTkxZENoblpYUlBkbVZ5YkdGNUtDa3NJRFVwTzF4dUlDQm1ZV1JsVDNWMEtHMXZaR0ZzTENBMUtUdGNiaUFnY21WdGIzWmxRMnhoYzNNb2JXOWtZV3dzSUNkemFHOTNVM2RsWlhSQmJHVnlkQ2NwTzF4dUlDQmhaR1JEYkdGemN5aHRiMlJoYkN3Z0oyaHBaR1ZUZDJWbGRFRnNaWEowSnlrN1hHNGdJSEpsYlc5MlpVTnNZWE56S0cxdlpHRnNMQ0FuZG1semFXSnNaU2NwTzF4dVhHNGdJQzhxWEc0Z0lDQXFJRkpsYzJWMElHbGpiMjRnWVc1cGJXRjBhVzl1YzF4dUlDQWdLaTljYmlBZ2RtRnlJQ1J6ZFdOalpYTnpTV052YmlBOUlHMXZaR0ZzTG5GMVpYSjVVMlZzWldOMGIzSW9KeTV6WVMxcFkyOXVMbk5oTFhOMVkyTmxjM01uS1R0Y2JpQWdjbVZ0YjNabFEyeGhjM01vSkhOMVkyTmxjM05KWTI5dUxDQW5ZVzVwYldGMFpTY3BPMXh1SUNCeVpXMXZkbVZEYkdGemN5Z2tjM1ZqWTJWemMwbGpiMjR1Y1hWbGNubFRaV3hsWTNSdmNpZ25Mbk5oTFhScGNDY3BMQ0FuWVc1cGJXRjBaVk4xWTJObGMzTlVhWEFuS1R0Y2JpQWdjbVZ0YjNabFEyeGhjM01vSkhOMVkyTmxjM05KWTI5dUxuRjFaWEo1VTJWc1pXTjBiM0lvSnk1ellTMXNiMjVuSnlrc0lDZGhibWx0WVhSbFUzVmpZMlZ6YzB4dmJtY25LVHRjYmx4dUlDQjJZWElnSkdWeWNtOXlTV052YmlBOUlHMXZaR0ZzTG5GMVpYSjVVMlZzWldOMGIzSW9KeTV6WVMxcFkyOXVMbk5oTFdWeWNtOXlKeWs3WEc0Z0lISmxiVzkyWlVOc1lYTnpLQ1JsY25KdmNrbGpiMjRzSUNkaGJtbHRZWFJsUlhKeWIzSkpZMjl1SnlrN1hHNGdJSEpsYlc5MlpVTnNZWE56S0NSbGNuSnZja2xqYjI0dWNYVmxjbmxUWld4bFkzUnZjaWduTG5OaExYZ3RiV0Z5YXljcExDQW5ZVzVwYldGMFpWaE5ZWEpySnlrN1hHNWNiaUFnZG1GeUlDUjNZWEp1YVc1blNXTnZiaUE5SUcxdlpHRnNMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXpZUzFwWTI5dUxuTmhMWGRoY201cGJtY25LVHRjYmlBZ2NtVnRiM1psUTJ4aGMzTW9KSGRoY201cGJtZEpZMjl1TENBbmNIVnNjMlZYWVhKdWFXNW5KeWs3WEc0Z0lISmxiVzkyWlVOc1lYTnpLQ1IzWVhKdWFXNW5TV052Ymk1eGRXVnllVk5sYkdWamRHOXlLQ2N1YzJFdFltOWtlU2NwTENBbmNIVnNjMlZYWVhKdWFXNW5TVzV6SnlrN1hHNGdJSEpsYlc5MlpVTnNZWE56S0NSM1lYSnVhVzVuU1dOdmJpNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWMyRXRaRzkwSnlrc0lDZHdkV3h6WlZkaGNtNXBibWRKYm5NbktUdGNibHh1SUNBdkx5QlNaWE5sZENCamRYTjBiMjBnWTJ4aGMzTWdLR1JsYkdGNUlITnZJSFJvWVhRZ1ZVa2dZMmhoYm1kbGN5QmhjbVZ1SjNRZ2RtbHphV0pzWlNsY2JpQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1kzVnpkRzl0UTJ4aGMzTWdQU0J0YjJSaGJDNW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRZM1Z6ZEc5dExXTnNZWE56SnlrN1hHNGdJQ0FnY21WdGIzWmxRMnhoYzNNb2JXOWtZV3dzSUdOMWMzUnZiVU5zWVhOektUdGNiaUFnZlN3Z016QXdLVHRjYmx4dUlDQXZMeUJOWVd0bElIQmhaMlVnYzJOeWIyeHNZV0pzWlNCaFoyRnBibHh1SUNCeVpXMXZkbVZEYkdGemN5aGtiMk4xYldWdWRDNWliMlI1TENBbmMzUnZjQzF6WTNKdmJHeHBibWNuS1R0Y2JseHVJQ0F2THlCU1pYTmxkQ0IwYUdVZ2NHRm5aU0IwYnlCcGRITWdjSEpsZG1sdmRYTWdjM1JoZEdWY2JpQWdkMmx1Wkc5M0xtOXVhMlY1Wkc5M2JpQTlJSEJ5WlhacGIzVnpWMmx1Wkc5M1MyVjVSRzkzYmp0Y2JpQWdhV1lnS0hkcGJtUnZkeTV3Y21WMmFXOTFjMEZqZEdsMlpVVnNaVzFsYm5RcElIdGNiaUFnSUNCM2FXNWtiM2N1Y0hKbGRtbHZkWE5CWTNScGRtVkZiR1Z0Wlc1MExtWnZZM1Z6S0NrN1hHNGdJSDFjYmlBZ2JHRnpkRVp2WTNWelpXUkNkWFIwYjI0Z1BTQjFibVJsWm1sdVpXUTdYRzRnSUdOc1pXRnlWR2x0Wlc5MWRDaHRiMlJoYkM1MGFXMWxiM1YwS1R0Y2JseHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMDdYRzVjYmx4dUx5cGNiaUFxSUZaaGJHbGtZWFJwYjI0Z2IyWWdkR2hsSUdsdWNIVjBJR1pwWld4a0lHbHpJR1J2Ym1VZ1lua2dkWE5sY2x4dUlDb2dTV1lnYzI5dFpYUm9hVzVuSUdseklIZHliMjVuSUQwK0lHTmhiR3dnYzJodmQwbHVjSFYwUlhKeWIzSWdkMmwwYUNCbGNuSnZjazFsYzNOaFoyVmNiaUFxTDF4dWMzZGxaWFJCYkdWeWRDNXphRzkzU1c1d2RYUkZjbkp2Y2lBOUlITjNZV3d1YzJodmQwbHVjSFYwUlhKeWIzSWdQU0JtZFc1amRHbHZiaWhsY25KdmNrMWxjM05oWjJVcElIdGNiaUFnZG1GeUlHMXZaR0ZzSUQwZ1oyVjBUVzlrWVd3b0tUdGNibHh1SUNCMllYSWdKR1Z5Y205eVNXTnZiaUE5SUcxdlpHRnNMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXpZUzFwYm5CMWRDMWxjbkp2Y2ljcE8xeHVJQ0JoWkdSRGJHRnpjeWdrWlhKeWIzSkpZMjl1TENBbmMyaHZkeWNwTzF4dVhHNGdJSFpoY2lBa1pYSnliM0pEYjI1MFlXbHVaWElnUFNCdGIyUmhiQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjMkV0WlhKeWIzSXRZMjl1ZEdGcGJtVnlKeWs3WEc0Z0lHRmtaRU5zWVhOektDUmxjbkp2Y2tOdmJuUmhhVzVsY2l3Z0ozTm9iM2NuS1R0Y2JseHVJQ0FrWlhKeWIzSkRiMjUwWVdsdVpYSXVjWFZsY25sVFpXeGxZM1J2Y2lnbmNDY3BMbWx1Ym1WeVNGUk5UQ0E5SUdWeWNtOXlUV1Z6YzJGblpUdGNibHh1SUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lITjNaV1YwUVd4bGNuUXVaVzVoWW14bFFuVjBkRzl1Y3lncE8xeHVJQ0I5TENBeEtUdGNibHh1SUNCdGIyUmhiQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZHBibkIxZENjcExtWnZZM1Z6S0NrN1hHNTlPMXh1WEc1Y2JpOHFYRzRnS2lCU1pYTmxkQ0JwYm5CMWRDQmxjbkp2Y2lCRVQwMGdaV3hsYldWdWRITmNiaUFxTDF4dWMzZGxaWFJCYkdWeWRDNXlaWE5sZEVsdWNIVjBSWEp5YjNJZ1BTQnpkMkZzTG5KbGMyVjBTVzV3ZFhSRmNuSnZjaUE5SUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDOHZJRWxtSUhCeVpYTnpJR1Z1ZEdWeUlEMCtJR2xuYm05eVpWeHVJQ0JwWmlBb1pYWmxiblFnSmlZZ1pYWmxiblF1YTJWNVEyOWtaU0E5UFQwZ01UTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCMllYSWdKRzF2WkdGc0lEMGdaMlYwVFc5a1lXd29LVHRjYmx4dUlDQjJZWElnSkdWeWNtOXlTV052YmlBOUlDUnRiMlJoYkM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YzJFdGFXNXdkWFF0WlhKeWIzSW5LVHRjYmlBZ2NtVnRiM1psUTJ4aGMzTW9KR1Z5Y205eVNXTnZiaXdnSjNOb2IzY25LVHRjYmx4dUlDQjJZWElnSkdWeWNtOXlRMjl1ZEdGcGJtVnlJRDBnSkcxdlpHRnNMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXpZUzFsY25KdmNpMWpiMjUwWVdsdVpYSW5LVHRjYmlBZ2NtVnRiM1psUTJ4aGMzTW9KR1Z5Y205eVEyOXVkR0ZwYm1WeUxDQW5jMmh2ZHljcE8xeHVmVHRjYmx4dUx5cGNiaUFxSUVScGMyRmliR1VnWTI5dVptbHliU0JoYm1RZ1kyRnVZMlZzSUdKMWRIUnZibk5jYmlBcUwxeHVjM2RsWlhSQmJHVnlkQzVrYVhOaFlteGxRblYwZEc5dWN5QTlJSE4zWVd3dVpHbHpZV0pzWlVKMWRIUnZibk1nUFNCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZTF4dUlDQjJZWElnYlc5a1lXd2dQU0JuWlhSTmIyUmhiQ2dwTzF4dUlDQjJZWElnSkdOdmJtWnBjbTFDZFhSMGIyNGdQU0J0YjJSaGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkaWRYUjBiMjR1WTI5dVptbHliU2NwTzF4dUlDQjJZWElnSkdOaGJtTmxiRUoxZEhSdmJpQTlJRzF2WkdGc0xuRjFaWEo1VTJWc1pXTjBiM0lvSjJKMWRIUnZiaTVqWVc1alpXd25LVHRjYmlBZ0pHTnZibVpwY20xQ2RYUjBiMjR1WkdsellXSnNaV1FnUFNCMGNuVmxPMXh1SUNBa1kyRnVZMlZzUW5WMGRHOXVMbVJwYzJGaWJHVmtJRDBnZEhKMVpUdGNibjA3WEc1Y2JpOHFYRzRnS2lCRmJtRmliR1VnWTI5dVptbHliU0JoYm1RZ1kyRnVZMlZzSUdKMWRIUnZibk5jYmlBcUwxeHVjM2RsWlhSQmJHVnlkQzVsYm1GaWJHVkNkWFIwYjI1eklEMGdjM2RoYkM1bGJtRmliR1ZDZFhSMGIyNXpJRDBnWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ2RtRnlJRzF2WkdGc0lEMGdaMlYwVFc5a1lXd29LVHRjYmlBZ2RtRnlJQ1JqYjI1bWFYSnRRblYwZEc5dUlEMGdiVzlrWVd3dWNYVmxjbmxUWld4bFkzUnZjaWduWW5WMGRHOXVMbU52Ym1acGNtMG5LVHRjYmlBZ2RtRnlJQ1JqWVc1alpXeENkWFIwYjI0Z1BTQnRiMlJoYkM1eGRXVnllVk5sYkdWamRHOXlLQ2RpZFhSMGIyNHVZMkZ1WTJWc0p5azdYRzRnSUNSamIyNW1hWEp0UW5WMGRHOXVMbVJwYzJGaWJHVmtJRDBnWm1Gc2MyVTdYRzRnSUNSallXNWpaV3hDZFhSMGIyNHVaR2x6WVdKc1pXUWdQU0JtWVd4elpUdGNibjA3WEc1Y2JtbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0F2THlCVWFHVWdKMmhoYm1Sc1pTMWpiR2xqYXljZ2JXOWtkV3hsSUhKbGNYVnBjbVZ6WEc0Z0lDOHZJSFJvWVhRZ0ozTjNaV1YwUVd4bGNuUW5JSGRoY3lCelpYUWdZWE1nWjJ4dlltRnNMbHh1SUNCM2FXNWtiM2N1YzNkbFpYUkJiR1Z5ZENBOUlIZHBibVJ2ZHk1emQyRnNJRDBnYzNkbFpYUkJiR1Z5ZER0Y2JuMGdaV3h6WlNCN1hHNGdJR3h2WjFOMGNpZ25VM2RsWlhSQmJHVnlkQ0JwY3lCaElHWnliMjUwWlc1a0lHMXZaSFZzWlNFbktUdGNibjFjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGRlZmF1bHRQYXJhbXMgPSB7XG4gIHRpdGxlOiAnJyxcbiAgdGV4dDogJycsXG4gIHR5cGU6IG51bGwsXG4gIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZSxcbiAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLFxuICBjbG9zZU9uQ29uZmlybTogdHJ1ZSxcbiAgY2xvc2VPbkNhbmNlbDogdHJ1ZSxcbiAgY29uZmlybUJ1dHRvblRleHQ6ICdPSycsXG4gIGNvbmZpcm1CdXR0b25Db2xvcjogJyM4Q0Q0RjUnLFxuICBjYW5jZWxCdXR0b25UZXh0OiAnQ2FuY2VsJyxcbiAgaW1hZ2VVcmw6IG51bGwsXG4gIGltYWdlU2l6ZTogbnVsbCxcbiAgdGltZXI6IG51bGwsXG4gIGN1c3RvbUNsYXNzOiAnJyxcbiAgaHRtbDogZmFsc2UsXG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgYWxsb3dFc2NhcGVLZXk6IHRydWUsXG4gIGlucHV0VHlwZTogJ3RleHQnLFxuICBpbnB1dFBsYWNlaG9sZGVyOiAnJyxcbiAgaW5wdXRWYWx1ZTogJycsXG4gIHNob3dMb2FkZXJPbkNvbmZpcm06IGZhbHNlXG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBkZWZhdWx0UGFyYW1zO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlEYjJSbEwzTjNaV1YwWVd4bGNuUXZaR1YyTDIxdlpIVnNaWE12WkdWbVlYVnNkQzF3WVhKaGJYTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRU3hKUVVGSkxHRkJRV0VzUjBGQlJ6dEJRVU5zUWl4UFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVOVUxFMUJRVWtzUlVGQlJTeEZRVUZGTzBGQlExSXNUVUZCU1N4RlFVRkZMRWxCUVVrN1FVRkRWaXh0UWtGQmFVSXNSVUZCUlN4TFFVRkxPMEZCUTNoQ0xHMUNRVUZwUWl4RlFVRkZMRWxCUVVrN1FVRkRka0lzYTBKQlFXZENMRVZCUVVVc1MwRkJTenRCUVVOMlFpeG5Ra0ZCWXl4RlFVRkZMRWxCUVVrN1FVRkRjRUlzWlVGQllTeEZRVUZGTEVsQlFVazdRVUZEYmtJc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1R0QlFVTjJRaXh2UWtGQmEwSXNSVUZCUlN4VFFVRlRPMEZCUXpkQ0xHdENRVUZuUWl4RlFVRkZMRkZCUVZFN1FVRkRNVUlzVlVGQlVTeEZRVUZGTEVsQlFVazdRVUZEWkN4WFFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxFOUJRVXNzUlVGQlJTeEpRVUZKTzBGQlExZ3NZVUZCVnl4RlFVRkZMRVZCUVVVN1FVRkRaaXhOUVVGSkxFVkJRVVVzUzBGQlN6dEJRVU5ZTEZkQlFWTXNSVUZCUlN4SlFVRkpPMEZCUTJZc1owSkJRV01zUlVGQlJTeEpRVUZKTzBGQlEzQkNMRmRCUVZNc1JVRkJSU3hOUVVGTk8wRkJRMnBDTEd0Q1FVRm5RaXhGUVVGRkxFVkJRVVU3UVVGRGNFSXNXVUZCVlN4RlFVRkZMRVZCUVVVN1FVRkRaQ3h4UWtGQmJVSXNSVUZCUlN4TFFVRkxPME5CUXpOQ0xFTkJRVU03TzNGQ1FVVmhMR0ZCUVdFaUxDSm1hV3hsSWpvaUwwTnZaR1V2YzNkbFpYUmhiR1Z5ZEM5a1pYWXZiVzlrZFd4bGN5OWtaV1poZFd4MExYQmhjbUZ0Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCa1pXWmhkV3gwVUdGeVlXMXpJRDBnZTF4dUlDQjBhWFJzWlRvZ0p5Y3NYRzRnSUhSbGVIUTZJQ2NuTEZ4dUlDQjBlWEJsT2lCdWRXeHNMRnh1SUNCaGJHeHZkMDkxZEhOcFpHVkRiR2xqYXpvZ1ptRnNjMlVzWEc0Z0lITm9iM2REYjI1bWFYSnRRblYwZEc5dU9pQjBjblZsTEZ4dUlDQnphRzkzUTJGdVkyVnNRblYwZEc5dU9pQm1ZV3h6WlN4Y2JpQWdZMnh2YzJWUGJrTnZibVpwY20wNklIUnlkV1VzWEc0Z0lHTnNiM05sVDI1RFlXNWpaV3c2SUhSeWRXVXNYRzRnSUdOdmJtWnBjbTFDZFhSMGIyNVVaWGgwT2lBblQwc25MRnh1SUNCamIyNW1hWEp0UW5WMGRHOXVRMjlzYjNJNklDY2pPRU5FTkVZMUp5eGNiaUFnWTJGdVkyVnNRblYwZEc5dVZHVjRkRG9nSjBOaGJtTmxiQ2NzWEc0Z0lHbHRZV2RsVlhKc09pQnVkV3hzTEZ4dUlDQnBiV0ZuWlZOcGVtVTZJRzUxYkd3c1hHNGdJSFJwYldWeU9pQnVkV3hzTEZ4dUlDQmpkWE4wYjIxRGJHRnpjem9nSnljc1hHNGdJR2gwYld3NklHWmhiSE5sTEZ4dUlDQmhibWx0WVhScGIyNDZJSFJ5ZFdVc1hHNGdJR0ZzYkc5M1JYTmpZWEJsUzJWNU9pQjBjblZsTEZ4dUlDQnBibkIxZEZSNWNHVTZJQ2QwWlhoMEp5eGNiaUFnYVc1d2RYUlFiR0ZqWldodmJHUmxjam9nSnljc1hHNGdJR2x1Y0hWMFZtRnNkV1U2SUNjbkxGeHVJQ0J6YUc5M1RHOWhaR1Z5VDI1RGIyNW1hWEp0T2lCbVlXeHpaVnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1pHVm1ZWFZzZEZCaGNtRnRjenRjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2hhbmRsZVN3YWxEb20gPSByZXF1aXJlKCcuL2hhbmRsZS1zd2FsLWRvbScpO1xuXG52YXIgX2hhbmRsZURvbSA9IHJlcXVpcmUoJy4vaGFuZGxlLWRvbScpO1xuXG4vKlxuICogVXNlciBjbGlja2VkIG9uIFwiQ29uZmlybVwiL1wiT0tcIiBvciBcIkNhbmNlbFwiXG4gKi9cbnZhciBoYW5kbGVCdXR0b24gPSBmdW5jdGlvbiBoYW5kbGVCdXR0b24oZXZlbnQsIHBhcmFtcywgbW9kYWwpIHtcbiAgdmFyIGUgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG4gIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cbiAgdmFyIHRhcmdldGVkQ29uZmlybSA9IHRhcmdldC5jbGFzc05hbWUuaW5kZXhPZignY29uZmlybScpICE9PSAtMTtcbiAgdmFyIHRhcmdldGVkT3ZlcmxheSA9IHRhcmdldC5jbGFzc05hbWUuaW5kZXhPZignc3dlZXQtb3ZlcmxheScpICE9PSAtMTtcbiAgdmFyIG1vZGFsSXNWaXNpYmxlID0gKDAsIF9oYW5kbGVEb20uaGFzQ2xhc3MpKG1vZGFsLCAndmlzaWJsZScpO1xuICB2YXIgZG9uZUZ1bmN0aW9uRXhpc3RzID0gcGFyYW1zLmRvbmVGdW5jdGlvbiAmJiBtb2RhbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzLWRvbmUtZnVuY3Rpb24nKSA9PT0gJ3RydWUnO1xuXG4gIC8vIFNpbmNlIHRoZSB1c2VyIGNhbiBjaGFuZ2UgdGhlIGJhY2tncm91bmQtY29sb3Igb2YgdGhlIGNvbmZpcm0gYnV0dG9uIHByb2dyYW1tYXRpY2FsbHksXG4gIC8vIHdlIG11c3QgY2FsY3VsYXRlIHdoYXQgdGhlIGNvbG9yIHNob3VsZCBiZSBvbiBob3Zlci9hY3RpdmVcbiAgdmFyIG5vcm1hbENvbG9yLCBob3ZlckNvbG9yLCBhY3RpdmVDb2xvcjtcbiAgaWYgKHRhcmdldGVkQ29uZmlybSAmJiBwYXJhbXMuY29uZmlybUJ1dHRvbkNvbG9yKSB7XG4gICAgbm9ybWFsQ29sb3IgPSBwYXJhbXMuY29uZmlybUJ1dHRvbkNvbG9yO1xuICAgIGhvdmVyQ29sb3IgPSAoMCwgX3V0aWxzLmNvbG9yTHVtaW5hbmNlKShub3JtYWxDb2xvciwgLTAuMDQpO1xuICAgIGFjdGl2ZUNvbG9yID0gKDAsIF91dGlscy5jb2xvckx1bWluYW5jZSkobm9ybWFsQ29sb3IsIC0wLjE0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFNldENvbmZpcm1CdXR0b25Db2xvcihjb2xvcikge1xuICAgIGlmICh0YXJnZXRlZENvbmZpcm0gJiYgcGFyYW1zLmNvbmZpcm1CdXR0b25Db2xvcikge1xuICAgICAgLy8gdGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgIHNob3VsZFNldENvbmZpcm1CdXR0b25Db2xvcihob3ZlckNvbG9yKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbW91c2VvdXQnOlxuICAgICAgc2hvdWxkU2V0Q29uZmlybUJ1dHRvbkNvbG9yKG5vcm1hbENvbG9yKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICAgIHNob3VsZFNldENvbmZpcm1CdXR0b25Db2xvcihhY3RpdmVDb2xvcik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ21vdXNldXAnOlxuICAgICAgc2hvdWxkU2V0Q29uZmlybUJ1dHRvbkNvbG9yKGhvdmVyQ29sb3IpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdmb2N1cyc6XG4gICAgICB2YXIgJGNvbmZpcm1CdXR0b24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCdidXR0b24uY29uZmlybScpO1xuICAgICAgdmFyICRjYW5jZWxCdXR0b24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCdidXR0b24uY2FuY2VsJyk7XG5cbiAgICAgIGlmICh0YXJnZXRlZENvbmZpcm0pIHtcbiAgICAgICAgJGNhbmNlbEJ1dHRvbi5zdHlsZS5ib3hTaGFkb3cgPSAnbm9uZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkY29uZmlybUJ1dHRvbi5zdHlsZS5ib3hTaGFkb3cgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgIHZhciBjbGlja2VkT25Nb2RhbCA9IG1vZGFsID09PSB0YXJnZXQ7XG4gICAgICB2YXIgY2xpY2tlZE9uTW9kYWxDaGlsZCA9ICgwLCBfaGFuZGxlRG9tLmlzRGVzY2VuZGFudCkobW9kYWwsIHRhcmdldCk7XG5cbiAgICAgIC8vIElnbm9yZSBjbGljayBvdXRzaWRlIGlmIGFsbG93T3V0c2lkZUNsaWNrIGlzIGZhbHNlXG4gICAgICBpZiAoIWNsaWNrZWRPbk1vZGFsICYmICFjbGlja2VkT25Nb2RhbENoaWxkICYmIG1vZGFsSXNWaXNpYmxlICYmICFwYXJhbXMuYWxsb3dPdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXRlZENvbmZpcm0gJiYgZG9uZUZ1bmN0aW9uRXhpc3RzICYmIG1vZGFsSXNWaXNpYmxlKSB7XG4gICAgICAgIGhhbmRsZUNvbmZpcm0obW9kYWwsIHBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKGRvbmVGdW5jdGlvbkV4aXN0cyAmJiBtb2RhbElzVmlzaWJsZSB8fCB0YXJnZXRlZE92ZXJsYXkpIHtcbiAgICAgICAgaGFuZGxlQ2FuY2VsKG1vZGFsLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmICgoMCwgX2hhbmRsZURvbS5pc0Rlc2NlbmRhbnQpKG1vZGFsLCB0YXJnZXQpICYmIHRhcmdldC50YWdOYW1lID09PSAnQlVUVE9OJykge1xuICAgICAgICBzd2VldEFsZXJ0LmNsb3NlKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLypcbiAqICBVc2VyIGNsaWNrZWQgb24gXCJDb25maXJtXCIvXCJPS1wiXG4gKi9cbnZhciBoYW5kbGVDb25maXJtID0gZnVuY3Rpb24gaGFuZGxlQ29uZmlybShtb2RhbCwgcGFyYW1zKSB7XG4gIHZhciBjYWxsYmFja1ZhbHVlID0gdHJ1ZTtcblxuICBpZiAoKDAsIF9oYW5kbGVEb20uaGFzQ2xhc3MpKG1vZGFsLCAnc2hvdy1pbnB1dCcpKSB7XG4gICAgY2FsbGJhY2tWYWx1ZSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWU7XG5cbiAgICBpZiAoIWNhbGxiYWNrVmFsdWUpIHtcbiAgICAgIGNhbGxiYWNrVmFsdWUgPSAnJztcbiAgICB9XG4gIH1cblxuICBwYXJhbXMuZG9uZUZ1bmN0aW9uKGNhbGxiYWNrVmFsdWUpO1xuXG4gIGlmIChwYXJhbXMuY2xvc2VPbkNvbmZpcm0pIHtcbiAgICBzd2VldEFsZXJ0LmNsb3NlKCk7XG4gIH1cbiAgLy8gRGlzYWJsZSBjYW5jZWwgYW5kIGNvbmZpcm0gYnV0dG9uIGlmIHRoZSBwYXJhbWV0ZXIgaXMgdHJ1ZVxuICBpZiAocGFyYW1zLnNob3dMb2FkZXJPbkNvbmZpcm0pIHtcbiAgICBzd2VldEFsZXJ0LmRpc2FibGVCdXR0b25zKCk7XG4gIH1cbn07XG5cbi8qXG4gKiAgVXNlciBjbGlja2VkIG9uIFwiQ2FuY2VsXCJcbiAqL1xudmFyIGhhbmRsZUNhbmNlbCA9IGZ1bmN0aW9uIGhhbmRsZUNhbmNlbChtb2RhbCwgcGFyYW1zKSB7XG4gIC8vIENoZWNrIGlmIGNhbGxiYWNrIGZ1bmN0aW9uIGV4cGVjdHMgYSBwYXJhbWV0ZXIgKHRvIHRyYWNrIGNhbmNlbCBhY3Rpb25zKVxuICB2YXIgZnVuY3Rpb25Bc1N0ciA9IFN0cmluZyhwYXJhbXMuZG9uZUZ1bmN0aW9uKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICB2YXIgZnVuY3Rpb25IYW5kbGVzQ2FuY2VsID0gZnVuY3Rpb25Bc1N0ci5zdWJzdHJpbmcoMCwgOSkgPT09ICdmdW5jdGlvbignICYmIGZ1bmN0aW9uQXNTdHIuc3Vic3RyaW5nKDksIDEwKSAhPT0gJyknO1xuXG4gIGlmIChmdW5jdGlvbkhhbmRsZXNDYW5jZWwpIHtcbiAgICBwYXJhbXMuZG9uZUZ1bmN0aW9uKGZhbHNlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2xvc2VPbkNhbmNlbCkge1xuICAgIHN3ZWV0QWxlcnQuY2xvc2UoKTtcbiAgfVxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBoYW5kbGVCdXR0b246IGhhbmRsZUJ1dHRvbixcbiAgaGFuZGxlQ29uZmlybTogaGFuZGxlQ29uZmlybSxcbiAgaGFuZGxlQ2FuY2VsOiBoYW5kbGVDYW5jZWxcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOURiMlJsTDNOM1pXVjBZV3hsY25RdlpHVjJMMjF2WkhWc1pYTXZhR0Z1Wkd4bExXTnNhV05yTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenR4UWtGQkswSXNVMEZCVXpzN05rSkJRMllzYlVKQlFXMUNPenQ1UWtGRFRDeGpRVUZqT3pzN096dEJRVTF5UkN4SlFVRkpMRmxCUVZrc1IwRkJSeXhUUVVGbUxGbEJRVmtzUTBGQldTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOb1JDeE5RVUZKTEVOQlFVTXNSMEZCUnl4TFFVRkxMRWxCUVVrc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU01UWl4TlFVRkpMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNN08wRkJSWFJETEUxQlFVa3NaVUZCWlN4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnBGTEUxQlFVa3NaVUZCWlN4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pGTEUxQlFVa3NZMEZCWXl4SFFVRkpMSGxDUVVGVExFdEJRVXNzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0QlFVTnFSQ3hOUVVGSkxHdENRVUZyUWl4SFFVRkpMRTFCUVUwc1EwRkJReXhaUVVGWkxFbEJRVWtzUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eExRVUZMTEUxQlFVMHNRVUZCUXl4RFFVRkRPenM3TzBGQlNURkhMRTFCUVVrc1YwRkJWeXhGUVVGRkxGVkJRVlVzUlVGQlJTeFhRVUZYTEVOQlFVTTdRVUZEZWtNc1RVRkJTU3hsUVVGbExFbEJRVWtzVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhGUVVGRk8wRkJRMmhFTEdWQlFWY3NSMEZCU1N4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdRVUZEZWtNc1kwRkJWU3hIUVVGTExESkNRVUZsTEZkQlFWY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnhFTEdWQlFWY3NSMEZCU1N3eVFrRkJaU3hYUVVGWExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SFFVTnVSRHM3UVVGRlJDeFhRVUZUTERKQ1FVRXlRaXhEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU14UXl4UlFVRkpMR1ZCUVdVc1NVRkJTU3hOUVVGTkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVN08wdEJSV3BFTzBkQlEwWTdPMEZCUlVRc1ZVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNUdEJRVU5hTEZOQlFVc3NWMEZCVnp0QlFVTmtMR2xEUVVFeVFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUTNoRExGbEJRVTA3TzBGQlFVRXNRVUZGVWl4VFFVRkxMRlZCUVZVN1FVRkRZaXhwUTBGQk1rSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVONlF5eFpRVUZOT3p0QlFVRkJMRUZCUlZJc1UwRkJTeXhYUVVGWE8wRkJRMlFzYVVOQlFUSkNMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UVVGRGVrTXNXVUZCVFRzN1FVRkJRU3hCUVVWU0xGTkJRVXNzVTBGQlV6dEJRVU5hTEdsRFFVRXlRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzaERMRmxCUVUwN08wRkJRVUVzUVVGRlVpeFRRVUZMTEU5QlFVODdRVUZEVml4VlFVRkpMR05CUVdNc1IwRkJSeXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRE0wUXNWVUZCU1N4aFFVRmhMRWRCUVVrc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXpzN1FVRkZNVVFzVlVGQlNTeGxRVUZsTEVWQlFVVTdRVUZEYmtJc2NVSkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJRenRQUVVONFF5eE5RVUZOTzBGQlEwd3NjMEpCUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXp0UFFVTjZRenRCUVVORUxGbEJRVTA3TzBGQlFVRXNRVUZGVWl4VFFVRkxMRTlCUVU4N1FVRkRWaXhWUVVGSkxHTkJRV01zUjBGQlNTeExRVUZMTEV0QlFVc3NUVUZCVFN4QlFVRkRMRU5CUVVNN1FVRkRlRU1zVlVGQlNTeHRRa0ZCYlVJc1IwRkJSeXcyUWtGQllTeExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN096dEJRVWQwUkN4VlFVRkpMRU5CUVVNc1kwRkJZeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWxCUVVrc1kwRkJZeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhGUVVGRk8wRkJRekZHTEdOQlFVMDdUMEZEVURzN1FVRkZSQ3hWUVVGSkxHVkJRV1VzU1VGQlNTeHJRa0ZCYTBJc1NVRkJTU3hqUVVGakxFVkJRVVU3UVVGRE0wUXNjVUpCUVdFc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdUMEZET1VJc1RVRkJUU3hKUVVGSkxHdENRVUZyUWl4SlFVRkpMR05CUVdNc1NVRkJTU3hsUVVGbExFVkJRVVU3UVVGRGJFVXNiMEpCUVZrc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdUMEZETjBJc1RVRkJUU3hKUVVGSkxEWkNRVUZoTEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eExRVUZMTEZGQlFWRXNSVUZCUlR0QlFVTnlSU3hyUWtGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMDlCUTNCQ08wRkJRMFFzV1VGQlRUdEJRVUZCTEVkQlExUTdRMEZEUml4RFFVRkRPenM3T3p0QlFVdEdMRWxCUVVrc1lVRkJZU3hIUVVGSExGTkJRV2hDTEdGQlFXRXNRMEZCV1N4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRekZETEUxQlFVa3NZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJRenM3UVVGRmVrSXNUVUZCU1N4NVFrRkJVeXhMUVVGTExFVkJRVVVzV1VGQldTeERRVUZETEVWQlFVVTdRVUZEYWtNc2FVSkJRV0VzUjBGQlJ5eExRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF6czdRVUZGYmtRc1VVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJUdEJRVU5zUWl4dFFrRkJZU3hIUVVGSExFVkJRVVVzUTBGQlF6dExRVU53UWp0SFFVTkdPenRCUVVWRUxGRkJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN08wRkJSVzVETEUxQlFVa3NUVUZCVFN4RFFVRkRMR05CUVdNc1JVRkJSVHRCUVVONlFpeGpRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1IwRkRjRUk3TzBGQlJVUXNUVUZCU1N4TlFVRk5MRU5CUVVNc2JVSkJRVzFDTEVWQlFVVTdRVUZET1VJc1kwRkJWU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzBkQlF6ZENPME5CUTBZc1EwRkJRenM3T3pzN1FVRkxSaXhKUVVGSkxGbEJRVmtzUjBGQlJ5eFRRVUZtTEZsQlFWa3NRMEZCV1N4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk96dEJRVVY2UXl4TlFVRkpMR0ZCUVdFc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYmtVc1RVRkJTU3h4UWtGQmNVSXNSMEZCUnl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4WFFVRlhMRWxCUVVrc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRE96dEJRVVZ3U0N4TlFVRkpMSEZDUVVGeFFpeEZRVUZGTzBGQlEzcENMRlZCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdSMEZETlVJN08wRkJSVVFzVFVGQlNTeE5RVUZOTEVOQlFVTXNZVUZCWVN4RlFVRkZPMEZCUTNoQ0xHTkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0SFFVTndRanREUVVOR0xFTkJRVU03TzNGQ1FVZGhPMEZCUTJJc1kwRkJXU3hGUVVGYUxGbEJRVms3UVVGRFdpeGxRVUZoTEVWQlFXSXNZVUZCWVR0QlFVTmlMR05CUVZrc1JVRkJXaXhaUVVGWk8wTkJRMklpTENKbWFXeGxJam9pTDBOdlpHVXZjM2RsWlhSaGJHVnlkQzlrWlhZdmJXOWtkV3hsY3k5b1lXNWtiR1V0WTJ4cFkyc3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZXlCamIyeHZja3gxYldsdVlXNWpaU0I5SUdaeWIyMGdKeTR2ZFhScGJITW5PMXh1YVcxd2IzSjBJSHNnWjJWMFRXOWtZV3dnZlNCbWNtOXRJQ2N1TDJoaGJtUnNaUzF6ZDJGc0xXUnZiU2M3WEc1cGJYQnZjblFnZXlCb1lYTkRiR0Z6Y3l3Z2FYTkVaWE5qWlc1a1lXNTBJSDBnWm5KdmJTQW5MaTlvWVc1a2JHVXRaRzl0Snp0Y2JseHVYRzR2S2x4dUlDb2dWWE5sY2lCamJHbGphMlZrSUc5dUlGd2lRMjl1Wm1seWJWd2lMMXdpVDB0Y0lpQnZjaUJjSWtOaGJtTmxiRndpWEc0Z0tpOWNiblpoY2lCb1lXNWtiR1ZDZFhSMGIyNGdQU0JtZFc1amRHbHZiaWhsZG1WdWRDd2djR0Z5WVcxekxDQnRiMlJoYkNrZ2UxeHVJQ0IyWVhJZ1pTQTlJR1YyWlc1MElIeDhJSGRwYm1SdmR5NWxkbVZ1ZER0Y2JpQWdkbUZ5SUhSaGNtZGxkQ0E5SUdVdWRHRnlaMlYwSUh4OElHVXVjM0pqUld4bGJXVnVkRHRjYmx4dUlDQjJZWElnZEdGeVoyVjBaV1JEYjI1bWFYSnRJRDBnZEdGeVoyVjBMbU5zWVhOelRtRnRaUzVwYm1SbGVFOW1LQ2RqYjI1bWFYSnRKeWtnSVQwOUlDMHhPMXh1SUNCMllYSWdkR0Z5WjJWMFpXUlBkbVZ5YkdGNUlEMGdkR0Z5WjJWMExtTnNZWE56VG1GdFpTNXBibVJsZUU5bUtDZHpkMlZsZEMxdmRtVnliR0Y1SnlrZ0lUMDlJQzB4TzF4dUlDQjJZWElnYlc5a1lXeEpjMVpwYzJsaWJHVWdJRDBnYUdGelEyeGhjM01vYlc5a1lXd3NJQ2QyYVhOcFlteGxKeWs3WEc0Z0lIWmhjaUJrYjI1bFJuVnVZM1JwYjI1RmVHbHpkSE1nUFNBb2NHRnlZVzF6TG1SdmJtVkdkVzVqZEdsdmJpQW1KaUJ0YjJSaGJDNW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRhR0Z6TFdSdmJtVXRablZ1WTNScGIyNG5LU0E5UFQwZ0ozUnlkV1VuS1R0Y2JseHVJQ0F2THlCVGFXNWpaU0IwYUdVZ2RYTmxjaUJqWVc0Z1kyaGhibWRsSUhSb1pTQmlZV05yWjNKdmRXNWtMV052Ykc5eUlHOW1JSFJvWlNCamIyNW1hWEp0SUdKMWRIUnZiaUJ3Y205bmNtRnRiV0YwYVdOaGJHeDVMRnh1SUNBdkx5QjNaU0J0ZFhOMElHTmhiR04xYkdGMFpTQjNhR0YwSUhSb1pTQmpiMnh2Y2lCemFHOTFiR1FnWW1VZ2IyNGdhRzkyWlhJdllXTjBhWFpsWEc0Z0lIWmhjaUJ1YjNKdFlXeERiMnh2Y2l3Z2FHOTJaWEpEYjJ4dmNpd2dZV04wYVhabFEyOXNiM0k3WEc0Z0lHbG1JQ2gwWVhKblpYUmxaRU52Ym1acGNtMGdKaVlnY0dGeVlXMXpMbU52Ym1acGNtMUNkWFIwYjI1RGIyeHZjaWtnZTF4dUlDQWdJRzV2Y20xaGJFTnZiRzl5SUNBOUlIQmhjbUZ0Y3k1amIyNW1hWEp0UW5WMGRHOXVRMjlzYjNJN1hHNGdJQ0FnYUc5MlpYSkRiMnh2Y2lBZ0lEMGdZMjlzYjNKTWRXMXBibUZ1WTJVb2JtOXliV0ZzUTI5c2IzSXNJQzB3TGpBMEtUdGNiaUFnSUNCaFkzUnBkbVZEYjJ4dmNpQWdQU0JqYjJ4dmNreDFiV2x1WVc1alpTaHViM0p0WVd4RGIyeHZjaXdnTFRBdU1UUXBPMXh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYzJodmRXeGtVMlYwUTI5dVptbHliVUoxZEhSdmJrTnZiRzl5S0dOdmJHOXlLU0I3WEc0Z0lDQWdhV1lnS0hSaGNtZGxkR1ZrUTI5dVptbHliU0FtSmlCd1lYSmhiWE11WTI5dVptbHliVUoxZEhSdmJrTnZiRzl5S1NCN1hHNGdJQ0FnSUNBdkx5QjBZWEpuWlhRdWMzUjViR1V1WW1GamEyZHliM1Z1WkVOdmJHOXlJRDBnWTI5c2IzSTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjM2RwZEdOb0lDaGxMblI1Y0dVcElIdGNiaUFnSUNCallYTmxJQ2R0YjNWelpXOTJaWEluT2x4dUlDQWdJQ0FnYzJodmRXeGtVMlYwUTI5dVptbHliVUoxZEhSdmJrTnZiRzl5S0dodmRtVnlRMjlzYjNJcE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0JqWVhObElDZHRiM1Z6Wlc5MWRDYzZYRzRnSUNBZ0lDQnphRzkxYkdSVFpYUkRiMjVtYVhKdFFuVjBkRzl1UTI5c2IzSW9ibTl5YldGc1EyOXNiM0lwTzF4dUlDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQmpZWE5sSUNkdGIzVnpaV1J2ZDI0bk9seHVJQ0FnSUNBZ2MyaHZkV3hrVTJWMFEyOXVabWx5YlVKMWRIUnZia052Ykc5eUtHRmpkR2wyWlVOdmJHOXlLVHRjYmlBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ1kyRnpaU0FuYlc5MWMyVjFjQ2M2WEc0Z0lDQWdJQ0J6YUc5MWJHUlRaWFJEYjI1bWFYSnRRblYwZEc5dVEyOXNiM0lvYUc5MlpYSkRiMnh2Y2lrN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJR05oYzJVZ0oyWnZZM1Z6SnpwY2JpQWdJQ0FnSUd4bGRDQWtZMjl1Wm1seWJVSjFkSFJ2YmlBOUlHMXZaR0ZzTG5GMVpYSjVVMlZzWldOMGIzSW9KMkoxZEhSdmJpNWpiMjVtYVhKdEp5azdYRzRnSUNBZ0lDQnNaWFFnSkdOaGJtTmxiRUoxZEhSdmJpQWdQU0J0YjJSaGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkaWRYUjBiMjR1WTJGdVkyVnNKeWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBZWEpuWlhSbFpFTnZibVpwY20wcElIdGNiaUFnSUNBZ0lDQWdKR05oYm1ObGJFSjFkSFJ2Ymk1emRIbHNaUzVpYjNoVGFHRmtiM2NnUFNBbmJtOXVaU2M3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FrWTI5dVptbHliVUoxZEhSdmJpNXpkSGxzWlM1aWIzaFRhR0ZrYjNjZ1BTQW5ibTl1WlNjN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJR05oYzJVZ0oyTnNhV05ySnpwY2JpQWdJQ0FnSUd4bGRDQmpiR2xqYTJWa1QyNU5iMlJoYkNBOUlDaHRiMlJoYkNBOVBUMGdkR0Z5WjJWMEtUdGNiaUFnSUNBZ0lHeGxkQ0JqYkdsamEyVmtUMjVOYjJSaGJFTm9hV3hrSUQwZ2FYTkVaWE5qWlc1a1lXNTBLRzF2WkdGc0xDQjBZWEpuWlhRcE8xeHVYRzRnSUNBZ0lDQXZMeUJKWjI1dmNtVWdZMnhwWTJzZ2IzVjBjMmxrWlNCcFppQmhiR3h2ZDA5MWRITnBaR1ZEYkdsamF5QnBjeUJtWVd4elpWeHVJQ0FnSUNBZ2FXWWdLQ0ZqYkdsamEyVmtUMjVOYjJSaGJDQW1KaUFoWTJ4cFkydGxaRTl1VFc5a1lXeERhR2xzWkNBbUppQnRiMlJoYkVselZtbHphV0pzWlNBbUppQWhjR0Z5WVcxekxtRnNiRzkzVDNWMGMybGtaVU5zYVdOcktTQjdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZEdGeVoyVjBaV1JEYjI1bWFYSnRJQ1ltSUdSdmJtVkdkVzVqZEdsdmJrVjRhWE4wY3lBbUppQnRiMlJoYkVselZtbHphV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQm9ZVzVrYkdWRGIyNW1hWEp0S0cxdlpHRnNMQ0J3WVhKaGJYTXBPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hrYjI1bFJuVnVZM1JwYjI1RmVHbHpkSE1nSmlZZ2JXOWtZV3hKYzFacGMybGliR1VnZkh3Z2RHRnlaMlYwWldSUGRtVnliR0Y1S1NCN1hHNGdJQ0FnSUNBZ0lHaGhibVJzWlVOaGJtTmxiQ2h0YjJSaGJDd2djR0Z5WVcxektUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5FWlhOalpXNWtZVzUwS0cxdlpHRnNMQ0IwWVhKblpYUXBJQ1ltSUhSaGNtZGxkQzUwWVdkT1lXMWxJRDA5UFNBblFsVlVWRTlPSnlrZ2UxeHVJQ0FnSUNBZ0lDQnpkMlZsZEVGc1pYSjBMbU5zYjNObEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdmVnh1ZlR0Y2JseHVMeXBjYmlBcUlDQlZjMlZ5SUdOc2FXTnJaV1FnYjI0Z1hDSkRiMjVtYVhKdFhDSXZYQ0pQUzF3aVhHNGdLaTljYm5aaGNpQm9ZVzVrYkdWRGIyNW1hWEp0SUQwZ1puVnVZM1JwYjI0b2JXOWtZV3dzSUhCaGNtRnRjeWtnZTF4dUlDQjJZWElnWTJGc2JHSmhZMnRXWVd4MVpTQTlJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tHaGhjME5zWVhOektHMXZaR0ZzTENBbmMyaHZkeTFwYm5CMWRDY3BLU0I3WEc0Z0lDQWdZMkZzYkdKaFkydFdZV3gxWlNBOUlHMXZaR0ZzTG5GMVpYSjVVMlZzWldOMGIzSW9KMmx1Y0hWMEp5a3VkbUZzZFdVN1hHNWNiaUFnSUNCcFppQW9JV05oYkd4aVlXTnJWbUZzZFdVcElIdGNiaUFnSUNBZ0lHTmhiR3hpWVdOclZtRnNkV1VnUFNBbkp6dGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQndZWEpoYlhNdVpHOXVaVVoxYm1OMGFXOXVLR05oYkd4aVlXTnJWbUZzZFdVcE8xeHVYRzRnSUdsbUlDaHdZWEpoYlhNdVkyeHZjMlZQYmtOdmJtWnBjbTBwSUh0Y2JpQWdJQ0J6ZDJWbGRFRnNaWEowTG1Oc2IzTmxLQ2s3WEc0Z0lIMWNiaUFnTHk4Z1JHbHpZV0pzWlNCallXNWpaV3dnWVc1a0lHTnZibVpwY20wZ1luVjBkRzl1SUdsbUlIUm9aU0J3WVhKaGJXVjBaWElnYVhNZ2RISjFaVnh1SUNCcFppQW9jR0Z5WVcxekxuTm9iM2RNYjJGa1pYSlBia052Ym1acGNtMHBJSHRjYmlBZ0lDQnpkMlZsZEVGc1pYSjBMbVJwYzJGaWJHVkNkWFIwYjI1ektDazdYRzRnSUgxY2JuMDdYRzVjYmk4cVhHNGdLaUFnVlhObGNpQmpiR2xqYTJWa0lHOXVJRndpUTJGdVkyVnNYQ0pjYmlBcUwxeHVkbUZ5SUdoaGJtUnNaVU5oYm1ObGJDQTlJR1oxYm1OMGFXOXVLRzF2WkdGc0xDQndZWEpoYlhNcElIdGNiaUFnTHk4Z1EyaGxZMnNnYVdZZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z1pYaHdaV04wY3lCaElIQmhjbUZ0WlhSbGNpQW9kRzhnZEhKaFkyc2dZMkZ1WTJWc0lHRmpkR2x2Ym5NcFhHNGdJSFpoY2lCbWRXNWpkR2x2YmtGelUzUnlJRDBnVTNSeWFXNW5LSEJoY21GdGN5NWtiMjVsUm5WdVkzUnBiMjRwTG5KbGNHeGhZMlVvTDF4Y2N5OW5MQ0FuSnlrN1hHNGdJSFpoY2lCbWRXNWpkR2x2YmtoaGJtUnNaWE5EWVc1alpXd2dQU0JtZFc1amRHbHZia0Z6VTNSeUxuTjFZbk4wY21sdVp5Z3dMQ0E1S1NBOVBUMGdKMloxYm1OMGFXOXVLQ2NnSmlZZ1puVnVZM1JwYjI1QmMxTjBjaTV6ZFdKemRISnBibWNvT1N3Z01UQXBJQ0U5UFNBbktTYzdYRzVjYmlBZ2FXWWdLR1oxYm1OMGFXOXVTR0Z1Wkd4bGMwTmhibU5sYkNrZ2UxeHVJQ0FnSUhCaGNtRnRjeTVrYjI1bFJuVnVZM1JwYjI0b1ptRnNjMlVwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEJoY21GdGN5NWpiRzl6WlU5dVEyRnVZMlZzS1NCN1hHNGdJQ0FnYzNkbFpYUkJiR1Z5ZEM1amJHOXpaU2dwTzF4dUlDQjlYRzU5TzF4dVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYUdGdVpHeGxRblYwZEc5dUxGeHVJQ0JvWVc1a2JHVkRiMjVtYVhKdExGeHVJQ0JvWVc1a2JHVkRZVzVqWld4Y2JuMDdYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtLCBjbGFzc05hbWUpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyAnICsgY2xhc3NOYW1lICsgJyAnKS50ZXN0KCcgJyArIGVsZW0uY2xhc3NOYW1lICsgJyAnKTtcbn07XG5cbnZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKGVsZW0sIGNsYXNzTmFtZSkge1xuICBpZiAoIWhhc0NsYXNzKGVsZW0sIGNsYXNzTmFtZSkpIHtcbiAgICBlbGVtLmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XG4gIH1cbn07XG5cbnZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW0sIGNsYXNzTmFtZSkge1xuICB2YXIgbmV3Q2xhc3MgPSAnICcgKyBlbGVtLmNsYXNzTmFtZS5yZXBsYWNlKC9bXFx0XFxyXFxuXS9nLCAnICcpICsgJyAnO1xuICBpZiAoaGFzQ2xhc3MoZWxlbSwgY2xhc3NOYW1lKSkge1xuICAgIHdoaWxlIChuZXdDbGFzcy5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgPj0gMCkge1xuICAgICAgbmV3Q2xhc3MgPSBuZXdDbGFzcy5yZXBsYWNlKCcgJyArIGNsYXNzTmFtZSArICcgJywgJyAnKTtcbiAgICB9XG4gICAgZWxlbS5jbGFzc05hbWUgPSBuZXdDbGFzcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gIH1cbn07XG5cbnZhciBlc2NhcGVIdG1sID0gZnVuY3Rpb24gZXNjYXBlSHRtbChzdHIpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKSk7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MO1xufTtcblxudmFyIF9zaG93ID0gZnVuY3Rpb24gX3Nob3coZWxlbSkge1xuICBlbGVtLnN0eWxlLm9wYWNpdHkgPSAnJztcbiAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn07XG5cbnZhciBzaG93ID0gZnVuY3Rpb24gc2hvdyhlbGVtcykge1xuICBpZiAoZWxlbXMgJiYgIWVsZW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBfc2hvdyhlbGVtcyk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7ICsraSkge1xuICAgIF9zaG93KGVsZW1zW2ldKTtcbiAgfVxufTtcblxudmFyIF9oaWRlID0gZnVuY3Rpb24gX2hpZGUoZWxlbSkge1xuICBlbGVtLnN0eWxlLm9wYWNpdHkgPSAnJztcbiAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcblxudmFyIGhpZGUgPSBmdW5jdGlvbiBoaWRlKGVsZW1zKSB7XG4gIGlmIChlbGVtcyAmJiAhZWxlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIF9oaWRlKGVsZW1zKTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgX2hpZGUoZWxlbXNbaV0pO1xuICB9XG59O1xuXG52YXIgaXNEZXNjZW5kYW50ID0gZnVuY3Rpb24gaXNEZXNjZW5kYW50KHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIG5vZGUgPSBjaGlsZC5wYXJlbnROb2RlO1xuICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgIGlmIChub2RlID09PSBwYXJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbnZhciBnZXRUb3BNYXJnaW4gPSBmdW5jdGlvbiBnZXRUb3BNYXJnaW4oZWxlbSkge1xuICBlbGVtLnN0eWxlLmxlZnQgPSAnLTk5OTlweCc7XG4gIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgdmFyIGhlaWdodCA9IGVsZW0uY2xpZW50SGVpZ2h0LFxuICAgICAgcGFkZGluZztcbiAgaWYgKHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gSUUgOFxuICAgIHBhZGRpbmcgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKGVsZW0pLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJyksIDEwKTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gcGFyc2VJbnQoZWxlbS5jdXJyZW50U3R5bGUucGFkZGluZyk7XG4gIH1cblxuICBlbGVtLnN0eWxlLmxlZnQgPSAnJztcbiAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXR1cm4gJy0nICsgcGFyc2VJbnQoKGhlaWdodCArIHBhZGRpbmcpIC8gMikgKyAncHgnO1xufTtcblxudmFyIGZhZGVJbiA9IGZ1bmN0aW9uIGZhZGVJbihlbGVtLCBpbnRlcnZhbCkge1xuICBpZiAoK2VsZW0uc3R5bGUub3BhY2l0eSA8IDEpIHtcbiAgICBpbnRlcnZhbCA9IGludGVydmFsIHx8IDE2O1xuICAgIGVsZW0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB2YXIgbGFzdCA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciB0aWNrID0gZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIGVsZW0uc3R5bGUub3BhY2l0eSA9ICtlbGVtLnN0eWxlLm9wYWNpdHkgKyAobmV3IERhdGUoKSAtIGxhc3QpIC8gMTAwO1xuICAgICAgbGFzdCA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgICBpZiAoK2VsZW0uc3R5bGUub3BhY2l0eSA8IDEpIHtcbiAgICAgICAgc2V0VGltZW91dCh0aWNrLCBpbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aWNrKCk7XG4gIH1cbiAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsgLy9mYWxsYmFjayBJRThcbn07XG5cbnZhciBmYWRlT3V0ID0gZnVuY3Rpb24gZmFkZU91dChlbGVtLCBpbnRlcnZhbCkge1xuICBpbnRlcnZhbCA9IGludGVydmFsIHx8IDE2O1xuICBlbGVtLnN0eWxlLm9wYWNpdHkgPSAxO1xuICB2YXIgbGFzdCA9ICtuZXcgRGF0ZSgpO1xuICB2YXIgdGljayA9IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgZWxlbS5zdHlsZS5vcGFjaXR5ID0gK2VsZW0uc3R5bGUub3BhY2l0eSAtIChuZXcgRGF0ZSgpIC0gbGFzdCkgLyAxMDA7XG4gICAgbGFzdCA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgaWYgKCtlbGVtLnN0eWxlLm9wYWNpdHkgPiAwKSB7XG4gICAgICBzZXRUaW1lb3V0KHRpY2ssIGludGVydmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgfTtcbiAgdGljaygpO1xufTtcblxudmFyIGZpcmVDbGljayA9IGZ1bmN0aW9uIGZpcmVDbGljayhub2RlKSB7XG4gIC8vIFRha2VuIGZyb20gaHR0cDovL3d3dy5ub25vYnRydXNpdmUuY29tLzIwMTEvMTEvMjkvcHJvZ3JhbWF0aWNhbGx5LWZpcmUtY3Jvc3Nicm93c2VyLWNsaWNrLWV2ZW50LXdpdGgtamF2YXNjcmlwdC9cbiAgLy8gVGhlbiBmaXhlZCBmb3IgdG9kYXkncyBDaHJvbWUgYnJvd3Nlci5cbiAgaWYgKHR5cGVvZiBNb3VzZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXAtdG8tZGF0ZSBhcHByb2FjaFxuICAgIHZhciBtZXZ0ID0gbmV3IE1vdXNlRXZlbnQoJ2NsaWNrJywge1xuICAgICAgdmlldzogd2luZG93LFxuICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KG1ldnQpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgLy8gRmFsbGJhY2tcbiAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gICAgZXZ0LmluaXRFdmVudCgnY2xpY2snLCBmYWxzZSwgZmFsc2UpO1xuICAgIG5vZGUuZGlzcGF0Y2hFdmVudChldnQpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KSB7XG4gICAgbm9kZS5maXJlRXZlbnQoJ29uY2xpY2snKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5vbmNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZS5vbmNsaWNrKCk7XG4gIH1cbn07XG5cbnZhciBzdG9wRXZlbnRQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uIHN0b3BFdmVudFByb3BhZ2F0aW9uKGUpIHtcbiAgLy8gSW4gcGFydGljdWxhciwgbWFrZSBzdXJlIHRoZSBzcGFjZSBiYXIgZG9lc24ndCBzY3JvbGwgdGhlIG1haW4gd2luZG93LlxuICBpZiAodHlwZW9mIGUuc3RvcFByb3BhZ2F0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH0gZWxzZSBpZiAod2luZG93LmV2ZW50ICYmIHdpbmRvdy5ldmVudC5oYXNPd25Qcm9wZXJ0eSgnY2FuY2VsQnViYmxlJykpIHtcbiAgICB3aW5kb3cuZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgfVxufTtcblxuZXhwb3J0cy5oYXNDbGFzcyA9IGhhc0NsYXNzO1xuZXhwb3J0cy5hZGRDbGFzcyA9IGFkZENsYXNzO1xuZXhwb3J0cy5yZW1vdmVDbGFzcyA9IHJlbW92ZUNsYXNzO1xuZXhwb3J0cy5lc2NhcGVIdG1sID0gZXNjYXBlSHRtbDtcbmV4cG9ydHMuX3Nob3cgPSBfc2hvdztcbmV4cG9ydHMuc2hvdyA9IHNob3c7XG5leHBvcnRzLl9oaWRlID0gX2hpZGU7XG5leHBvcnRzLmhpZGUgPSBoaWRlO1xuZXhwb3J0cy5pc0Rlc2NlbmRhbnQgPSBpc0Rlc2NlbmRhbnQ7XG5leHBvcnRzLmdldFRvcE1hcmdpbiA9IGdldFRvcE1hcmdpbjtcbmV4cG9ydHMuZmFkZUluID0gZmFkZUluO1xuZXhwb3J0cy5mYWRlT3V0ID0gZmFkZU91dDtcbmV4cG9ydHMuZmlyZUNsaWNrID0gZmlyZUNsaWNrO1xuZXhwb3J0cy5zdG9wRXZlbnRQcm9wYWdhdGlvbiA9IHN0b3BFdmVudFByb3BhZ2F0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5RGIyUmxMM04zWldWMFlXeGxjblF2WkdWMkwyMXZaSFZzWlhNdmFHRnVaR3hsTFdSdmJTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRWxCUVVrc1VVRkJVU3hIUVVGSExGTkJRVmdzVVVGQlVTeERRVUZaTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVN1FVRkRka01zVTBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjc1UwRkJVeXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0RFFVTXpSU3hEUVVGRE96dEJRVVZHTEVsQlFVa3NVVUZCVVN4SFFVRkhMRk5CUVZnc1VVRkJVU3hEUVVGWkxFbEJRVWtzUlVGQlJTeFRRVUZUTEVWQlFVVTdRVUZEZGtNc1RVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRVZCUVVVN1FVRkRPVUlzVVVGQlNTeERRVUZETEZOQlFWTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1UwRkJVeXhEUVVGRE8wZEJRMjVETzBOQlEwWXNRMEZCUXpzN1FVRkZSaXhKUVVGSkxGZEJRVmNzUjBGQlJ5eFRRVUZrTEZkQlFWY3NRMEZCV1N4SlFVRkpMRVZCUVVVc1UwRkJVeXhGUVVGRk8wRkJRekZETEUxQlFVa3NVVUZCVVN4SFFVRkhMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRVZCUVVVc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEzQkZMRTFCUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNSVUZCUlR0QlFVTTNRaXhYUVVGUExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4SFFVRkhMRk5CUVZNc1IwRkJSeXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdRVUZEYmtRc1kwRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4SFFVRkhMRk5CUVZNc1IwRkJSeXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdTMEZEZWtRN1FVRkRSQ3hSUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBkQlEzSkVPME5CUTBZc1EwRkJRenM3UVVGRlJpeEpRVUZKTEZWQlFWVXNSMEZCUnl4VFFVRmlMRlZCUVZVc1EwRkJXU3hIUVVGSExFVkJRVVU3UVVGRE4wSXNUVUZCU1N4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTjRReXhMUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UXl4VFFVRlBMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU03UTBGRGRFSXNRMEZCUXpzN1FVRkZSaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eFRRVUZTTEV0QlFVc3NRMEZCV1N4SlFVRkpMRVZCUVVVN1FVRkRla0lzVFVGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM2hDTEUxQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF6dERRVU01UWl4RFFVRkRPenRCUVVWR0xFbEJRVWtzU1VGQlNTeEhRVUZITEZOQlFWQXNTVUZCU1N4RFFVRlpMRXRCUVVzc1JVRkJSVHRCUVVONlFpeE5RVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRE1VSXNWMEZCVHl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UjBGRGNrSTdRVUZEUkN4UFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJUdEJRVU55UXl4VFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdSMEZEYWtJN1EwRkRSaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NTMEZCU3l4SFFVRkhMRk5CUVZJc1MwRkJTeXhEUVVGWkxFbEJRVWtzUlVGQlJUdEJRVU42UWl4TlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEZUVJc1RVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRPME5CUXpkQ0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4SlFVRkpMRWRCUVVjc1UwRkJVQ3hKUVVGSkxFTkJRVmtzUzBGQlN5eEZRVUZGTzBGQlEzcENMRTFCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTXhRaXhYUVVGUExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SFFVTnlRanRCUVVORUxFOUJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZPMEZCUTNKRExGTkJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRIUVVOcVFqdERRVU5HTEVOQlFVTTdPMEZCUlVZc1NVRkJTU3haUVVGWkxFZEJRVWNzVTBGQlppeFpRVUZaTEVOQlFWa3NUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVONlF5eE5RVUZKTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wRkJRelZDTEZOQlFVOHNTVUZCU1N4TFFVRkxMRWxCUVVrc1JVRkJSVHRCUVVOd1FpeFJRVUZKTEVsQlFVa3NTMEZCU3l4TlFVRk5MRVZCUVVVN1FVRkRia0lzWVVGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWWp0QlFVTkVMRkZCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzBkQlEzaENPMEZCUTBRc1UwRkJUeXhMUVVGTExFTkJRVU03UTBGRFpDeERRVUZET3p0QlFVVkdMRWxCUVVrc1dVRkJXU3hIUVVGSExGTkJRV1lzV1VGQldTeERRVUZaTEVsQlFVa3NSVUZCUlR0QlFVTm9ReXhOUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkROVUlzVFVGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRE96dEJRVVUzUWl4TlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldUdE5RVU14UWl4UFFVRlBMRU5CUVVNN1FVRkRXaXhOUVVGSkxFOUJRVThzWjBKQlFXZENMRXRCUVVzc1YwRkJWeXhGUVVGRk96dEJRVU16UXl4WFFVRlBMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBkQlEyaEdMRTFCUVUwN1FVRkRUQ3hYUVVGUExFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UjBGREwwTTdPMEZCUlVRc1RVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKQ0xFMUJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVNMVFpeFRRVUZSTEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZCTEVkQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRk8wTkJRM2hFTEVOQlFVTTdPMEZCUlVZc1NVRkJTU3hOUVVGTkxFZEJRVWNzVTBGQlZDeE5RVUZOTEVOQlFWa3NTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSVHRCUVVOd1F5eE5RVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlF6TkNMRmxCUVZFc1IwRkJSeXhSUVVGUkxFbEJRVWtzUlVGQlJTeERRVUZETzBGQlF6RkNMRkZCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjJRaXhSUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkROMElzVVVGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRM1pDTEZGQlFVa3NTVUZCU1N4SFFVRkhMRk5CUVZBc1NVRkJTU3hIUVVGak8wRkJRM0JDTEZWQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhKUVVGSkxFbEJRVWtzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUVN4SFFVRkpMRWRCUVVjc1EwRkJRenRCUVVOeVJTeFZRVUZKTEVkQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRE96dEJRVVZ1UWl4VlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUXpOQ0xHdENRVUZWTEVOQlFVTXNTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wOUJRelZDTzB0QlEwWXNRMEZCUXp0QlFVTkdMRkZCUVVrc1JVRkJSU3hEUVVGRE8wZEJRMUk3UVVGRFJDeE5RVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU03UTBGRE9VSXNRMEZCUXpzN1FVRkZSaXhKUVVGSkxFOUJRVThzUjBGQlJ5eFRRVUZXTEU5QlFVOHNRMEZCV1N4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRk8wRkJRM0pETEZWQlFWRXNSMEZCUnl4UlFVRlJMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRekZDTEUxQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUWl4TlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZEZGtJc1RVRkJTU3hKUVVGSkxFZEJRVWNzVTBGQlVDeEpRVUZKTEVkQlFXTTdRVUZEY0VJc1VVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NTVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGQkxFZEJRVWtzUjBGQlJ5eERRVUZETzBGQlEzSkZMRkZCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTTdPMEZCUlc1Q0xGRkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFVkJRVVU3UVVGRE0wSXNaMEpCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdTMEZETlVJc1RVRkJUVHRCUVVOTUxGVkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRenRMUVVNM1FqdEhRVU5HTEVOQlFVTTdRVUZEUml4TlFVRkpMRVZCUVVVc1EwRkJRenREUVVOU0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4VFFVRlRMRWRCUVVjc1UwRkJXaXhUUVVGVExFTkJRVmtzU1VGQlNTeEZRVUZGT3pzN1FVRkhOMElzVFVGQlNTeFBRVUZQTEZWQlFWVXNTMEZCU3l4VlFVRlZMRVZCUVVVN08wRkJSWEJETEZGQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJUdEJRVU5xUXl4VlFVRkpMRVZCUVVVc1RVRkJUVHRCUVVOYUxHRkJRVThzUlVGQlJTeExRVUZMTzBGQlEyUXNaMEpCUVZVc1JVRkJSU3hKUVVGSk8wdEJRMnBDTEVOQlFVTXNRMEZCUXp0QlFVTklMRkZCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZETVVJc1RVRkJUU3hKUVVGTExGRkJRVkVzUTBGQlF5eFhRVUZYTEVWQlFVYzdPMEZCUldwRExGRkJRVWtzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRE9VTXNUMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNKRExGRkJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1IwRkRla0lzVFVGQlRTeEpRVUZKTEZGQlFWRXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdEJRVU55UXl4UlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZGTzBkQlF6VkNMRTFCUVUwc1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEV0QlFVc3NWVUZCVlN4RlFVRkhPMEZCUXpsRExGRkJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0SFFVTm9RanREUVVOR0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4dlFrRkJiMElzUjBGQlJ5eFRRVUYyUWl4dlFrRkJiMElzUTBGQldTeERRVUZETEVWQlFVVTdPMEZCUlhKRExFMUJRVWtzVDBGQlR5eERRVUZETEVOQlFVTXNaVUZCWlN4TFFVRkxMRlZCUVZVc1JVRkJSVHRCUVVNelF5eExRVUZETEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNN1FVRkRjRUlzUzBGQlF5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMGRCUTNCQ0xFMUJRVTBzU1VGQlNTeE5RVUZOTEVOQlFVTXNTMEZCU3l4SlFVRkpMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRkZPMEZCUTNSRkxGVkJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJRenRIUVVOc1F6dERRVU5HTEVOQlFVTTdPMUZCUjBFc1VVRkJVU3hIUVVGU0xGRkJRVkU3VVVGQlJTeFJRVUZSTEVkQlFWSXNVVUZCVVR0UlFVRkZMRmRCUVZjc1IwRkJXQ3hYUVVGWE8xRkJReTlDTEZWQlFWVXNSMEZCVml4VlFVRlZPMUZCUTFZc1MwRkJTeXhIUVVGTUxFdEJRVXM3VVVGQlJTeEpRVUZKTEVkQlFVb3NTVUZCU1R0UlFVRkZMRXRCUVVzc1IwRkJUQ3hMUVVGTE8xRkJRVVVzU1VGQlNTeEhRVUZLTEVsQlFVazdVVUZEZUVJc1dVRkJXU3hIUVVGYUxGbEJRVms3VVVGRFdpeFpRVUZaTEVkQlFWb3NXVUZCV1R0UlFVTmFMRTFCUVUwc1IwRkJUaXhOUVVGTk8xRkJRVVVzVDBGQlR5eEhRVUZRTEU5QlFVODdVVUZEWml4VFFVRlRMRWRCUVZRc1UwRkJVenRSUVVOVUxHOUNRVUZ2UWl4SFFVRndRaXh2UWtGQmIwSWlMQ0ptYVd4bElqb2lMME52WkdVdmMzZGxaWFJoYkdWeWRDOWtaWFl2Ylc5a2RXeGxjeTlvWVc1a2JHVXRaRzl0TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdoaGMwTnNZWE56SUQwZ1puVnVZM1JwYjI0b1pXeGxiU3dnWTJ4aGMzTk9ZVzFsS1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnVW1WblJYaHdLQ2NnSnlBcklHTnNZWE56VG1GdFpTQXJJQ2NnSnlrdWRHVnpkQ2duSUNjZ0t5QmxiR1Z0TG1Oc1lYTnpUbUZ0WlNBcklDY2dKeWs3WEc1OU8xeHVYRzUyWVhJZ1lXUmtRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpaGxiR1Z0TENCamJHRnpjMDVoYldVcElIdGNiaUFnYVdZZ0tDRm9ZWE5EYkdGemN5aGxiR1Z0TENCamJHRnpjMDVoYldVcEtTQjdYRzRnSUNBZ1pXeGxiUzVqYkdGemMwNWhiV1VnS3owZ0p5QW5JQ3NnWTJ4aGMzTk9ZVzFsTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnY21WdGIzWmxRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpaGxiR1Z0TENCamJHRnpjMDVoYldVcElIdGNiaUFnZG1GeUlHNWxkME5zWVhOeklEMGdKeUFuSUNzZ1pXeGxiUzVqYkdGemMwNWhiV1V1Y21Wd2JHRmpaU2d2VzF4Y2RGeGNjbHhjYmwwdlp5d2dKeUFuS1NBcklDY2dKenRjYmlBZ2FXWWdLR2hoYzBOc1lYTnpLR1ZzWlcwc0lHTnNZWE56VG1GdFpTa3BJSHRjYmlBZ0lDQjNhR2xzWlNBb2JtVjNRMnhoYzNNdWFXNWtaWGhQWmlnbklDY2dLeUJqYkdGemMwNWhiV1VnS3lBbklDY3BJRDQ5SURBcElIdGNiaUFnSUNBZ0lHNWxkME5zWVhOeklEMGdibVYzUTJ4aGMzTXVjbVZ3YkdGalpTZ25JQ2NnS3lCamJHRnpjMDVoYldVZ0t5QW5JQ2NzSUNjZ0p5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc1pXMHVZMnhoYzNOT1lXMWxJRDBnYm1WM1EyeGhjM011Y21Wd2JHRmpaU2d2WGx4Y2N5dDhYRnh6S3lRdlp5d2dKeWNwTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnWlhOallYQmxTSFJ0YkNBOUlHWjFibU4wYVc5dUtITjBjaWtnZTF4dUlDQjJZWElnWkdsMklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lHUnBkaTVoY0hCbGJtUkRhR2xzWkNoa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2h6ZEhJcEtUdGNiaUFnY21WMGRYSnVJR1JwZGk1cGJtNWxja2hVVFV3N1hHNTlPMXh1WEc1MllYSWdYM05vYjNjZ1BTQm1kVzVqZEdsdmJpaGxiR1Z0S1NCN1hHNGdJR1ZzWlcwdWMzUjViR1V1YjNCaFkybDBlU0E5SUNjbk8xeHVJQ0JsYkdWdExuTjBlV3hsTG1ScGMzQnNZWGtnUFNBbllteHZZMnNuTzF4dWZUdGNibHh1ZG1GeUlITm9iM2NnUFNCbWRXNWpkR2x2YmlobGJHVnRjeWtnZTF4dUlDQnBaaUFvWld4bGJYTWdKaVlnSVdWc1pXMXpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZmMyaHZkeWhsYkdWdGN5azdYRzRnSUgxY2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JsYkdWdGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJRjl6YUc5M0tHVnNaVzF6VzJsZEtUdGNiaUFnZlZ4dWZUdGNibHh1ZG1GeUlGOW9hV1JsSUQwZ1puVnVZM1JwYjI0b1pXeGxiU2tnZTF4dUlDQmxiR1Z0TG5OMGVXeGxMbTl3WVdOcGRIa2dQU0FuSnp0Y2JpQWdaV3hsYlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjI1dmJtVW5PMXh1ZlR0Y2JseHVkbUZ5SUdocFpHVWdQU0JtZFc1amRHbHZiaWhsYkdWdGN5a2dlMXh1SUNCcFppQW9aV3hsYlhNZ0ppWWdJV1ZzWlcxekxteGxibWQwYUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmYUdsa1pTaGxiR1Z0Y3lrN1hHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmxiR1Z0Y3k1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lGOW9hV1JsS0dWc1pXMXpXMmxkS1R0Y2JpQWdmVnh1ZlR0Y2JseHVkbUZ5SUdselJHVnpZMlZ1WkdGdWRDQTlJR1oxYm1OMGFXOXVLSEJoY21WdWRDd2dZMmhwYkdRcElIdGNiaUFnZG1GeUlHNXZaR1VnUFNCamFHbHNaQzV3WVhKbGJuUk9iMlJsTzF4dUlDQjNhR2xzWlNBb2JtOWtaU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJR2xtSUNodWIyUmxJRDA5UFNCd1lYSmxiblFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0J1YjJSbElEMGdibTlrWlM1d1lYSmxiblJPYjJSbE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4wN1hHNWNiblpoY2lCblpYUlViM0JOWVhKbmFXNGdQU0JtZFc1amRHbHZiaWhsYkdWdEtTQjdYRzRnSUdWc1pXMHVjM1I1YkdVdWJHVm1kQ0E5SUNjdE9UazVPWEI0Snp0Y2JpQWdaV3hsYlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjJKc2IyTnJKenRjYmx4dUlDQjJZWElnYUdWcFoyaDBJRDBnWld4bGJTNWpiR2xsYm5SSVpXbG5hSFFzWEc0Z0lDQWdJQ0J3WVdSa2FXNW5PMXh1SUNCcFppQW9kSGx3Wlc5bUlHZGxkRU52YlhCMWRHVmtVM1I1YkdVZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJcElIc2dMeThnU1VVZ09GeHVJQ0FnSUhCaFpHUnBibWNnUFNCd1lYSnpaVWx1ZENoblpYUkRiMjF3ZFhSbFpGTjBlV3hsS0dWc1pXMHBMbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVW9KM0JoWkdScGJtY3RkRzl3Snlrc0lERXdLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J3WVdSa2FXNW5JRDBnY0dGeWMyVkpiblFvWld4bGJTNWpkWEp5Wlc1MFUzUjViR1V1Y0dGa1pHbHVaeWs3WEc0Z0lIMWNibHh1SUNCbGJHVnRMbk4wZVd4bExteGxablFnUFNBbkp6dGNiaUFnWld4bGJTNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0oyNXZibVVuTzF4dUlDQnlaWFIxY200Z0tDY3RKeUFySUhCaGNuTmxTVzUwS0Nob1pXbG5hSFFnS3lCd1lXUmthVzVuS1NBdklESXBJQ3NnSjNCNEp5azdYRzU5TzF4dVhHNTJZWElnWm1Ga1pVbHVJRDBnWm5WdVkzUnBiMjRvWld4bGJTd2dhVzUwWlhKMllXd3BJSHRjYmlBZ2FXWWdLQ3RsYkdWdExuTjBlV3hsTG05d1lXTnBkSGtnUENBeEtTQjdYRzRnSUNBZ2FXNTBaWEoyWVd3Z1BTQnBiblJsY25aaGJDQjhmQ0F4Tmp0Y2JpQWdJQ0JsYkdWdExuTjBlV3hsTG05d1lXTnBkSGtnUFNBd08xeHVJQ0FnSUdWc1pXMHVjM1I1YkdVdVpHbHpjR3hoZVNBOUlDZGliRzlqYXljN1hHNGdJQ0FnZG1GeUlHeGhjM1FnUFNBcmJtVjNJRVJoZEdVb0tUdGNiaUFnSUNCMllYSWdkR2xqYXlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdaV3hsYlM1emRIbHNaUzV2Y0dGamFYUjVJRDBnSzJWc1pXMHVjM1I1YkdVdWIzQmhZMmwwZVNBcklDaHVaWGNnUkdGMFpTZ3BJQzBnYkdGemRDa2dMeUF4TURBN1hHNGdJQ0FnSUNCc1lYTjBJRDBnSzI1bGR5QkVZWFJsS0NrN1hHNWNiaUFnSUNBZ0lHbG1JQ2dyWld4bGJTNXpkSGxzWlM1dmNHRmphWFI1SUR3Z01Ta2dlMXh1SUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0hScFkyc3NJR2x1ZEdWeWRtRnNLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lIUnBZMnNvS1R0Y2JpQWdmVnh1SUNCbGJHVnRMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ZbXh2WTJzbk95QXZMMlpoYkd4aVlXTnJJRWxGT0Z4dWZUdGNibHh1ZG1GeUlHWmhaR1ZQZFhRZ1BTQm1kVzVqZEdsdmJpaGxiR1Z0TENCcGJuUmxjblpoYkNrZ2UxeHVJQ0JwYm5SbGNuWmhiQ0E5SUdsdWRHVnlkbUZzSUh4OElERTJPMXh1SUNCbGJHVnRMbk4wZVd4bExtOXdZV05wZEhrZ1BTQXhPMXh1SUNCMllYSWdiR0Z6ZENBOUlDdHVaWGNnUkdGMFpTZ3BPMXh1SUNCMllYSWdkR2xqYXlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHVnNaVzB1YzNSNWJHVXViM0JoWTJsMGVTQTlJQ3RsYkdWdExuTjBlV3hsTG05d1lXTnBkSGtnTFNBb2JtVjNJRVJoZEdVb0tTQXRJR3hoYzNRcElDOGdNVEF3TzF4dUlDQWdJR3hoYzNRZ1BTQXJibVYzSUVSaGRHVW9LVHRjYmx4dUlDQWdJR2xtSUNnclpXeGxiUzV6ZEhsc1pTNXZjR0ZqYVhSNUlENGdNQ2tnZTF4dUlDQWdJQ0FnYzJWMFZHbHRaVzkxZENoMGFXTnJMQ0JwYm5SbGNuWmhiQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHVnNaVzB1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2R1YjI1bEp6dGNiaUFnSUNCOVhHNGdJSDA3WEc0Z0lIUnBZMnNvS1R0Y2JuMDdYRzVjYm5aaGNpQm1hWEpsUTJ4cFkyc2dQU0JtZFc1amRHbHZiaWh1YjJSbEtTQjdYRzRnSUM4dklGUmhhMlZ1SUdaeWIyMGdhSFIwY0RvdkwzZDNkeTV1YjI1dlluUnlkWE5wZG1VdVkyOXRMekl3TVRFdk1URXZNamt2Y0hKdlozSmhiV0YwYVdOaGJHeDVMV1pwY21VdFkzSnZjM05pY205M2MyVnlMV05zYVdOckxXVjJaVzUwTFhkcGRHZ3RhbUYyWVhOamNtbHdkQzljYmlBZ0x5OGdWR2hsYmlCbWFYaGxaQ0JtYjNJZ2RHOWtZWGtuY3lCRGFISnZiV1VnWW5KdmQzTmxjaTVjYmlBZ2FXWWdLSFI1Y0dWdlppQk5iM1Z6WlVWMlpXNTBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0x5OGdWWEF0ZEc4dFpHRjBaU0JoY0hCeWIyRmphRnh1SUNBZ0lIWmhjaUJ0WlhaMElEMGdibVYzSUUxdmRYTmxSWFpsYm5Rb0oyTnNhV05ySnl3Z2UxeHVJQ0FnSUNBZ2RtbGxkem9nZDJsdVpHOTNMRnh1SUNBZ0lDQWdZblZpWW14bGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNCallXNWpaV3hoWW14bE9pQjBjblZsWEc0Z0lDQWdmU2s3WEc0Z0lDQWdibTlrWlM1a2FYTndZWFJqYUVWMlpXNTBLRzFsZG5RcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0NCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGZG1WdWRDQXBJSHRjYmlBZ0lDQXZMeUJHWVd4c1ltRmphMXh1SUNBZ0lIWmhjaUJsZG5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmRtVnVkQ2duVFc5MWMyVkZkbVZ1ZEhNbktUdGNiaUFnSUNCbGRuUXVhVzVwZEVWMlpXNTBLQ2RqYkdsamF5Y3NJR1poYkhObExDQm1ZV3h6WlNrN1hHNGdJQ0FnYm05a1pTNWthWE53WVhSamFFVjJaVzUwS0dWMmRDazdYRzRnSUgwZ1pXeHpaU0JwWmlBb1pHOWpkVzFsYm5RdVkzSmxZWFJsUlhabGJuUlBZbXBsWTNRcElIdGNiaUFnSUNCdWIyUmxMbVpwY21WRmRtVnVkQ2duYjI1amJHbGpheWNwSUR0Y2JpQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdibTlrWlM1dmJtTnNhV05ySUQwOVBTQW5ablZ1WTNScGIyNG5JQ2tnZTF4dUlDQWdJRzV2WkdVdWIyNWpiR2xqYXlncE8xeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ2MzUnZjRVYyWlc1MFVISnZjR0ZuWVhScGIyNGdQU0JtZFc1amRHbHZiaWhsS1NCN1hHNGdJQzh2SUVsdUlIQmhjblJwWTNWc1lYSXNJRzFoYTJVZ2MzVnlaU0IwYUdVZ2MzQmhZMlVnWW1GeUlHUnZaWE51SjNRZ2MyTnliMnhzSUhSb1pTQnRZV2x1SUhkcGJtUnZkeTVjYmlBZ2FXWWdLSFI1Y0dWdlppQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUdVdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLSGRwYm1SdmR5NWxkbVZ1ZENBbUppQjNhVzVrYjNjdVpYWmxiblF1YUdGelQzZHVVSEp2Y0dWeWRIa29KMk5oYm1ObGJFSjFZbUpzWlNjcEtTQjdYRzRnSUNBZ2QybHVaRzkzTG1WMlpXNTBMbU5oYm1ObGJFSjFZbUpzWlNBOUlIUnlkV1U3WEc0Z0lIMWNibjA3WEc1Y2JtVjRjRzl5ZENCN0lGeHVJQ0JvWVhORGJHRnpjeXdnWVdSa1EyeGhjM01zSUhKbGJXOTJaVU5zWVhOekxDQmNiaUFnWlhOallYQmxTSFJ0YkN3Z1hHNGdJRjl6YUc5M0xDQnphRzkzTENCZmFHbGtaU3dnYUdsa1pTd2dYRzRnSUdselJHVnpZMlZ1WkdGdWRDd2dYRzRnSUdkbGRGUnZjRTFoY21kcGJpeGNiaUFnWm1Ga1pVbHVMQ0JtWVdSbFQzVjBMRnh1SUNCbWFYSmxRMnhwWTJzc1hHNGdJSE4wYjNCRmRtVnVkRkJ5YjNCaFoyRjBhVzl1WEc1OU8xeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9oYW5kbGVEb20gPSByZXF1aXJlKCcuL2hhbmRsZS1kb20nKTtcblxudmFyIF9oYW5kbGVTd2FsRG9tID0gcmVxdWlyZSgnLi9oYW5kbGUtc3dhbC1kb20nKTtcblxudmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50LCBwYXJhbXMsIG1vZGFsKSB7XG4gIHZhciBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZSB8fCBlLndoaWNoO1xuXG4gIHZhciAkb2tCdXR0b24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCdidXR0b24uY29uZmlybScpO1xuICB2YXIgJGNhbmNlbEJ1dHRvbiA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5jYW5jZWwnKTtcbiAgdmFyICRtb2RhbEJ1dHRvbnMgPSBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b25bdGFiaW5kZXhdJyk7XG5cbiAgaWYgKFs5LCAxMywgMzIsIDI3XS5pbmRleE9mKGtleUNvZGUpID09PSAtMSkge1xuICAgIC8vIERvbid0IGRvIHdvcmsgb24ga2V5cyB3ZSBkb24ndCBjYXJlIGFib3V0LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciAkdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuICB2YXIgYnRuSW5kZXggPSAtMTsgLy8gRmluZCB0aGUgYnV0dG9uIC0gbm90ZSwgdGhpcyBpcyBhIG5vZGVsaXN0LCBub3QgYW4gYXJyYXkuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgJG1vZGFsQnV0dG9ucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICgkdGFyZ2V0RWxlbWVudCA9PT0gJG1vZGFsQnV0dG9uc1tpXSkge1xuICAgICAgYnRuSW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleUNvZGUgPT09IDkpIHtcbiAgICAvLyBUQUJcbiAgICBpZiAoYnRuSW5kZXggPT09IC0xKSB7XG4gICAgICAvLyBObyBidXR0b24gZm9jdXNlZC4gSnVtcCB0byB0aGUgY29uZmlybSBidXR0b24uXG4gICAgICAkdGFyZ2V0RWxlbWVudCA9ICRva0J1dHRvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3ljbGUgdG8gdGhlIG5leHQgYnV0dG9uXG4gICAgICBpZiAoYnRuSW5kZXggPT09ICRtb2RhbEJ1dHRvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAkdGFyZ2V0RWxlbWVudCA9ICRtb2RhbEJ1dHRvbnNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdGFyZ2V0RWxlbWVudCA9ICRtb2RhbEJ1dHRvbnNbYnRuSW5kZXggKyAxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAoMCwgX2hhbmRsZURvbS5zdG9wRXZlbnRQcm9wYWdhdGlvbikoZSk7XG4gICAgJHRhcmdldEVsZW1lbnQuZm9jdXMoKTtcblxuICAgIGlmIChwYXJhbXMuY29uZmlybUJ1dHRvbkNvbG9yKSB7XG4gICAgICAoMCwgX2hhbmRsZVN3YWxEb20uc2V0Rm9jdXNTdHlsZSkoJHRhcmdldEVsZW1lbnQsIHBhcmFtcy5jb25maXJtQnV0dG9uQ29sb3IpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGlmICgkdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAgICR0YXJnZXRFbGVtZW50ID0gJG9rQnV0dG9uO1xuICAgICAgICAkb2tCdXR0b24uZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJ0bkluZGV4ID09PSAtMSkge1xuICAgICAgICAvLyBFTlRFUi9TUEFDRSBjbGlja2VkIG91dHNpZGUgb2YgYSBidXR0b24uXG4gICAgICAgICR0YXJnZXRFbGVtZW50ID0gJG9rQnV0dG9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRG8gbm90aGluZyAtIGxldCB0aGUgYnJvd3NlciBoYW5kbGUgaXQuXG4gICAgICAgICR0YXJnZXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gMjcgJiYgcGFyYW1zLmFsbG93RXNjYXBlS2V5ID09PSB0cnVlKSB7XG4gICAgICAkdGFyZ2V0RWxlbWVudCA9ICRjYW5jZWxCdXR0b247XG4gICAgICAoMCwgX2hhbmRsZURvbS5maXJlQ2xpY2spKCR0YXJnZXRFbGVtZW50LCBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgLSBsZXQgdGhlIGJyb3dzZXIgaGFuZGxlIGl0LlxuICAgICAgJHRhcmdldEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBoYW5kbGVLZXlEb3duO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlEYjJSbEwzTjNaV1YwWVd4bGNuUXZaR1YyTDIxdlpIVnNaWE12YUdGdVpHeGxMV3RsZVM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3ZVVKQlFXZEVMR05CUVdNN096WkNRVU5vUXl4dFFrRkJiVUk3TzBGQlIycEVMRWxCUVVrc1lVRkJZU3hIUVVGSExGTkJRV2hDTEdGQlFXRXNRMEZCV1N4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU5xUkN4TlFVRkpMRU5CUVVNc1IwRkJSeXhMUVVGTExFbEJRVWtzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTTVRaXhOUVVGSkxFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU03TzBGQlJXNURMRTFCUVVrc1UwRkJVeXhIUVVGUExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEJRVU14UkN4TlFVRkpMR0ZCUVdFc1IwRkJSeXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMEZCUTNwRUxFMUJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE96dEJRVWN2UkN4TlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPenRCUVVVelF5eFhRVUZQTzBkQlExSTdPMEZCUlVRc1RVRkJTU3hqUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRE96dEJRVVU1UXl4TlFVRkpMRkZCUVZFc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5zUWl4UFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NZVUZCWVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU0zUXl4UlFVRkpMR05CUVdNc1MwRkJTeXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEZGtNc1kwRkJVU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5pTEZsQlFVMDdTMEZEVUR0SFFVTkdPenRCUVVWRUxFMUJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTXNSVUZCUlRzN1FVRkZha0lzVVVGQlNTeFJRVUZSTEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN08wRkJSVzVDTEc5Q1FVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRE8wdEJRelZDTEUxQlFVMDdPMEZCUlV3c1ZVRkJTU3hSUVVGUkxFdEJRVXNzWVVGQllTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1FVRkRla01zYzBKQlFXTXNSMEZCUnl4aFFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VDBGRGJrTXNUVUZCVFR0QlFVTk1MSE5DUVVGakxFZEJRVWNzWVVGQllTeERRVUZETEZGQlFWRXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRQUVVNNVF6dExRVU5HT3p0QlFVVkVMSGxEUVVGeFFpeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRRaXhyUWtGQll5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPenRCUVVWMlFpeFJRVUZKTEUxQlFVMHNRMEZCUXl4clFrRkJhMElzUlVGQlJUdEJRVU0zUWl4M1EwRkJZeXhqUVVGakxFVkJRVVVzVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03UzBGRE1VUTdSMEZEUml4TlFVRk5PMEZCUTB3c1VVRkJTU3hQUVVGUExFdEJRVXNzUlVGQlJTeEZRVUZGTzBGQlEyeENMRlZCUVVrc1kwRkJZeXhEUVVGRExFOUJRVThzUzBGQlN5eFBRVUZQTEVWQlFVVTdRVUZEZEVNc2MwSkJRV01zUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZETTBJc2FVSkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UFFVTnVRanM3UVVGRlJDeFZRVUZKTEZGQlFWRXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSVHM3UVVGRmJrSXNjMEpCUVdNc1IwRkJSeXhUUVVGVExFTkJRVU03VDBGRE5VSXNUVUZCVFRzN1FVRkZUQ3h6UWtGQll5eEhRVUZITEZOQlFWTXNRMEZCUXp0UFFVTTFRanRMUVVOR0xFMUJRVTBzU1VGQlNTeFBRVUZQTEV0QlFVc3NSVUZCUlN4SlFVRkpMRTFCUVUwc1EwRkJReXhqUVVGakxFdEJRVXNzU1VGQlNTeEZRVUZGTzBGQlF6TkVMRzlDUVVGakxFZEJRVWNzWVVGQllTeERRVUZETzBGQlF5OUNMR2REUVVGVkxHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTTVRaXhOUVVGTk96dEJRVVZNTEc5Q1FVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRE8wdEJRelZDTzBkQlEwWTdRMEZEUml4RFFVRkRPenR4UWtGRllTeGhRVUZoSWl3aVptbHNaU0k2SWk5RGIyUmxMM04zWldWMFlXeGxjblF2WkdWMkwyMXZaSFZzWlhNdmFHRnVaR3hsTFd0bGVTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUhOMGIzQkZkbVZ1ZEZCeWIzQmhaMkYwYVc5dUxDQm1hWEpsUTJ4cFkyc2dmU0JtY205dElDY3VMMmhoYm1Sc1pTMWtiMjBuTzF4dWFXMXdiM0owSUhzZ2MyVjBSbTlqZFhOVGRIbHNaU0I5SUdaeWIyMGdKeTR2YUdGdVpHeGxMWE4zWVd3dFpHOXRKenRjYmx4dVhHNTJZWElnYUdGdVpHeGxTMlY1Ukc5M2JpQTlJR1oxYm1OMGFXOXVLR1YyWlc1MExDQndZWEpoYlhNc0lHMXZaR0ZzS1NCN1hHNGdJSFpoY2lCbElEMGdaWFpsYm5RZ2ZId2dkMmx1Wkc5M0xtVjJaVzUwTzF4dUlDQjJZWElnYTJWNVEyOWtaU0E5SUdVdWEyVjVRMjlrWlNCOGZDQmxMbmRvYVdOb08xeHVYRzRnSUhaaGNpQWtiMnRDZFhSMGIyNGdJQ0FnSUQwZ2JXOWtZV3d1Y1hWbGNubFRaV3hsWTNSdmNpZ25ZblYwZEc5dUxtTnZibVpwY20wbktUdGNiaUFnZG1GeUlDUmpZVzVqWld4Q2RYUjBiMjRnUFNCdGIyUmhiQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZGlkWFIwYjI0dVkyRnVZMlZzSnlrN1hHNGdJSFpoY2lBa2JXOWtZV3hDZFhSMGIyNXpJRDBnYlc5a1lXd3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25ZblYwZEc5dVczUmhZbWx1WkdWNFhTY3BPMXh1WEc1Y2JpQWdhV1lnS0ZzNUxDQXhNeXdnTXpJc0lESTNYUzVwYm1SbGVFOW1LR3RsZVVOdlpHVXBJRDA5UFNBdE1Ta2dlMXh1SUNBZ0lDOHZJRVJ2YmlkMElHUnZJSGR2Y21zZ2IyNGdhMlY1Y3lCM1pTQmtiMjRuZENCallYSmxJR0ZpYjNWMExseHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVYRzRnSUhaaGNpQWtkR0Z5WjJWMFJXeGxiV1Z1ZENBOUlHVXVkR0Z5WjJWMElIeDhJR1V1YzNKalJXeGxiV1Z1ZER0Y2JseHVJQ0IyWVhJZ1luUnVTVzVrWlhnZ1BTQXRNVHNnTHk4Z1JtbHVaQ0IwYUdVZ1luVjBkRzl1SUMwZ2JtOTBaU3dnZEdocGN5QnBjeUJoSUc1dlpHVnNhWE4wTENCdWIzUWdZVzRnWVhKeVlYa3VYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z0pHMXZaR0ZzUW5WMGRHOXVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDZ2tkR0Z5WjJWMFJXeGxiV1Z1ZENBOVBUMGdKRzF2WkdGc1FuVjBkRzl1YzF0cFhTa2dlMXh1SUNBZ0lDQWdZblJ1U1c1a1pYZ2dQU0JwTzF4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdhV1lnS0d0bGVVTnZaR1VnUFQwOUlEa3BJSHRjYmlBZ0lDQXZMeUJVUVVKY2JpQWdJQ0JwWmlBb1luUnVTVzVrWlhnZ1BUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBdkx5Qk9ieUJpZFhSMGIyNGdabTlqZFhObFpDNGdTblZ0Y0NCMGJ5QjBhR1VnWTI5dVptbHliU0JpZFhSMGIyNHVYRzRnSUNBZ0lDQWtkR0Z5WjJWMFJXeGxiV1Z1ZENBOUlDUnZhMEoxZEhSdmJqdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z1EzbGpiR1VnZEc4Z2RHaGxJRzVsZUhRZ1luVjBkRzl1WEc0Z0lDQWdJQ0JwWmlBb1luUnVTVzVrWlhnZ1BUMDlJQ1J0YjJSaGJFSjFkSFJ2Ym5NdWJHVnVaM1JvSUMwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FrZEdGeVoyVjBSV3hsYldWdWRDQTlJQ1J0YjJSaGJFSjFkSFJ2Ym5OYk1GMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWtkR0Z5WjJWMFJXeGxiV1Z1ZENBOUlDUnRiMlJoYkVKMWRIUnZibk5iWW5SdVNXNWtaWGdnS3lBeFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCemRHOXdSWFpsYm5SUWNtOXdZV2RoZEdsdmJpaGxLVHRjYmlBZ0lDQWtkR0Z5WjJWMFJXeGxiV1Z1ZEM1bWIyTjFjeWdwTzF4dVhHNGdJQ0FnYVdZZ0tIQmhjbUZ0Y3k1amIyNW1hWEp0UW5WMGRHOXVRMjlzYjNJcElIdGNiaUFnSUNBZ0lITmxkRVp2WTNWelUzUjViR1VvSkhSaGNtZGxkRVZzWlcxbGJuUXNJSEJoY21GdGN5NWpiMjVtYVhKdFFuVjBkRzl1UTI5c2IzSXBPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnBaaUFvYTJWNVEyOWtaU0E5UFQwZ01UTXBJSHRjYmlBZ0lDQWdJR2xtSUNna2RHRnlaMlYwUld4bGJXVnVkQzUwWVdkT1lXMWxJRDA5UFNBblNVNVFWVlFuS1NCN1hHNGdJQ0FnSUNBZ0lDUjBZWEpuWlhSRmJHVnRaVzUwSUQwZ0pHOXJRblYwZEc5dU8xeHVJQ0FnSUNBZ0lDQWtiMnRDZFhSMGIyNHVabTlqZFhNb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dKMGJrbHVaR1Y0SUQwOVBTQXRNU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkZUbFJGVWk5VFVFRkRSU0JqYkdsamEyVmtJRzkxZEhOcFpHVWdiMllnWVNCaWRYUjBiMjR1WEc0Z0lDQWdJQ0FnSUNSMFlYSm5aWFJGYkdWdFpXNTBJRDBnSkc5clFuVjBkRzl1TzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JHOGdibTkwYUdsdVp5QXRJR3hsZENCMGFHVWdZbkp2ZDNObGNpQm9ZVzVrYkdVZ2FYUXVYRzRnSUNBZ0lDQWdJQ1IwWVhKblpYUkZiR1Z0Wlc1MElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hMlY1UTI5a1pTQTlQVDBnTWpjZ0ppWWdjR0Z5WVcxekxtRnNiRzkzUlhOallYQmxTMlY1SUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNBa2RHRnlaMlYwUld4bGJXVnVkQ0E5SUNSallXNWpaV3hDZFhSMGIyNDdYRzRnSUNBZ0lDQm1hWEpsUTJ4cFkyc29KSFJoY21kbGRFVnNaVzFsYm5Rc0lHVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QkdZV3hzWW1GamF5QXRJR3hsZENCMGFHVWdZbkp2ZDNObGNpQm9ZVzVrYkdVZ2FYUXVYRzRnSUNBZ0lDQWtkR0Z5WjJWMFJXeGxiV1Z1ZENBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHaGhibVJzWlV0bGVVUnZkMjQ3WEc0aVhYMD0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfaGFuZGxlRG9tID0gcmVxdWlyZSgnLi9oYW5kbGUtZG9tJyk7XG5cbnZhciBfZGVmYXVsdFBhcmFtcyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1wYXJhbXMnKTtcblxudmFyIF9kZWZhdWx0UGFyYW1zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRQYXJhbXMpO1xuXG4vKlxuICogQWRkIG1vZGFsICsgb3ZlcmxheSB0byBET01cbiAqL1xuXG52YXIgX2luamVjdGVkSHRtbCA9IHJlcXVpcmUoJy4vaW5qZWN0ZWQtaHRtbCcpO1xuXG52YXIgX2luamVjdGVkSHRtbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmplY3RlZEh0bWwpO1xuXG52YXIgbW9kYWxDbGFzcyA9ICcuc3dlZXQtYWxlcnQnO1xudmFyIG92ZXJsYXlDbGFzcyA9ICcuc3dlZXQtb3ZlcmxheSc7XG5cbnZhciBzd2VldEFsZXJ0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIHN3ZWV0QWxlcnRJbml0aWFsaXplKCkge1xuICB2YXIgc3dlZXRXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHN3ZWV0V3JhcC5pbm5lckhUTUwgPSBfaW5qZWN0ZWRIdG1sMlsnZGVmYXVsdCddO1xuXG4gIC8vIEFwcGVuZCBlbGVtZW50cyB0byBib2R5XG4gIHdoaWxlIChzd2VldFdyYXAuZmlyc3RDaGlsZCkge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3dlZXRXcmFwLmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG4vKlxuICogR2V0IERPTSBlbGVtZW50IG9mIG1vZGFsXG4gKi9cbnZhciBnZXRNb2RhbCA9IGZ1bmN0aW9uIGdldE1vZGFsKCkge1xuICB2YXIgJG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb2RhbENsYXNzKTtcblxuICBpZiAoISRtb2RhbCkge1xuICAgIHN3ZWV0QWxlcnRJbml0aWFsaXplKCk7XG4gICAgJG1vZGFsID0gZ2V0TW9kYWwoKTtcbiAgfVxuXG4gIHJldHVybiAkbW9kYWw7XG59O1xuXG4vKlxuICogR2V0IERPTSBlbGVtZW50IG9mIGlucHV0IChpbiBtb2RhbClcbiAqL1xudmFyIGdldElucHV0ID0gZnVuY3Rpb24gZ2V0SW5wdXQoKSB7XG4gIHZhciAkbW9kYWwgPSBnZXRNb2RhbCgpO1xuICBpZiAoJG1vZGFsKSB7XG4gICAgcmV0dXJuICRtb2RhbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICB9XG59O1xuXG4vKlxuICogR2V0IERPTSBlbGVtZW50IG9mIG92ZXJsYXlcbiAqL1xudmFyIGdldE92ZXJsYXkgPSBmdW5jdGlvbiBnZXRPdmVybGF5KCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvdmVybGF5Q2xhc3MpO1xufTtcblxuLypcbiAqIEFkZCBib3gtc2hhZG93IHN0eWxlIHRvIGJ1dHRvbiAoZGVwZW5kaW5nIG9uIGl0cyBjaG9zZW4gYmctY29sb3IpXG4gKi9cbnZhciBzZXRGb2N1c1N0eWxlID0gZnVuY3Rpb24gc2V0Rm9jdXNTdHlsZSgkYnV0dG9uLCBiZ0NvbG9yKSB7XG4gIC8vIHZhciByZ2JDb2xvciA9IGhleFRvUmdiKGJnQ29sb3IpO1xuICAvLyAkYnV0dG9uLnN0eWxlLmJveFNoYWRvdyA9ICcwIDAgMnB4IHJnYmEoJyArIHJnYkNvbG9yICsgJywgMC44KSwgaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwgMCwgMCwgMC4wNSknO1xufTtcblxuLypcbiAqIEFuaW1hdGlvbiB3aGVuIG9wZW5pbmcgbW9kYWxcbiAqL1xudmFyIG9wZW5Nb2RhbCA9IGZ1bmN0aW9uIG9wZW5Nb2RhbChjYWxsYmFjaykge1xuICB2YXIgJG1vZGFsID0gZ2V0TW9kYWwoKTtcbiAgKDAsIF9oYW5kbGVEb20uZmFkZUluKShnZXRPdmVybGF5KCksIDEwKTtcbiAgKDAsIF9oYW5kbGVEb20uc2hvdykoJG1vZGFsKTtcbiAgKDAsIF9oYW5kbGVEb20uYWRkQ2xhc3MpKCRtb2RhbCwgJ3Nob3dTd2VldEFsZXJ0Jyk7XG4gICgwLCBfaGFuZGxlRG9tLnJlbW92ZUNsYXNzKSgkbW9kYWwsICdoaWRlU3dlZXRBbGVydCcpO1xuXG4gIHdpbmRvdy5wcmV2aW91c0FjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICB2YXIgJG9rQnV0dG9uID0gJG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5jb25maXJtJyk7XG4gICRva0J1dHRvbi5mb2N1cygpO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICgwLCBfaGFuZGxlRG9tLmFkZENsYXNzKSgkbW9kYWwsICd2aXNpYmxlJyk7XG4gIH0sIDUwMCk7XG5cbiAgdmFyIHRpbWVyID0gJG1vZGFsLmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lcicpO1xuXG4gIGlmICh0aW1lciAhPT0gJ251bGwnICYmIHRpbWVyICE9PSAnJykge1xuICAgIHZhciB0aW1lckNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgJG1vZGFsLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkb25lRnVuY3Rpb25FeGlzdHMgPSAodGltZXJDYWxsYmFjayB8fCBudWxsKSAmJiAkbW9kYWwuZ2V0QXR0cmlidXRlKCdkYXRhLWhhcy1kb25lLWZ1bmN0aW9uJykgPT09ICd0cnVlJztcbiAgICAgIGlmIChkb25lRnVuY3Rpb25FeGlzdHMpIHtcbiAgICAgICAgdGltZXJDYWxsYmFjayhudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3ZWV0QWxlcnQuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9LCB0aW1lcik7XG4gIH1cbn07XG5cbi8qXG4gKiBSZXNldCB0aGUgc3R5bGluZyBvZiB0aGUgaW5wdXRcbiAqIChmb3IgZXhhbXBsZSBpZiBlcnJvcnMgaGF2ZSBiZWVuIHNob3duKVxuICovXG52YXIgcmVzZXRJbnB1dCA9IGZ1bmN0aW9uIHJlc2V0SW5wdXQoKSB7XG4gIHZhciAkbW9kYWwgPSBnZXRNb2RhbCgpO1xuICB2YXIgJGlucHV0ID0gZ2V0SW5wdXQoKTtcblxuICAoMCwgX2hhbmRsZURvbS5yZW1vdmVDbGFzcykoJG1vZGFsLCAnc2hvdy1pbnB1dCcpO1xuICAkaW5wdXQudmFsdWUgPSBfZGVmYXVsdFBhcmFtczJbJ2RlZmF1bHQnXS5pbnB1dFZhbHVlO1xuICAkaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgX2RlZmF1bHRQYXJhbXMyWydkZWZhdWx0J10uaW5wdXRUeXBlKTtcbiAgJGlucHV0LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBfZGVmYXVsdFBhcmFtczJbJ2RlZmF1bHQnXS5pbnB1dFBsYWNlaG9sZGVyKTtcblxuICByZXNldElucHV0RXJyb3IoKTtcbn07XG5cbnZhciByZXNldElucHV0RXJyb3IgPSBmdW5jdGlvbiByZXNldElucHV0RXJyb3IoZXZlbnQpIHtcbiAgLy8gSWYgcHJlc3MgZW50ZXIgPT4gaWdub3JlXG4gIGlmIChldmVudCAmJiBldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciAkbW9kYWwgPSBnZXRNb2RhbCgpO1xuXG4gIHZhciAkZXJyb3JJY29uID0gJG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5zYS1pbnB1dC1lcnJvcicpO1xuICAoMCwgX2hhbmRsZURvbS5yZW1vdmVDbGFzcykoJGVycm9ySWNvbiwgJ3Nob3cnKTtcblxuICB2YXIgJGVycm9yQ29udGFpbmVyID0gJG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5zYS1lcnJvci1jb250YWluZXInKTtcbiAgKDAsIF9oYW5kbGVEb20ucmVtb3ZlQ2xhc3MpKCRlcnJvckNvbnRhaW5lciwgJ3Nob3cnKTtcbn07XG5cbi8qXG4gKiBTZXQgXCJtYXJnaW4tdG9wXCItcHJvcGVydHkgb24gbW9kYWwgYmFzZWQgb24gaXRzIGNvbXB1dGVkIGhlaWdodFxuICovXG52YXIgZml4VmVydGljYWxQb3NpdGlvbiA9IGZ1bmN0aW9uIGZpeFZlcnRpY2FsUG9zaXRpb24oKSB7XG4gIHZhciAkbW9kYWwgPSBnZXRNb2RhbCgpO1xuICAkbW9kYWwuc3R5bGUubWFyZ2luVG9wID0gKDAsIF9oYW5kbGVEb20uZ2V0VG9wTWFyZ2luKShnZXRNb2RhbCgpKTtcbn07XG5cbmV4cG9ydHMuc3dlZXRBbGVydEluaXRpYWxpemUgPSBzd2VldEFsZXJ0SW5pdGlhbGl6ZTtcbmV4cG9ydHMuZ2V0TW9kYWwgPSBnZXRNb2RhbDtcbmV4cG9ydHMuZ2V0T3ZlcmxheSA9IGdldE92ZXJsYXk7XG5leHBvcnRzLmdldElucHV0ID0gZ2V0SW5wdXQ7XG5leHBvcnRzLnNldEZvY3VzU3R5bGUgPSBzZXRGb2N1c1N0eWxlO1xuZXhwb3J0cy5vcGVuTW9kYWwgPSBvcGVuTW9kYWw7XG5leHBvcnRzLnJlc2V0SW5wdXQgPSByZXNldElucHV0O1xuZXhwb3J0cy5yZXNldElucHV0RXJyb3IgPSByZXNldElucHV0RXJyb3I7XG5leHBvcnRzLmZpeFZlcnRpY2FsUG9zaXRpb24gPSBmaXhWZXJ0aWNhbFBvc2l0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5RGIyUmxMM04zWldWMFlXeGxjblF2WkdWMkwyMXZaSFZzWlhNdmFHRnVaR3hsTFhOM1lXd3RaRzl0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3TzNGQ1FVRjVRaXhUUVVGVE96dDVRa0ZEWjBNc1kwRkJZenM3TmtKQlEzUkVMR3RDUVVGclFqczdPenM3T3pzN05FSkJVVzVDTEdsQ1FVRnBRanM3T3p0QlFVNHhReXhKUVVGSkxGVkJRVlVzUjBGQlN5eGpRVUZqTEVOQlFVTTdRVUZEYkVNc1NVRkJTU3haUVVGWkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNN08wRkJUM0JETEVsQlFVa3NiMEpCUVc5Q0xFZEJRVWNzVTBGQmRrSXNiMEpCUVc5Q0xFZEJRV003UVVGRGNFTXNUVUZCU1N4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTTVReXhYUVVGVExFTkJRVU1zVTBGQlV5dzBRa0ZCWlN4RFFVRkRPenM3UVVGSGJrTXNVMEZCVHl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRek5DTEZsQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0SFFVTnFSRHREUVVOR0xFTkJRVU03T3pzN08wRkJTMFlzU1VGQlNTeFJRVUZSTEVkQlFVY3NVMEZCV0N4UlFVRlJMRWRCUVdNN1FVRkRlRUlzVFVGQlNTeE5RVUZOTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGYUVRc1RVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU5ZTEhkQ1FVRnZRaXhGUVVGRkxFTkJRVU03UVVGRGRrSXNWVUZCVFN4SFFVRkhMRkZCUVZFc1JVRkJSU3hEUVVGRE8wZEJRM0pDT3p0QlFVVkVMRk5CUVU4c1RVRkJUU3hEUVVGRE8wTkJRMllzUTBGQlF6czdPenM3UVVGTFJpeEpRVUZKTEZGQlFWRXNSMEZCUnl4VFFVRllMRkZCUVZFc1IwRkJZenRCUVVONFFpeE5RVUZKTEUxQlFVMHNSMEZCUnl4UlFVRlJMRVZCUVVVc1EwRkJRenRCUVVONFFpeE5RVUZKTEUxQlFVMHNSVUZCUlR0QlFVTldMRmRCUVU4c1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0SFFVTjBRenREUVVOR0xFTkJRVU03T3pzN08wRkJTMFlzU1VGQlNTeFZRVUZWTEVkQlFVY3NVMEZCWWl4VlFVRlZMRWRCUVdNN1FVRkRNVUlzVTBGQlR5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wTkJRemRETEVOQlFVTTdPenM3TzBGQlMwWXNTVUZCU1N4aFFVRmhMRWRCUVVjc1UwRkJhRUlzWVVGQllTeERRVUZaTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVN096dERRVWM1UXl4RFFVRkRPenM3T3p0QlFVdEdMRWxCUVVrc1UwRkJVeXhIUVVGSExGTkJRVm9zVTBGQlV5eERRVUZaTEZGQlFWRXNSVUZCUlR0QlFVTnFReXhOUVVGSkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTjRRaXg1UWtGQlR5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVONlFpeDFRa0ZCU3l4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOaUxESkNRVUZUTEUxQlFVMHNSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEyNURMRGhDUVVGWkxFMUJRVTBzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE96dEJRVVYwUXl4UlFVRk5MRU5CUVVNc2NVSkJRWEZDTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJRenRCUVVOMFJDeE5RVUZKTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1FVRkRka1FzVjBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPenRCUVVWc1FpeFpRVUZWTEVOQlFVTXNXVUZCV1R0QlFVTnlRaXcyUWtGQlV5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1IwRkROMElzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZVaXhOUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE96dEJRVVU1UXl4TlFVRkpMRXRCUVVzc1MwRkJTeXhOUVVGTkxFbEJRVWtzUzBGQlN5eExRVUZMTEVWQlFVVXNSVUZCUlR0QlFVTndReXhSUVVGSkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZETjBJc1ZVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZWTEVOQlFVTXNXVUZCVnp0QlFVTnlReXhWUVVGSkxHdENRVUZyUWl4SFFVRkpMRU5CUVVNc1lVRkJZU3hKUVVGSkxFbEJRVWtzUTBGQlFTeEpRVUZMTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTMEZCU3l4TlFVRk5MRUZCUVVNc1EwRkJRenRCUVVNdlJ5eFZRVUZKTEd0Q1FVRnJRaXhGUVVGRk8wRkJRM1JDTEhGQ1FVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VDBGRGNrSXNUVUZEU1R0QlFVTklMR3RDUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdUMEZEY0VJN1MwRkRSaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBkQlExZzdRMEZEUml4RFFVRkRPenM3T3pzN1FVRk5SaXhKUVVGSkxGVkJRVlVzUjBGQlJ5eFRRVUZpTEZWQlFWVXNSMEZCWXp0QlFVTXhRaXhOUVVGSkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTjRRaXhOUVVGSkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVWQlFVVXNRMEZCUXpzN1FVRkZlRUlzT0VKQlFWa3NUVUZCVFN4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8wRkJRMnhETEZGQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc01rSkJRV01zVlVGQlZTeERRVUZETzBGQlEzaERMRkZCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeEZRVUZGTERKQ1FVRmpMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRM0pFTEZGQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1lVRkJZU3hGUVVGRkxESkNRVUZqTEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03TzBGQlJXNUZMR2xDUVVGbExFVkJRVVVzUTBGQlF6dERRVU51UWl4RFFVRkRPenRCUVVkR0xFbEJRVWtzWlVGQlpTeEhRVUZITEZOQlFXeENMR1ZCUVdVc1EwRkJXU3hMUVVGTExFVkJRVVU3TzBGQlJYQkRMRTFCUVVrc1MwRkJTeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEV0QlFVc3NSVUZCUlN4RlFVRkZPMEZCUTJwRExGZEJRVThzUzBGQlN5eERRVUZETzBkQlEyUTdPMEZCUlVRc1RVRkJTU3hOUVVGTkxFZEJRVWNzVVVGQlVTeEZRVUZGTEVOQlFVTTdPMEZCUlhoQ0xFMUJRVWtzVlVGQlZTeEhRVUZITEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0QlFVTjZSQ3c0UWtGQldTeFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN08wRkJSV2hETEUxQlFVa3NaVUZCWlN4SFFVRkhMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRCUVVOc1JTdzRRa0ZCV1N4bFFVRmxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UTBGRGRFTXNRMEZCUXpzN096czdRVUZOUml4SlFVRkpMRzFDUVVGdFFpeEhRVUZITEZOQlFYUkNMRzFDUVVGdFFpeEhRVUZqTzBGQlEyNURMRTFCUVVrc1RVRkJUU3hIUVVGSExGRkJRVkVzUlVGQlJTeERRVUZETzBGQlEzaENMRkZCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITERaQ1FVRmhMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03UTBGRGJrUXNRMEZCUXpzN1VVRkpRU3h2UWtGQmIwSXNSMEZCY0VJc2IwSkJRVzlDTzFGQlEzQkNMRkZCUVZFc1IwRkJVaXhSUVVGUk8xRkJRMUlzVlVGQlZTeEhRVUZXTEZWQlFWVTdVVUZEVml4UlFVRlJMRWRCUVZJc1VVRkJVVHRSUVVOU0xHRkJRV0VzUjBGQllpeGhRVUZoTzFGQlEySXNVMEZCVXl4SFFVRlVMRk5CUVZNN1VVRkRWQ3hWUVVGVkxFZEJRVllzVlVGQlZUdFJRVU5XTEdWQlFXVXNSMEZCWml4bFFVRmxPMUZCUTJZc2JVSkJRVzFDTEVkQlFXNUNMRzFDUVVGdFFpSXNJbVpwYkdVaU9pSXZRMjlrWlM5emQyVmxkR0ZzWlhKMEwyUmxkaTl0YjJSMWJHVnpMMmhoYm1Sc1pTMXpkMkZzTFdSdmJTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdobGVGUnZVbWRpSUgwZ1puSnZiU0FuTGk5MWRHbHNjeWM3WEc1cGJYQnZjblFnZXlCeVpXMXZkbVZEYkdGemN5d2daMlYwVkc5d1RXRnlaMmx1TENCbVlXUmxTVzRzSUhOb2IzY3NJR0ZrWkVOc1lYTnpJSDBnWm5KdmJTQW5MaTlvWVc1a2JHVXRaRzl0Snp0Y2JtbHRjRzl5ZENCa1pXWmhkV3gwVUdGeVlXMXpJR1p5YjIwZ0p5NHZaR1ZtWVhWc2RDMXdZWEpoYlhNbk8xeHVYRzUyWVhJZ2JXOWtZV3hEYkdGemN5QWdJRDBnSnk1emQyVmxkQzFoYkdWeWRDYzdYRzUyWVhJZ2IzWmxjbXhoZVVOc1lYTnpJRDBnSnk1emQyVmxkQzF2ZG1WeWJHRjVKenRjYmx4dUx5cGNiaUFxSUVGa1pDQnRiMlJoYkNBcklHOTJaWEpzWVhrZ2RHOGdSRTlOWEc0Z0tpOWNibWx0Y0c5eWRDQnBibXBsWTNSbFpFaFVUVXdnWm5KdmJTQW5MaTlwYm1wbFkzUmxaQzFvZEcxc0p6dGNibHh1ZG1GeUlITjNaV1YwUVd4bGNuUkpibWwwYVdGc2FYcGxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSFpoY2lCemQyVmxkRmR5WVhBZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVHRjYmlBZ2MzZGxaWFJYY21Gd0xtbHVibVZ5U0ZSTlRDQTlJR2x1YW1WamRHVmtTRlJOVER0Y2JseHVJQ0F2THlCQmNIQmxibVFnWld4bGJXVnVkSE1nZEc4Z1ltOWtlVnh1SUNCM2FHbHNaU0FvYzNkbFpYUlhjbUZ3TG1acGNuTjBRMmhwYkdRcElIdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0hOM1pXVjBWM0poY0M1bWFYSnpkRU5vYVd4a0tUdGNiaUFnZlZ4dWZUdGNibHh1THlwY2JpQXFJRWRsZENCRVQwMGdaV3hsYldWdWRDQnZaaUJ0YjJSaGJGeHVJQ292WEc1MllYSWdaMlYwVFc5a1lXd2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdkbUZ5SUNSdGIyUmhiQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9iVzlrWVd4RGJHRnpjeWs3WEc1Y2JpQWdhV1lnS0NFa2JXOWtZV3dwSUh0Y2JpQWdJQ0J6ZDJWbGRFRnNaWEowU1c1cGRHbGhiR2w2WlNncE8xeHVJQ0FnSUNSdGIyUmhiQ0E5SUdkbGRFMXZaR0ZzS0NrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z0pHMXZaR0ZzTzF4dWZUdGNibHh1THlwY2JpQXFJRWRsZENCRVQwMGdaV3hsYldWdWRDQnZaaUJwYm5CMWRDQW9hVzRnYlc5a1lXd3BYRzRnS2k5Y2JuWmhjaUJuWlhSSmJuQjFkQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0IyWVhJZ0pHMXZaR0ZzSUQwZ1oyVjBUVzlrWVd3b0tUdGNiaUFnYVdZZ0tDUnRiMlJoYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFrYlc5a1lXd3VjWFZsY25sVFpXeGxZM1J2Y2lnbmFXNXdkWFFuS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeXBjYmlBcUlFZGxkQ0JFVDAwZ1pXeGxiV1Z1ZENCdlppQnZkbVZ5YkdGNVhHNGdLaTljYm5aaGNpQm5aWFJQZG1WeWJHRjVJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSEpsZEhWeWJpQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0c5MlpYSnNZWGxEYkdGemN5azdYRzU5TzF4dVhHNHZLbHh1SUNvZ1FXUmtJR0p2ZUMxemFHRmtiM2NnYzNSNWJHVWdkRzhnWW5WMGRHOXVJQ2hrWlhCbGJtUnBibWNnYjI0Z2FYUnpJR05vYjNObGJpQmlaeTFqYjJ4dmNpbGNiaUFxTDF4dWRtRnlJSE5sZEVadlkzVnpVM1I1YkdVZ1BTQm1kVzVqZEdsdmJpZ2tZblYwZEc5dUxDQmlaME52Ykc5eUtTQjdYRzRnSUM4dklIWmhjaUJ5WjJKRGIyeHZjaUE5SUdobGVGUnZVbWRpS0dKblEyOXNiM0lwTzF4dUlDQXZMeUFrWW5WMGRHOXVMbk4wZVd4bExtSnZlRk5vWVdSdmR5QTlJQ2N3SURBZ01uQjRJSEpuWW1Fb0p5QXJJSEpuWWtOdmJHOXlJQ3NnSnl3Z01DNDRLU3dnYVc1elpYUWdNQ0F3SURBZ01YQjRJSEpuWW1Fb01Dd2dNQ3dnTUN3Z01DNHdOU2tuTzF4dWZUdGNibHh1THlwY2JpQXFJRUZ1YVcxaGRHbHZiaUIzYUdWdUlHOXdaVzVwYm1jZ2JXOWtZV3hjYmlBcUwxeHVkbUZ5SUc5d1pXNU5iMlJoYkNBOUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYRzRnSUhaaGNpQWtiVzlrWVd3Z1BTQm5aWFJOYjJSaGJDZ3BPMXh1SUNCbVlXUmxTVzRvWjJWMFQzWmxjbXhoZVNncExDQXhNQ2s3WEc0Z0lITm9iM2NvSkcxdlpHRnNLVHRjYmlBZ1lXUmtRMnhoYzNNb0pHMXZaR0ZzTENBbmMyaHZkMU4zWldWMFFXeGxjblFuS1R0Y2JpQWdjbVZ0YjNabFEyeGhjM01vSkcxdlpHRnNMQ0FuYUdsa1pWTjNaV1YwUVd4bGNuUW5LVHRjYmx4dUlDQjNhVzVrYjNjdWNISmxkbWx2ZFhOQlkzUnBkbVZGYkdWdFpXNTBJRDBnWkc5amRXMWxiblF1WVdOMGFYWmxSV3hsYldWdWREdGNiaUFnZG1GeUlDUnZhMEoxZEhSdmJpQTlJQ1J0YjJSaGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkaWRYUjBiMjR1WTI5dVptbHliU2NwTzF4dUlDQWtiMnRDZFhSMGIyNHVabTlqZFhNb0tUdGNibHh1SUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmhaR1JEYkdGemN5Z2tiVzlrWVd3c0lDZDJhWE5wWW14bEp5azdYRzRnSUgwc0lEVXdNQ2s3WEc1Y2JpQWdkbUZ5SUhScGJXVnlJRDBnSkcxdlpHRnNMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzEwYVcxbGNpY3BPMXh1WEc0Z0lHbG1JQ2gwYVcxbGNpQWhQVDBnSjI1MWJHd25JQ1ltSUhScGJXVnlJQ0U5UFNBbkp5a2dlMXh1SUNBZ0lIWmhjaUIwYVcxbGNrTmhiR3hpWVdOcklEMGdZMkZzYkdKaFkyczdYRzRnSUNBZ0pHMXZaR0ZzTG5ScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdSdmJtVkdkVzVqZEdsdmJrVjRhWE4wY3lBOUlDZ29kR2x0WlhKRFlXeHNZbUZqYXlCOGZDQnVkV3hzS1NBbUppQWtiVzlrWVd3dVoyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXaGhjeTFrYjI1bExXWjFibU4wYVc5dUp5a2dQVDA5SUNkMGNuVmxKeWs3WEc0Z0lDQWdJQ0JwWmlBb1pHOXVaVVoxYm1OMGFXOXVSWGhwYzNSektTQjdJRnh1SUNBZ0lDQWdJQ0IwYVcxbGNrTmhiR3hpWVdOcktHNTFiR3dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJSE4zWldWMFFXeGxjblF1WTJ4dmMyVW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMQ0IwYVcxbGNpazdYRzRnSUgxY2JuMDdYRzVjYmk4cVhHNGdLaUJTWlhObGRDQjBhR1VnYzNSNWJHbHVaeUJ2WmlCMGFHVWdhVzV3ZFhSY2JpQXFJQ2htYjNJZ1pYaGhiWEJzWlNCcFppQmxjbkp2Y25NZ2FHRjJaU0JpWldWdUlITm9iM2R1S1Z4dUlDb3ZYRzUyWVhJZ2NtVnpaWFJKYm5CMWRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQjJZWElnSkcxdlpHRnNJRDBnWjJWMFRXOWtZV3dvS1R0Y2JpQWdkbUZ5SUNScGJuQjFkQ0E5SUdkbGRFbHVjSFYwS0NrN1hHNWNiaUFnY21WdGIzWmxRMnhoYzNNb0pHMXZaR0ZzTENBbmMyaHZkeTFwYm5CMWRDY3BPMXh1SUNBa2FXNXdkWFF1ZG1Gc2RXVWdQU0JrWldaaGRXeDBVR0Z5WVcxekxtbHVjSFYwVm1Gc2RXVTdYRzRnSUNScGJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0ozUjVjR1VuTENCa1pXWmhkV3gwVUdGeVlXMXpMbWx1Y0hWMFZIbHdaU2s3WEc0Z0lDUnBibkIxZEM1elpYUkJkSFJ5YVdKMWRHVW9KM0JzWVdObGFHOXNaR1Z5Snl3Z1pHVm1ZWFZzZEZCaGNtRnRjeTVwYm5CMWRGQnNZV05sYUc5c1pHVnlLVHRjYmx4dUlDQnlaWE5sZEVsdWNIVjBSWEp5YjNJb0tUdGNibjA3WEc1Y2JseHVkbUZ5SUhKbGMyVjBTVzV3ZFhSRmNuSnZjaUE5SUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDOHZJRWxtSUhCeVpYTnpJR1Z1ZEdWeUlEMCtJR2xuYm05eVpWeHVJQ0JwWmlBb1pYWmxiblFnSmlZZ1pYWmxiblF1YTJWNVEyOWtaU0E5UFQwZ01UTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCMllYSWdKRzF2WkdGc0lEMGdaMlYwVFc5a1lXd29LVHRjYmx4dUlDQjJZWElnSkdWeWNtOXlTV052YmlBOUlDUnRiMlJoYkM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YzJFdGFXNXdkWFF0WlhKeWIzSW5LVHRjYmlBZ2NtVnRiM1psUTJ4aGMzTW9KR1Z5Y205eVNXTnZiaXdnSjNOb2IzY25LVHRjYmx4dUlDQjJZWElnSkdWeWNtOXlRMjl1ZEdGcGJtVnlJRDBnSkcxdlpHRnNMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXpZUzFsY25KdmNpMWpiMjUwWVdsdVpYSW5LVHRjYmlBZ2NtVnRiM1psUTJ4aGMzTW9KR1Z5Y205eVEyOXVkR0ZwYm1WeUxDQW5jMmh2ZHljcE8xeHVmVHRjYmx4dVhHNHZLbHh1SUNvZ1UyVjBJRndpYldGeVoybHVMWFJ2Y0Z3aUxYQnliM0JsY25SNUlHOXVJRzF2WkdGc0lHSmhjMlZrSUc5dUlHbDBjeUJqYjIxd2RYUmxaQ0JvWldsbmFIUmNiaUFxTDF4dWRtRnlJR1pwZUZabGNuUnBZMkZzVUc5emFYUnBiMjRnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnZG1GeUlDUnRiMlJoYkNBOUlHZGxkRTF2WkdGc0tDazdYRzRnSUNSdGIyUmhiQzV6ZEhsc1pTNXRZWEpuYVc1VWIzQWdQU0JuWlhSVWIzQk5ZWEpuYVc0b1oyVjBUVzlrWVd3b0tTazdYRzU5TzF4dVhHNWNibVY0Y0c5eWRDQjdJRnh1SUNCemQyVmxkRUZzWlhKMFNXNXBkR2xoYkdsNlpTeGNiaUFnWjJWMFRXOWtZV3dzWEc0Z0lHZGxkRTkyWlhKc1lYa3NYRzRnSUdkbGRFbHVjSFYwTEZ4dUlDQnpaWFJHYjJOMWMxTjBlV3hsTEZ4dUlDQnZjR1Z1VFc5a1lXd3NYRzRnSUhKbGMyVjBTVzV3ZFhRc1hHNGdJSEpsYzJWMFNXNXdkWFJGY25KdmNpeGNiaUFnWm1sNFZtVnlkR2xqWVd4UWIzTnBkR2x2Ymx4dWZUdGNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGluamVjdGVkSFRNTCA9XG5cbi8vIERhcmsgb3ZlcmxheVxuXCI8ZGl2IGNsYXNzPVxcXCJzd2VldC1vdmVybGF5XFxcIiB0YWJJbmRleD1cXFwiLTFcXFwiPjwvZGl2PlwiICtcblxuLy8gTW9kYWxcblwiPGRpdiBjbGFzcz1cXFwic3dlZXQtYWxlcnRcXFwiPlwiICtcblxuLy8gRXJyb3IgaWNvblxuXCI8ZGl2IGNsYXNzPVxcXCJzYS1pY29uIHNhLWVycm9yXFxcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwic2EteC1tYXJrXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYS1saW5lIHNhLWxlZnRcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYS1saW5lIHNhLXJpZ2h0XFxcIj48L3NwYW4+XFxuICAgICAgPC9zcGFuPlxcbiAgICA8L2Rpdj5cIiArXG5cbi8vIFdhcm5pbmcgaWNvblxuXCI8ZGl2IGNsYXNzPVxcXCJzYS1pY29uIHNhLXdhcm5pbmdcXFwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYS1ib2R5XFxcIj48L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInNhLWRvdFxcXCI+PC9zcGFuPlxcbiAgICA8L2Rpdj5cIiArXG5cbi8vIEluZm8gaWNvblxuXCI8ZGl2IGNsYXNzPVxcXCJzYS1pY29uIHNhLWluZm9cXFwiPjwvZGl2PlwiICtcblxuLy8gU3VjY2VzcyBpY29uXG5cIjxkaXYgY2xhc3M9XFxcInNhLWljb24gc2Etc3VjY2Vzc1xcXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInNhLWxpbmUgc2EtdGlwXFxcIj48L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInNhLWxpbmUgc2EtbG9uZ1xcXCI+PC9zcGFuPlxcblxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNhLXBsYWNlaG9sZGVyXFxcIj48L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzYS1maXhcXFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cIiArIFwiPGRpdiBjbGFzcz1cXFwic2EtaWNvbiBzYS1jdXN0b21cXFwiPjwvZGl2PlwiICtcblxuLy8gVGl0bGUsIHRleHQgYW5kIGlucHV0XG5cIjxoMj5UaXRsZTwvaDI+XFxuICAgIDxwPlRleHQ8L3A+XFxuICAgIDxmaWVsZHNldD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGFiSW5kZXg9XFxcIjNcXFwiIC8+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2EtaW5wdXQtZXJyb3JcXFwiPjwvZGl2PlxcbiAgICA8L2ZpZWxkc2V0PlwiICtcblxuLy8gSW5wdXQgZXJyb3JzXG5cIjxkaXYgY2xhc3M9XFxcInNhLWVycm9yLWNvbnRhaW5lclxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiaWNvblxcXCI+ITwvZGl2PlxcbiAgICAgIDxwPk5vdCB2YWxpZCE8L3A+XFxuICAgIDwvZGl2PlwiICtcblxuLy8gQ2FuY2VsIGFuZCBjb25maXJtIGJ1dHRvbnNcblwiPGRpdiBjbGFzcz1cXFwic2EtYnV0dG9uLWNvbnRhaW5lclxcXCI+XFxuICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiY2FuY2VsIHVzY2lzLWJ1dHRvbiB1c2Npcy1idXR0b24tZ3JheVxcXCIgdGFiSW5kZXg9XFxcIjJcXFwiPkNhbmNlbDwvYnV0dG9uPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lclxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJjb25maXJtIHVzY2lzLWJ1dHRvbiB1c2Npcy1idXR0b24tYmx1ZVxcXCIgdGFiSW5kZXg9XFxcIjFcXFwiPk9LPC9idXR0b24+XCIgK1xuXG4vLyBMb2FkaW5nIGFuaW1hdGlvblxuXCI8ZGl2IGNsYXNzPVxcXCJsYS1iYWxsLWZhbGxcXFwiPlxcbiAgICAgICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgICAgICA8ZGl2PjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlwiICtcblxuLy8gRW5kIG9mIG1vZGFsXG5cIjwvZGl2PlwiO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGluamVjdGVkSFRNTDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlEYjJSbEwzTjNaV1YwWVd4bGNuUXZaR1YyTDIxdlpIVnNaWE12YVc1cVpXTjBaV1F0YUhSdGJDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRWxCUVVrc1dVRkJXVHM3TzBGQlIyUTdPenMyUWtGSE1rSTdPenRyVFVGUmJFSTdPenMyU0VGTlFUczdPM1ZEUVVjNFFqczdPeXRPUVZNNVFpdzBRMEZGWjBNN096czBTa0ZSTTBJN096czBSMEZOVERzN08yMVNRVTAyUlRzN096WkpRVk0zUlRzN08xRkJSMFFzUTBGQlF6czdjVUpCUlVrc1dVRkJXU0lzSW1acGJHVWlPaUl2UTI5a1pTOXpkMlZsZEdGc1pYSjBMMlJsZGk5dGIyUjFiR1Z6TDJsdWFtVmpkR1ZrTFdoMGJXd3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdhVzVxWldOMFpXUklWRTFNSUQwZ1hHNWNiaUFnTHk4Z1JHRnlheUJ2ZG1WeWJHRjVYRzRnSUdBOFpHbDJJR05zWVhOelBWd2ljM2RsWlhRdGIzWmxjbXhoZVZ3aUlIUmhZa2x1WkdWNFBWd2lMVEZjSWo0OEwyUnBkajVnSUN0Y2JseHVJQ0F2THlCTmIyUmhiRnh1SUNCZ1BHUnBkaUJqYkdGemN6MWNJbk4zWldWMExXRnNaWEowWENJK1lDQXJYRzVjYmlBZ0lDQXZMeUJGY25KdmNpQnBZMjl1WEc0Z0lDQWdZRHhrYVhZZ1kyeGhjM005WENKellTMXBZMjl1SUhOaExXVnljbTl5WENJK1hHNGdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbk5oTFhndGJXRnlhMXdpUGx4dUlDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbk5oTFd4cGJtVWdjMkV0YkdWbWRGd2lQand2YzNCaGJqNWNiaUFnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM005WENKellTMXNhVzVsSUhOaExYSnBaMmgwWENJK1BDOXpjR0Z1UGx4dUlDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lEd3ZaR2wyUG1BZ0sxeHVYRzRnSUNBZ0x5OGdWMkZ5Ym1sdVp5QnBZMjl1WEc0Z0lDQWdZRHhrYVhZZ1kyeGhjM005WENKellTMXBZMjl1SUhOaExYZGhjbTVwYm1kY0lqNWNiaUFnSUNBZ0lEeHpjR0Z1SUdOc1lYTnpQVndpYzJFdFltOWtlVndpUGp3dmMzQmhiajVjYmlBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56UFZ3aWMyRXRaRzkwWENJK1BDOXpjR0Z1UGx4dUlDQWdJRHd2WkdsMlBtQWdLMXh1WEc0Z0lDQWdMeThnU1c1bWJ5QnBZMjl1WEc0Z0lDQWdZRHhrYVhZZ1kyeGhjM005WENKellTMXBZMjl1SUhOaExXbHVabTljSWo0OEwyUnBkajVnSUN0Y2JseHVJQ0FnSUM4dklGTjFZMk5sYzNNZ2FXTnZibHh1SUNBZ0lHQThaR2wySUdOc1lYTnpQVndpYzJFdGFXTnZiaUJ6WVMxemRXTmpaWE56WENJK1hHNGdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbk5oTFd4cGJtVWdjMkV0ZEdsd1hDSStQQzl6Y0dGdVBseHVJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0p6WVMxc2FXNWxJSE5oTFd4dmJtZGNJajQ4TDNOd1lXNCtYRzVjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKellTMXdiR0ZqWldodmJHUmxjbHdpUGp3dlpHbDJQbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW5OaExXWnBlRndpUGp3dlpHbDJQbHh1SUNBZ0lEd3ZaR2wyUG1BZ0sxeHVYRzRnSUNBZ1lEeGthWFlnWTJ4aGMzTTlYQ0p6WVMxcFkyOXVJSE5oTFdOMWMzUnZiVndpUGp3dlpHbDJQbUFnSzF4dVhHNGdJQ0FnTHk4Z1ZHbDBiR1VzSUhSbGVIUWdZVzVrSUdsdWNIVjBYRzRnSUNBZ1lEeG9NajVVYVhSc1pUd3ZhREkrWEc0Z0lDQWdQSEErVkdWNGREd3ZjRDVjYmlBZ0lDQThabWxsYkdSelpYUStYRzRnSUNBZ0lDQThhVzV3ZFhRZ2RIbHdaVDFjSW5SbGVIUmNJaUIwWVdKSmJtUmxlRDFjSWpOY0lpQXZQbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW5OaExXbHVjSFYwTFdWeWNtOXlYQ0krUEM5a2FYWStYRzRnSUNBZ1BDOW1hV1ZzWkhObGRENWdJQ3RjYmx4dUlDQWdJQzh2SUVsdWNIVjBJR1Z5Y205eWMxeHVJQ0FnSUdBOFpHbDJJR05zWVhOelBWd2ljMkV0WlhKeWIzSXRZMjl1ZEdGcGJtVnlYQ0krWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWFXTnZibHdpUGlFOEwyUnBkajVjYmlBZ0lDQWdJRHh3UGs1dmRDQjJZV3hwWkNFOEwzQStYRzRnSUNBZ1BDOWthWFkrWUNBclhHNWNiaUFnSUNBdkx5QkRZVzVqWld3Z1lXNWtJR052Ym1acGNtMGdZblYwZEc5dWMxeHVJQ0FnSUdBOFpHbDJJR05zWVhOelBWd2ljMkV0WW5WMGRHOXVMV052Ym5SaGFXNWxjbHdpUGx4dUlDQWdJQ0FnUEdKMWRIUnZiaUJqYkdGemN6MWNJbU5oYm1ObGJDQjFjMk5wY3kxaWRYUjBiMjRnZFhOamFYTXRZblYwZEc5dUxXZHlZWGxjSWlCMFlXSkpibVJsZUQxY0lqSmNJajVEWVc1alpXdzhMMkoxZEhSdmJqNWNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0p6WVMxamIyNW1hWEp0TFdKMWRIUnZiaTFqYjI1MFlXbHVaWEpjSWo1Y2JpQWdJQ0FnSUNBZ1BHSjFkSFJ2YmlCamJHRnpjejFjSW1OdmJtWnBjbTBnZFhOamFYTXRZblYwZEc5dUlIVnpZMmx6TFdKMWRIUnZiaTFpYkhWbFhDSWdkR0ZpU1c1a1pYZzlYQ0l4WENJK1QwczhMMkoxZEhSdmJqNWdJQ3NnWEc1Y2JpQWdJQ0FnSUNBZ0x5OGdURzloWkdsdVp5QmhibWx0WVhScGIyNWNiaUFnSUNBZ0lDQWdZRHhrYVhZZ1kyeGhjM005WENKc1lTMWlZV3hzTFdaaGJHeGNJajVjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJQand2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJRHhrYVhZK1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkajQ4TDJScGRqNWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQThMMlJwZGo1Z0lDdGNibHh1SUNBdkx5QkZibVFnYjJZZ2JXOWtZV3hjYmlBZ1lEd3ZaR2wyUG1BN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHbHVhbVZqZEdWa1NGUk5URHRjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2hhbmRsZVN3YWxEb20gPSByZXF1aXJlKCcuL2hhbmRsZS1zd2FsLWRvbScpO1xuXG52YXIgX2hhbmRsZURvbSA9IHJlcXVpcmUoJy4vaGFuZGxlLWRvbScpO1xuXG4vKlxuICogU2V0IHR5cGUsIHRleHQgYW5kIGFjdGlvbnMgb24gbW9kYWxcbiAqL1xudmFyIGFsZXJ0VHlwZXMgPSBbJ2Vycm9yJywgJ3dhcm5pbmcnLCAnaW5mbycsICdzdWNjZXNzJywgJ2lucHV0JywgJ3Byb21wdCddO1xuXG52YXIgc2V0UGFyYW1ldGVycyA9IGZ1bmN0aW9uIHNldFBhcmFtZXRlcnMocGFyYW1zKSB7XG4gIHZhciBtb2RhbCA9ICgwLCBfaGFuZGxlU3dhbERvbS5nZXRNb2RhbCkoKTtcblxuICB2YXIgJHRpdGxlID0gbW9kYWwucXVlcnlTZWxlY3RvcignaDInKTtcbiAgdmFyICR0ZXh0ID0gbW9kYWwucXVlcnlTZWxlY3RvcigncCcpO1xuICB2YXIgJGNhbmNlbEJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5jYW5jZWwnKTtcbiAgdmFyICRjb25maXJtQnRuID0gbW9kYWwucXVlcnlTZWxlY3RvcignYnV0dG9uLmNvbmZpcm0nKTtcblxuICAvKlxuICAgKiBUaXRsZVxuICAgKi9cbiAgJHRpdGxlLmlubmVySFRNTCA9IHBhcmFtcy5odG1sID8gcGFyYW1zLnRpdGxlIDogKDAsIF9oYW5kbGVEb20uZXNjYXBlSHRtbCkocGFyYW1zLnRpdGxlKS5zcGxpdCgnXFxuJykuam9pbignPGJyPicpO1xuXG4gIC8qXG4gICAqIFRleHRcbiAgICovXG4gICR0ZXh0LmlubmVySFRNTCA9IHBhcmFtcy5odG1sID8gcGFyYW1zLnRleHQgOiAoMCwgX2hhbmRsZURvbS5lc2NhcGVIdG1sKShwYXJhbXMudGV4dCB8fCAnJykuc3BsaXQoJ1xcbicpLmpvaW4oJzxicj4nKTtcbiAgaWYgKHBhcmFtcy50ZXh0KSAoMCwgX2hhbmRsZURvbS5zaG93KSgkdGV4dCk7XG5cbiAgLypcbiAgICogQ3VzdG9tIGNsYXNzXG4gICAqL1xuICBpZiAocGFyYW1zLmN1c3RvbUNsYXNzKSB7XG4gICAgKDAsIF9oYW5kbGVEb20uYWRkQ2xhc3MpKG1vZGFsLCBwYXJhbXMuY3VzdG9tQ2xhc3MpO1xuICAgIG1vZGFsLnNldEF0dHJpYnV0ZSgnZGF0YS1jdXN0b20tY2xhc3MnLCBwYXJhbXMuY3VzdG9tQ2xhc3MpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZpbmQgcHJldmlvdXNseSBzZXQgY2xhc3NlcyBhbmQgcmVtb3ZlIHRoZW1cbiAgICB2YXIgY3VzdG9tQ2xhc3MgPSBtb2RhbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY3VzdG9tLWNsYXNzJyk7XG4gICAgKDAsIF9oYW5kbGVEb20ucmVtb3ZlQ2xhc3MpKG1vZGFsLCBjdXN0b21DbGFzcyk7XG4gICAgbW9kYWwuc2V0QXR0cmlidXRlKCdkYXRhLWN1c3RvbS1jbGFzcycsICcnKTtcbiAgfVxuXG4gIC8qXG4gICAqIEljb25cbiAgICovXG4gICgwLCBfaGFuZGxlRG9tLmhpZGUpKG1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zYS1pY29uJykpO1xuXG4gIGlmIChwYXJhbXMudHlwZSAmJiAhKDAsIF91dGlscy5pc0lFOCkoKSkge1xuICAgIHZhciBfcmV0ID0gKGZ1bmN0aW9uICgpIHtcblxuICAgICAgdmFyIHZhbGlkVHlwZSA9IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsZXJ0VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSBhbGVydFR5cGVzW2ldKSB7XG4gICAgICAgICAgdmFsaWRUeXBlID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXZhbGlkVHlwZSkge1xuICAgICAgICBsb2dTdHIoJ1Vua25vd24gYWxlcnQgdHlwZTogJyArIHBhcmFtcy50eXBlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2OiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZXNXaXRoSWNvbnMgPSBbJ3N1Y2Nlc3MnLCAnZXJyb3InLCAnd2FybmluZycsICdpbmZvJ107XG4gICAgICB2YXIgJGljb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0eXBlc1dpdGhJY29ucy5pbmRleE9mKHBhcmFtcy50eXBlKSAhPT0gLTEpIHtcbiAgICAgICAgJGljb24gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuc2EtaWNvbi4nICsgJ3NhLScgKyBwYXJhbXMudHlwZSk7XG4gICAgICAgICgwLCBfaGFuZGxlRG9tLnNob3cpKCRpY29uKTtcbiAgICAgIH1cblxuICAgICAgdmFyICRpbnB1dCA9ICgwLCBfaGFuZGxlU3dhbERvbS5nZXRJbnB1dCkoKTtcblxuICAgICAgLy8gQW5pbWF0ZSBpY29uXG4gICAgICBzd2l0Y2ggKHBhcmFtcy50eXBlKSB7XG5cbiAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgICAgKDAsIF9oYW5kbGVEb20uYWRkQ2xhc3MpKCRpY29uLCAnYW5pbWF0ZScpO1xuICAgICAgICAgICgwLCBfaGFuZGxlRG9tLmFkZENsYXNzKSgkaWNvbi5xdWVyeVNlbGVjdG9yKCcuc2EtdGlwJyksICdhbmltYXRlU3VjY2Vzc1RpcCcpO1xuICAgICAgICAgICgwLCBfaGFuZGxlRG9tLmFkZENsYXNzKSgkaWNvbi5xdWVyeVNlbGVjdG9yKCcuc2EtbG9uZycpLCAnYW5pbWF0ZVN1Y2Nlc3NMb25nJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICgwLCBfaGFuZGxlRG9tLmFkZENsYXNzKSgkaWNvbiwgJ2FuaW1hdGVFcnJvckljb24nKTtcbiAgICAgICAgICAoMCwgX2hhbmRsZURvbS5hZGRDbGFzcykoJGljb24ucXVlcnlTZWxlY3RvcignLnNhLXgtbWFyaycpLCAnYW5pbWF0ZVhNYXJrJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgKDAsIF9oYW5kbGVEb20uYWRkQ2xhc3MpKCRpY29uLCAncHVsc2VXYXJuaW5nJyk7XG4gICAgICAgICAgKDAsIF9oYW5kbGVEb20uYWRkQ2xhc3MpKCRpY29uLnF1ZXJ5U2VsZWN0b3IoJy5zYS1ib2R5JyksICdwdWxzZVdhcm5pbmdJbnMnKTtcbiAgICAgICAgICAoMCwgX2hhbmRsZURvbS5hZGRDbGFzcykoJGljb24ucXVlcnlTZWxlY3RvcignLnNhLWRvdCcpLCAncHVsc2VXYXJuaW5nSW5zJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBjYXNlICdwcm9tcHQnOlxuICAgICAgICAgICRpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBwYXJhbXMuaW5wdXRUeXBlKTtcbiAgICAgICAgICAkaW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTtcbiAgICAgICAgICAkaW5wdXQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAoMCwgX2hhbmRsZURvbS5hZGRDbGFzcykobW9kYWwsICdzaG93LWlucHV0Jyk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHN3YWwucmVzZXRJbnB1dEVycm9yKTtcbiAgICAgICAgICB9LCA0MDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICBpZiAodHlwZW9mIF9yZXQgPT09ICdvYmplY3QnKSByZXR1cm4gX3JldC52O1xuICB9XG5cbiAgLypcbiAgICogQ3VzdG9tIGltYWdlXG4gICAqL1xuICBpZiAocGFyYW1zLmltYWdlVXJsKSB7XG4gICAgdmFyICRjdXN0b21JY29uID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnNhLWljb24uc2EtY3VzdG9tJyk7XG5cbiAgICAkY3VzdG9tSWNvbi5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCcgKyBwYXJhbXMuaW1hZ2VVcmwgKyAnKSc7XG4gICAgKDAsIF9oYW5kbGVEb20uc2hvdykoJGN1c3RvbUljb24pO1xuXG4gICAgdmFyIF9pbWdXaWR0aCA9IDgwO1xuICAgIHZhciBfaW1nSGVpZ2h0ID0gODA7XG5cbiAgICBpZiAocGFyYW1zLmltYWdlU2l6ZSkge1xuICAgICAgdmFyIGRpbWVuc2lvbnMgPSBwYXJhbXMuaW1hZ2VTaXplLnRvU3RyaW5nKCkuc3BsaXQoJ3gnKTtcbiAgICAgIHZhciBpbWdXaWR0aCA9IGRpbWVuc2lvbnNbMF07XG4gICAgICB2YXIgaW1nSGVpZ2h0ID0gZGltZW5zaW9uc1sxXTtcblxuICAgICAgaWYgKCFpbWdXaWR0aCB8fCAhaW1nSGVpZ2h0KSB7XG4gICAgICAgIGxvZ1N0cignUGFyYW1ldGVyIGltYWdlU2l6ZSBleHBlY3RzIHZhbHVlIHdpdGggZm9ybWF0IFdJRFRIeEhFSUdIVCwgZ290ICcgKyBwYXJhbXMuaW1hZ2VTaXplKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pbWdXaWR0aCA9IGltZ1dpZHRoO1xuICAgICAgICBfaW1nSGVpZ2h0ID0gaW1nSGVpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgICRjdXN0b21JY29uLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAkY3VzdG9tSWNvbi5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgKyAnd2lkdGg6JyArIF9pbWdXaWR0aCArICdweDsgaGVpZ2h0OicgKyBfaW1nSGVpZ2h0ICsgJ3B4Jyk7XG4gIH1cblxuICAvKlxuICAgKiBTaG93IGNhbmNlbCBidXR0b24/XG4gICAqL1xuICBtb2RhbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzLWNhbmNlbC1idXR0b24nLCBwYXJhbXMuc2hvd0NhbmNlbEJ1dHRvbik7XG4gIGlmIChwYXJhbXMuc2hvd0NhbmNlbEJ1dHRvbikge1xuICAgICRjYW5jZWxCdG4uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICB9IGVsc2Uge1xuICAgICgwLCBfaGFuZGxlRG9tLmhpZGUpKCRjYW5jZWxCdG4pO1xuICB9XG5cbiAgLypcbiAgICogU2hvdyBjb25maXJtIGJ1dHRvbj9cbiAgICovXG4gIG1vZGFsLnNldEF0dHJpYnV0ZSgnZGF0YS1oYXMtY29uZmlybS1idXR0b24nLCBwYXJhbXMuc2hvd0NvbmZpcm1CdXR0b24pO1xuICBpZiAocGFyYW1zLnNob3dDb25maXJtQnV0dG9uKSB7XG4gICAgJGNvbmZpcm1CdG4uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICB9IGVsc2Uge1xuICAgICgwLCBfaGFuZGxlRG9tLmhpZGUpKCRjb25maXJtQnRuKTtcbiAgfVxuXG4gIC8qXG4gICAqIEN1c3RvbSB0ZXh0IG9uIGNhbmNlbC9jb25maXJtIGJ1dHRvbnNcbiAgICovXG4gIGlmIChwYXJhbXMuY2FuY2VsQnV0dG9uVGV4dCkge1xuICAgICRjYW5jZWxCdG4uaW5uZXJIVE1MID0gKDAsIF9oYW5kbGVEb20uZXNjYXBlSHRtbCkocGFyYW1zLmNhbmNlbEJ1dHRvblRleHQpO1xuICB9XG4gIGlmIChwYXJhbXMuY29uZmlybUJ1dHRvblRleHQpIHtcbiAgICAkY29uZmlybUJ0bi5pbm5lckhUTUwgPSAoMCwgX2hhbmRsZURvbS5lc2NhcGVIdG1sKShwYXJhbXMuY29uZmlybUJ1dHRvblRleHQpO1xuICB9XG5cbiAgLypcbiAgICogQ3VzdG9tIGNvbG9yIG9uIGNvbmZpcm0gYnV0dG9uXG4gICAqL1xuICBpZiAocGFyYW1zLmNvbmZpcm1CdXR0b25Db2xvcikge31cbiAgLy8gU2V0IGNvbmZpcm0gYnV0dG9uIHRvIHNlbGVjdGVkIGJhY2tncm91bmQgY29sb3JcbiAgLy8gJGNvbmZpcm1CdG4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcGFyYW1zLmNvbmZpcm1CdXR0b25Db2xvcjtcblxuICAvLyBTZXQgdGhlIGNvbmZpcm0gYnV0dG9uIGNvbG9yIHRvIHRoZSBsb2FkaW5nIHJpbmdcbiAgLy8gJGNvbmZpcm1CdG4uc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gcGFyYW1zLmNvbmZpcm1Mb2FkaW5nQnV0dG9uQ29sb3I7XG4gIC8vICRjb25maXJtQnRuLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3IgPSBwYXJhbXMuY29uZmlybUxvYWRpbmdCdXR0b25Db2xvcjtcblxuICAvLyBTZXQgYm94LXNoYWRvdyB0byBkZWZhdWx0IGZvY3VzZWQgYnV0dG9uXG4gIC8vIHNldEZvY3VzU3R5bGUoJGNvbmZpcm1CdG4sIHBhcmFtcy5jb25maXJtQnV0dG9uQ29sb3IpO1xuXG4gIC8qXG4gICAqIEFsbG93IG91dHNpZGUgY2xpY2tcbiAgICovXG4gIG1vZGFsLnNldEF0dHJpYnV0ZSgnZGF0YS1hbGxvdy1vdXRzaWRlLWNsaWNrJywgcGFyYW1zLmFsbG93T3V0c2lkZUNsaWNrKTtcblxuICAvKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgdmFyIGhhc0RvbmVGdW5jdGlvbiA9IHBhcmFtcy5kb25lRnVuY3Rpb24gPyB0cnVlIDogZmFsc2U7XG4gIG1vZGFsLnNldEF0dHJpYnV0ZSgnZGF0YS1oYXMtZG9uZS1mdW5jdGlvbicsIGhhc0RvbmVGdW5jdGlvbik7XG5cbiAgLypcbiAgICogQW5pbWF0aW9uXG4gICAqL1xuICBpZiAoIXBhcmFtcy5hbmltYXRpb24pIHtcbiAgICBtb2RhbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgJ25vbmUnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW1zLmFuaW1hdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBtb2RhbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgcGFyYW1zLmFuaW1hdGlvbik7IC8vIEN1c3RvbSBhbmltYXRpb25cbiAgfSBlbHNlIHtcbiAgICAgIG1vZGFsLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCAncG9wJyk7XG4gICAgfVxuXG4gIC8qXG4gICAqIFRpbWVyXG4gICAqL1xuICBtb2RhbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGltZXInLCBwYXJhbXMudGltZXIpO1xufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gc2V0UGFyYW1ldGVycztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5RGIyUmxMM04zWldWMFlXeGxjblF2WkdWMkwyMXZaSFZzWlhNdmMyVjBMWEJoY21GdGN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN2NVSkJTVThzVTBGQlV6czdOa0pCVFZRc2JVSkJRVzFDT3p0NVFrRk5ia0lzWTBGQll6czdPenM3UVVGb1FuSkNMRWxCUVVrc1ZVRkJWU3hIUVVGSExFTkJRVU1zVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1UwRkJVeXhGUVVGRkxFOUJRVThzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXpzN1FVRnpRalZGTEVsQlFVa3NZVUZCWVN4SFFVRkhMRk5CUVdoQ0xHRkJRV0VzUTBGQldTeE5RVUZOTEVWQlFVVTdRVUZEYmtNc1RVRkJTU3hMUVVGTExFZEJRVWNzT0VKQlFWVXNRMEZCUXpzN1FVRkZka0lzVFVGQlNTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4yUXl4TlFVRkpMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNKRExFMUJRVWtzVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03UVVGRGRFUXNUVUZCU1N4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE96czdPenRCUVV0NFJDeFJRVUZOTEVOQlFVTXNVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl3eVFrRkJWeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXpzN096czdRVUZMYkVjc1QwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzTWtKQlFWY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzSkhMRTFCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeHhRa0ZCU3l4TFFVRkxMRU5CUVVNc1EwRkJRenM3T3pzN1FVRkxOMElzVFVGQlNTeE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZPMEZCUTNSQ0xEWkNRVUZUTEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UVVGRGNFTXNVMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UjBGRE4wUXNUVUZCVFRzN1FVRkZUQ3hSUVVGSkxGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdRVUZETVVRc1owTkJRVmtzUzBGQlN5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUTJoRExGTkJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdSMEZETjBNN096czdPMEZCUzBRc2RVSkJRVXNzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdPMEZCUlhwRExFMUJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRzFDUVVGUExFVkJRVVU3T3p0QlFVVXpRaXhWUVVGSkxGTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTTdPMEZCUlhSQ0xGZEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUXpGRExGbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NTMEZCU3l4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGFrTXNiVUpCUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGFrSXNaMEpCUVUwN1UwRkRVRHRQUVVOR096dEJRVVZFTEZWQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1FVRkRaQ3hqUVVGTkxFTkJRVU1zYzBKQlFYTkNMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6ZERPMkZCUVU4c1MwRkJTenRWUVVGRE8wOUJRMlE3TzBGQlJVUXNWVUZCU1N4alFVRmpMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVNM1JDeFZRVUZKTEV0QlFVc3NXVUZCUVN4RFFVRkRPenRCUVVWV0xGVkJRVWtzWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVTdRVUZET1VNc1lVRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETDBRc05rSkJRVXNzUzBGQlN5eERRVUZETEVOQlFVTTdUMEZEWWpzN1FVRkZSQ3hWUVVGSkxFMUJRVTBzUjBGQlJ5dzRRa0ZCVlN4RFFVRkRPenM3UVVGSGVFSXNZMEZCVVN4TlFVRk5MRU5CUVVNc1NVRkJTVHM3UVVGRmFrSXNZVUZCU3l4VFFVRlRPMEZCUTFvc2JVTkJRVk1zUzBGQlN5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUXpOQ0xHMURRVUZUTEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRCUVVNNVJDeHRRMEZCVXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEc5Q1FVRnZRaXhEUVVGRExFTkJRVU03UVVGRGFFVXNaMEpCUVUwN08wRkJRVUVzUVVGRlVpeGhRVUZMTEU5QlFVODdRVUZEVml4dFEwRkJVeXhMUVVGTExFVkJRVVVzYTBKQlFXdENMRU5CUVVNc1EwRkJRenRCUVVOd1F5eHRRMEZCVXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExGbEJRVmtzUTBGQlF5eEZRVUZGTEdOQlFXTXNRMEZCUXl4RFFVRkRPMEZCUXpWRUxHZENRVUZOT3p0QlFVRkJMRUZCUlZJc1lVRkJTeXhUUVVGVE8wRkJRMW9zYlVOQlFWTXNTMEZCU3l4RlFVRkZMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRMmhETEcxRFFVRlRMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEJRVU0zUkN4dFEwRkJVeXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZETlVRc1owSkJRVTA3TzBGQlFVRXNRVUZGVWl4aFFVRkxMRTlCUVU4c1EwRkJRenRCUVVOaUxHRkJRVXNzVVVGQlVUdEJRVU5ZTEdkQ1FVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRPVU1zWjBKQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF6dEJRVU5xUXl4blFrRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eGhRVUZoTEVWQlFVVXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZETlVRc2JVTkJRVk1zUzBGQlN5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUXpsQ0xHOUNRVUZWTEVOQlFVTXNXVUZCV1R0QlFVTnlRaXhyUWtGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMEZCUTJZc2EwSkJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMWRCUTNoRUxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEVWl4blFrRkJUVHRCUVVGQkxFOUJRMVE3T3pzN1IwRkRSanM3T3pzN1FVRkxSQ3hOUVVGSkxFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEYmtJc1VVRkJTU3hYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVUZET3p0QlFVVTFSQ3hsUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEhRVUZITEVOQlFVTTdRVUZEYmtVc2VVSkJRVXNzVjBGQlZ5eERRVUZETEVOQlFVTTdPMEZCUld4Q0xGRkJRVWtzVTBGQlV5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTnVRaXhSUVVGSkxGVkJRVlVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdPMEZCUlhCQ0xGRkJRVWtzVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlR0QlFVTndRaXhWUVVGSkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjRSQ3hWUVVGSkxGRkJRVkVzUjBGQlJ5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkROMElzVlVGQlNTeFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVU1UWl4VlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlF6TkNMR05CUVUwc1EwRkJReXhyUlVGQmEwVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VDBGREwwWXNUVUZCVFR0QlFVTk1MR2xDUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEzSkNMR3RDUVVGVkxFZEJRVWNzVTBGQlV5eERRVUZETzA5QlEzaENPMHRCUTBZN08wRkJSVVFzWlVGQlZ5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1YwRkJWeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4UlFVRlJMRWRCUVVjc1UwRkJVeXhIUVVGSExHRkJRV0VzUjBGQlJ5eFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRha2s3T3pzN08wRkJTMFFzVDBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4M1FrRkJkMElzUlVGQlJTeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEJRVU4wUlN4TlFVRkpMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0QlFVTXpRaXhqUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4alFVRmpMRU5CUVVNN1IwRkRNME1zVFVGQlRUdEJRVU5NTEhsQ1FVRkxMRlZCUVZVc1EwRkJReXhEUVVGRE8wZEJRMnhDT3pzN096dEJRVXRFTEU5QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNUVUZCVFN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZEZUVVc1RVRkJTU3hOUVVGTkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1FVRkROVUlzWlVGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1kwRkJZeXhEUVVGRE8wZEJRelZETEUxQlFVMDdRVUZEVEN4NVFrRkJTeXhYUVVGWExFTkJRVU1zUTBGQlF6dEhRVU51UWpzN096czdRVUZMUkN4TlFVRkpMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0QlFVTXpRaXhqUVVGVkxFTkJRVU1zVTBGQlV5eEhRVUZITERKQ1FVRlhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMGRCUXpWRU8wRkJRMFFzVFVGQlNTeE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVU3UVVGRE5VSXNaVUZCVnl4RFFVRkRMRk5CUVZNc1IwRkJSeXd5UWtGQlZ5eE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEhRVU01UkRzN096czdRVUZMUkN4TlFVRkpMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RlFWVTVRanM3T3pzN096czdPenM3T3pzN1FVRkJRU3hCUVV0RUxFOUJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNNRUpCUVRCQ0xFVkJRVVVzVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03T3pzN08wRkJTM3BGTEUxQlFVa3NaVUZCWlN4SFFVRkhMRTFCUVUwc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTjZSQ3hQUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEhkQ1FVRjNRaXhGUVVGRkxHVkJRV1VzUTBGQlF5eERRVUZET3pzN096dEJRVXM1UkN4TlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJUdEJRVU55UWl4VFFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wZEJRemxETEUxQlFVMHNTVUZCU1N4UFFVRlBMRTFCUVUwc1EwRkJReXhUUVVGVExFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlF5OURMRk5CUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBkQlEzaEVMRTFCUVUwN1FVRkRUQ3hYUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzB0QlF6ZERPenM3T3p0QlFVdEVMRTlCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zV1VGQldTeEZRVUZGTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenREUVVOb1JDeERRVUZET3p0eFFrRkZZU3hoUVVGaElpd2labWxzWlNJNklpOURiMlJsTDNOM1pXVjBZV3hsY25RdlpHVjJMMjF2WkhWc1pYTXZjMlYwTFhCaGNtRnRjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJoYkdWeWRGUjVjR1Z6SUQwZ1d5ZGxjbkp2Y2ljc0lDZDNZWEp1YVc1bkp5d2dKMmx1Wm04bkxDQW5jM1ZqWTJWemN5Y3NJQ2RwYm5CMWRDY3NJQ2R3Y205dGNIUW5YVHRjYmx4dWFXMXdiM0owSUh0Y2JpQWdhWE5KUlRoY2JuMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNWNibWx0Y0c5eWRDQjdYRzRnSUdkbGRFMXZaR0ZzTEZ4dUlDQm5aWFJKYm5CMWRDeGNiaUFnYzJWMFJtOWpkWE5UZEhsc1pWeHVmU0JtY205dElDY3VMMmhoYm1Sc1pTMXpkMkZzTFdSdmJTYzdYRzVjYm1sdGNHOXlkQ0I3WEc0Z0lHaGhjME5zWVhOekxDQmhaR1JEYkdGemN5d2djbVZ0YjNabFEyeGhjM01zWEc0Z0lHVnpZMkZ3WlVoMGJXd3NYRzRnSUY5emFHOTNMQ0J6YUc5M0xDQmZhR2xrWlN3Z2FHbGtaVnh1ZlNCbWNtOXRJQ2N1TDJoaGJtUnNaUzFrYjIwbk8xeHVYRzVjYmk4cVhHNGdLaUJUWlhRZ2RIbHdaU3dnZEdWNGRDQmhibVFnWVdOMGFXOXVjeUJ2YmlCdGIyUmhiRnh1SUNvdlhHNTJZWElnYzJWMFVHRnlZVzFsZEdWeWN5QTlJR1oxYm1OMGFXOXVLSEJoY21GdGN5a2dlMXh1SUNCMllYSWdiVzlrWVd3Z1BTQm5aWFJOYjJSaGJDZ3BPMXh1WEc0Z0lIWmhjaUFrZEdsMGJHVWdQU0J0YjJSaGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0Nkb01pY3BPMXh1SUNCMllYSWdKSFJsZUhRZ1BTQnRiMlJoYkM1eGRXVnllVk5sYkdWamRHOXlLQ2R3SnlrN1hHNGdJSFpoY2lBa1kyRnVZMlZzUW5SdUlEMGdiVzlrWVd3dWNYVmxjbmxUWld4bFkzUnZjaWduWW5WMGRHOXVMbU5oYm1ObGJDY3BPMXh1SUNCMllYSWdKR052Ym1acGNtMUNkRzRnUFNCdGIyUmhiQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZGlkWFIwYjI0dVkyOXVabWx5YlNjcE8xeHVYRzRnSUM4cVhHNGdJQ0FxSUZScGRHeGxYRzRnSUNBcUwxeHVJQ0FrZEdsMGJHVXVhVzV1WlhKSVZFMU1JRDBnY0dGeVlXMXpMbWgwYld3Z1B5QndZWEpoYlhNdWRHbDBiR1VnT2lCbGMyTmhjR1ZJZEcxc0tIQmhjbUZ0Y3k1MGFYUnNaU2t1YzNCc2FYUW9KMXhjYmljcExtcHZhVzRvSnp4aWNqNG5LVHRjYmx4dUlDQXZLbHh1SUNBZ0tpQlVaWGgwWEc0Z0lDQXFMMXh1SUNBa2RHVjRkQzVwYm01bGNraFVUVXdnUFNCd1lYSmhiWE11YUhSdGJDQS9JSEJoY21GdGN5NTBaWGgwSURvZ1pYTmpZWEJsU0hSdGJDaHdZWEpoYlhNdWRHVjRkQ0I4ZkNBbkp5a3VjM0JzYVhRb0oxeGNiaWNwTG1wdmFXNG9KenhpY2o0bktUdGNiaUFnYVdZZ0tIQmhjbUZ0Y3k1MFpYaDBLU0J6YUc5M0tDUjBaWGgwS1R0Y2JseHVJQ0F2S2x4dUlDQWdLaUJEZFhOMGIyMGdZMnhoYzNOY2JpQWdJQ292WEc0Z0lHbG1JQ2h3WVhKaGJYTXVZM1Z6ZEc5dFEyeGhjM01wSUh0Y2JpQWdJQ0JoWkdSRGJHRnpjeWh0YjJSaGJDd2djR0Z5WVcxekxtTjFjM1J2YlVOc1lYTnpLVHRjYmlBZ0lDQnRiMlJoYkM1elpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFkzVnpkRzl0TFdOc1lYTnpKeXdnY0dGeVlXMXpMbU4xYzNSdmJVTnNZWE56S1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QkdhVzVrSUhCeVpYWnBiM1Z6YkhrZ2MyVjBJR05zWVhOelpYTWdZVzVrSUhKbGJXOTJaU0IwYUdWdFhHNGdJQ0FnYkdWMElHTjFjM1J2YlVOc1lYTnpJRDBnYlc5a1lXd3VaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV04xYzNSdmJTMWpiR0Z6Y3ljcE8xeHVJQ0FnSUhKbGJXOTJaVU5zWVhOektHMXZaR0ZzTENCamRYTjBiMjFEYkdGemN5azdYRzRnSUNBZ2JXOWtZV3d1YzJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdOMWMzUnZiUzFqYkdGemN5Y3NJQ2NuS1R0Y2JpQWdmVnh1WEc0Z0lDOHFYRzRnSUNBcUlFbGpiMjVjYmlBZ0lDb3ZYRzRnSUdocFpHVW9iVzlrWVd3dWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbkxuTmhMV2xqYjI0bktTazdYRzVjYmlBZ2FXWWdLSEJoY21GdGN5NTBlWEJsSUNZbUlDRnBjMGxGT0NncEtTQjdYRzVjYmlBZ0lDQnNaWFFnZG1Gc2FXUlVlWEJsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdGc1pYSjBWSGx3WlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNod1lYSmhiWE11ZEhsd1pTQTlQVDBnWVd4bGNuUlVlWEJsYzF0cFhTa2dlMXh1SUNBZ0lDQWdJQ0IyWVd4cFpGUjVjR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9JWFpoYkdsa1ZIbHdaU2tnZTF4dUlDQWdJQ0FnYkc5blUzUnlLQ2RWYm10dWIzZHVJR0ZzWlhKMElIUjVjR1U2SUNjZ0t5QndZWEpoYlhNdWRIbHdaU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElIUjVjR1Z6VjJsMGFFbGpiMjV6SUQwZ1d5ZHpkV05qWlhOekp5d2dKMlZ5Y205eUp5d2dKM2RoY201cGJtY25MQ0FuYVc1bWJ5ZGRPMXh1SUNBZ0lHeGxkQ0FrYVdOdmJqdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGMxZHBkR2hKWTI5dWN5NXBibVJsZUU5bUtIQmhjbUZ0Y3k1MGVYQmxLU0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ1JwWTI5dUlEMGdiVzlrWVd3dWNYVmxjbmxUWld4bFkzUnZjaWduTG5OaExXbGpiMjR1SnlBcklDZHpZUzBuSUNzZ2NHRnlZVzF6TG5SNWNHVXBPMXh1SUNBZ0lDQWdjMmh2ZHlna2FXTnZiaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUNScGJuQjFkQ0E5SUdkbGRFbHVjSFYwS0NrN1hHNWNiaUFnSUNBdkx5QkJibWx0WVhSbElHbGpiMjVjYmlBZ0lDQnpkMmwwWTJnZ0tIQmhjbUZ0Y3k1MGVYQmxLU0I3WEc1Y2JpQWdJQ0FnSUdOaGMyVWdKM04xWTJObGMzTW5PbHh1SUNBZ0lDQWdJQ0JoWkdSRGJHRnpjeWdrYVdOdmJpd2dKMkZ1YVcxaGRHVW5LVHRjYmlBZ0lDQWdJQ0FnWVdSa1EyeGhjM01vSkdsamIyNHVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuTmhMWFJwY0NjcExDQW5ZVzVwYldGMFpWTjFZMk5sYzNOVWFYQW5LVHRjYmlBZ0lDQWdJQ0FnWVdSa1EyeGhjM01vSkdsamIyNHVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuTmhMV3h2Ym1jbktTd2dKMkZ1YVcxaGRHVlRkV05qWlhOelRHOXVaeWNwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnWTJGelpTQW5aWEp5YjNJbk9seHVJQ0FnSUNBZ0lDQmhaR1JEYkdGemN5Z2thV052Yml3Z0oyRnVhVzFoZEdWRmNuSnZja2xqYjI0bktUdGNiaUFnSUNBZ0lDQWdZV1JrUTJ4aGMzTW9KR2xqYjI0dWNYVmxjbmxUWld4bFkzUnZjaWduTG5OaExYZ3RiV0Z5YXljcExDQW5ZVzVwYldGMFpWaE5ZWEpySnlrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNCallYTmxJQ2QzWVhKdWFXNW5KenBjYmlBZ0lDQWdJQ0FnWVdSa1EyeGhjM01vSkdsamIyNHNJQ2R3ZFd4elpWZGhjbTVwYm1jbktUdGNiaUFnSUNBZ0lDQWdZV1JrUTJ4aGMzTW9KR2xqYjI0dWNYVmxjbmxUWld4bFkzUnZjaWduTG5OaExXSnZaSGtuS1N3Z0ozQjFiSE5sVjJGeWJtbHVaMGx1Y3ljcE8xeHVJQ0FnSUNBZ0lDQmhaR1JEYkdGemN5Z2thV052Ymk1eGRXVnllVk5sYkdWamRHOXlLQ2N1YzJFdFpHOTBKeWtzSUNkd2RXeHpaVmRoY201cGJtZEpibk1uS1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUdOaGMyVWdKMmx1Y0hWMEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNCeWIyMXdkQ2M2WEc0Z0lDQWdJQ0FnSUNScGJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0ozUjVjR1VuTENCd1lYSmhiWE11YVc1d2RYUlVlWEJsS1R0Y2JpQWdJQ0FnSUNBZ0pHbHVjSFYwTG5aaGJIVmxJRDBnY0dGeVlXMXpMbWx1Y0hWMFZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNScGJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0ozQnNZV05sYUc5c1pHVnlKeXdnY0dGeVlXMXpMbWx1Y0hWMFVHeGhZMlZvYjJ4a1pYSXBPMXh1SUNBZ0lDQWdJQ0JoWkdSRGJHRnpjeWh0YjJSaGJDd2dKM05vYjNjdGFXNXdkWFFuS1R0Y2JpQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0pHbHVjSFYwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0pHbHVjSFYwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJ0bGVYVndKeXdnYzNkaGJDNXlaWE5sZEVsdWNIVjBSWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlMQ0EwTURBcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktseHVJQ0FnS2lCRGRYTjBiMjBnYVcxaFoyVmNiaUFnSUNvdlhHNGdJR2xtSUNod1lYSmhiWE11YVcxaFoyVlZjbXdwSUh0Y2JpQWdJQ0JzWlhRZ0pHTjFjM1J2YlVsamIyNGdQU0J0YjJSaGJDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWMyRXRhV052Ymk1ellTMWpkWE4wYjIwbktUdGNibHh1SUNBZ0lDUmpkWE4wYjIxSlkyOXVMbk4wZVd4bExtSmhZMnRuY205MWJtUkpiV0ZuWlNBOUlDZDFjbXdvSnlBcklIQmhjbUZ0Y3k1cGJXRm5aVlZ5YkNBcklDY3BKenRjYmlBZ0lDQnphRzkzS0NSamRYTjBiMjFKWTI5dUtUdGNibHh1SUNBZ0lHeGxkQ0JmYVcxblYybGtkR2dnUFNBNE1EdGNiaUFnSUNCc1pYUWdYMmx0WjBobGFXZG9kQ0E5SURnd08xeHVYRzRnSUNBZ2FXWWdLSEJoY21GdGN5NXBiV0ZuWlZOcGVtVXBJSHRjYmlBZ0lDQWdJR3hsZENCa2FXMWxibk5wYjI1eklEMGdjR0Z5WVcxekxtbHRZV2RsVTJsNlpTNTBiMU4wY21sdVp5Z3BMbk53YkdsMEtDZDRKeWs3WEc0Z0lDQWdJQ0JzWlhRZ2FXMW5WMmxrZEdnZ1BTQmthVzFsYm5OcGIyNXpXekJkTzF4dUlDQWdJQ0FnYkdWMElHbHRaMGhsYVdkb2RDQTlJR1JwYldWdWMybHZibk5iTVYwN1hHNWNiaUFnSUNBZ0lHbG1JQ2doYVcxblYybGtkR2dnZkh3Z0lXbHRaMGhsYVdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0JzYjJkVGRISW9KMUJoY21GdFpYUmxjaUJwYldGblpWTnBlbVVnWlhod1pXTjBjeUIyWVd4MVpTQjNhWFJvSUdadmNtMWhkQ0JYU1VSVVNIaElSVWxIU0ZRc0lHZHZkQ0FuSUNzZ2NHRnlZVzF6TG1sdFlXZGxVMmw2WlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCZmFXMW5WMmxrZEdnZ1BTQnBiV2RYYVdSMGFEdGNiaUFnSUNBZ0lDQWdYMmx0WjBobGFXZG9kQ0E5SUdsdFowaGxhV2RvZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0FrWTNWemRHOXRTV052Ymk1elpYUkJkSFJ5YVdKMWRHVW9KM04wZVd4bEp5d2dKR04xYzNSdmJVbGpiMjR1WjJWMFFYUjBjbWxpZFhSbEtDZHpkSGxzWlNjcElDc2dKM2RwWkhSb09pY2dLeUJmYVcxblYybGtkR2dnS3lBbmNIZzdJR2hsYVdkb2REb25JQ3NnWDJsdFowaGxhV2RvZENBcklDZHdlQ2NwTzF4dUlDQjlYRzVjYmlBZ0x5cGNiaUFnSUNvZ1UyaHZkeUJqWVc1alpXd2dZblYwZEc5dVAxeHVJQ0FnS2k5Y2JpQWdiVzlrWVd3dWMyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXaGhjeTFqWVc1alpXd3RZblYwZEc5dUp5d2djR0Z5WVcxekxuTm9iM2REWVc1alpXeENkWFIwYjI0cE8xeHVJQ0JwWmlBb2NHRnlZVzF6TG5Ob2IzZERZVzVqWld4Q2RYUjBiMjRwSUh0Y2JpQWdJQ0FrWTJGdVkyVnNRblJ1TG5OMGVXeGxMbVJwYzNCc1lYa2dQU0FuYVc1c2FXNWxMV0pzYjJOckp6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQm9hV1JsS0NSallXNWpaV3hDZEc0cE8xeHVJQ0I5WEc1Y2JpQWdMeXBjYmlBZ0lDb2dVMmh2ZHlCamIyNW1hWEp0SUdKMWRIUnZiajljYmlBZ0lDb3ZYRzRnSUcxdlpHRnNMbk5sZEVGMGRISnBZblYwWlNnblpHRjBZUzFvWVhNdFkyOXVabWx5YlMxaWRYUjBiMjRuTENCd1lYSmhiWE11YzJodmQwTnZibVpwY20xQ2RYUjBiMjRwTzF4dUlDQnBaaUFvY0dGeVlXMXpMbk5vYjNkRGIyNW1hWEp0UW5WMGRHOXVLU0I3WEc0Z0lDQWdKR052Ym1acGNtMUNkRzR1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2RwYm14cGJtVXRZbXh2WTJzbk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHaHBaR1VvSkdOdmJtWnBjbTFDZEc0cE8xeHVJQ0I5WEc1Y2JpQWdMeXBjYmlBZ0lDb2dRM1Z6ZEc5dElIUmxlSFFnYjI0Z1kyRnVZMlZzTDJOdmJtWnBjbTBnWW5WMGRHOXVjMXh1SUNBZ0tpOWNiaUFnYVdZZ0tIQmhjbUZ0Y3k1allXNWpaV3hDZFhSMGIyNVVaWGgwS1NCN1hHNGdJQ0FnSkdOaGJtTmxiRUowYmk1cGJtNWxja2hVVFV3Z1BTQmxjMk5oY0dWSWRHMXNLSEJoY21GdGN5NWpZVzVqWld4Q2RYUjBiMjVVWlhoMEtUdGNiaUFnZlZ4dUlDQnBaaUFvY0dGeVlXMXpMbU52Ym1acGNtMUNkWFIwYjI1VVpYaDBLU0I3WEc0Z0lDQWdKR052Ym1acGNtMUNkRzR1YVc1dVpYSklWRTFNSUQwZ1pYTmpZWEJsU0hSdGJDaHdZWEpoYlhNdVkyOXVabWx5YlVKMWRIUnZibFJsZUhRcE8xeHVJQ0I5WEc1Y2JpQWdMeXBjYmlBZ0lDb2dRM1Z6ZEc5dElHTnZiRzl5SUc5dUlHTnZibVpwY20wZ1luVjBkRzl1WEc0Z0lDQXFMMXh1SUNCcFppQW9jR0Z5WVcxekxtTnZibVpwY20xQ2RYUjBiMjVEYjJ4dmNpa2dlMXh1SUNBZ0lDOHZJRk5sZENCamIyNW1hWEp0SUdKMWRIUnZiaUIwYnlCelpXeGxZM1JsWkNCaVlXTnJaM0p2ZFc1a0lHTnZiRzl5WEc0Z0lDQWdMeThnSkdOdmJtWnBjbTFDZEc0dWMzUjViR1V1WW1GamEyZHliM1Z1WkVOdmJHOXlJRDBnY0dGeVlXMXpMbU52Ym1acGNtMUNkWFIwYjI1RGIyeHZjanRjYmx4dUlDQWdJQzh2SUZObGRDQjBhR1VnWTI5dVptbHliU0JpZFhSMGIyNGdZMjlzYjNJZ2RHOGdkR2hsSUd4dllXUnBibWNnY21sdVoxeHVJQ0FnSUM4dklDUmpiMjVtYVhKdFFuUnVMbk4wZVd4bExtSnZjbVJsY2t4bFpuUkRiMnh2Y2lBOUlIQmhjbUZ0Y3k1amIyNW1hWEp0VEc5aFpHbHVaMEoxZEhSdmJrTnZiRzl5TzF4dUlDQWdJQzh2SUNSamIyNW1hWEp0UW5SdUxuTjBlV3hsTG1KdmNtUmxjbEpwWjJoMFEyOXNiM0lnUFNCd1lYSmhiWE11WTI5dVptbHliVXh2WVdScGJtZENkWFIwYjI1RGIyeHZjanRjYmx4dUlDQWdJQzh2SUZObGRDQmliM2d0YzJoaFpHOTNJSFJ2SUdSbFptRjFiSFFnWm05amRYTmxaQ0JpZFhSMGIyNWNiaUFnSUNBdkx5QnpaWFJHYjJOMWMxTjBlV3hsS0NSamIyNW1hWEp0UW5SdUxDQndZWEpoYlhNdVkyOXVabWx5YlVKMWRIUnZia052Ykc5eUtUdGNiaUFnZlZ4dVhHNGdJQzhxWEc0Z0lDQXFJRUZzYkc5M0lHOTFkSE5wWkdVZ1kyeHBZMnRjYmlBZ0lDb3ZYRzRnSUcxdlpHRnNMbk5sZEVGMGRISnBZblYwWlNnblpHRjBZUzFoYkd4dmR5MXZkWFJ6YVdSbExXTnNhV05ySnl3Z2NHRnlZVzF6TG1Gc2JHOTNUM1YwYzJsa1pVTnNhV05yS1R0Y2JseHVJQ0F2S2x4dUlDQWdLaUJEWVd4c1ltRmpheUJtZFc1amRHbHZibHh1SUNBZ0tpOWNiaUFnZG1GeUlHaGhjMFJ2Ym1WR2RXNWpkR2x2YmlBOUlIQmhjbUZ0Y3k1a2IyNWxSblZ1WTNScGIyNGdQeUIwY25WbElEb2dabUZzYzJVN1hHNGdJRzF2WkdGc0xuTmxkRUYwZEhKcFluVjBaU2duWkdGMFlTMW9ZWE10Wkc5dVpTMW1kVzVqZEdsdmJpY3NJR2hoYzBSdmJtVkdkVzVqZEdsdmJpazdYRzVjYmlBZ0x5cGNiaUFnSUNvZ1FXNXBiV0YwYVc5dVhHNGdJQ0FxTDF4dUlDQnBaaUFvSVhCaGNtRnRjeTVoYm1sdFlYUnBiMjRwSUh0Y2JpQWdJQ0J0YjJSaGJDNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRZVzVwYldGMGFXOXVKeXdnSjI1dmJtVW5LVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2NHRnlZVzF6TG1GdWFXMWhkR2x2YmlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQnRiMlJoYkM1elpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdFlXNXBiV0YwYVc5dUp5d2djR0Z5WVcxekxtRnVhVzFoZEdsdmJpazdJQzh2SUVOMWMzUnZiU0JoYm1sdFlYUnBiMjVjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J0YjJSaGJDNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRZVzVwYldGMGFXOXVKeXdnSjNCdmNDY3BPMXh1SUNCOVhHNWNiaUFnTHlwY2JpQWdJQ29nVkdsdFpYSmNiaUFnSUNvdlhHNGdJRzF2WkdGc0xuTmxkRUYwZEhKcFluVjBaU2duWkdGMFlTMTBhVzFsY2ljc0lIQmhjbUZ0Y3k1MGFXMWxjaWs3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnpaWFJRWVhKaGJXVjBaWEp6TzF4dUlsMTkiLCIvKlxuICogQWxsb3cgdXNlciB0byBwYXNzIHRoZWlyIG93biBwYXJhbXNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBleHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGlmIChiLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGFba2V5XSA9IGJba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuXG4vKlxuICogQ29udmVydCBIRVggY29kZXMgdG8gUkdCIHZhbHVlcyAoIzAwMDAwMCAtPiByZ2IoMCwwLDApKVxuICovXG52YXIgaGV4VG9SZ2IgPSBmdW5jdGlvbiBoZXhUb1JnYihoZXgpIHtcbiAgdmFyIHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICByZXR1cm4gcmVzdWx0ID8gcGFyc2VJbnQocmVzdWx0WzFdLCAxNikgKyAnLCAnICsgcGFyc2VJbnQocmVzdWx0WzJdLCAxNikgKyAnLCAnICsgcGFyc2VJbnQocmVzdWx0WzNdLCAxNikgOiBudWxsO1xufTtcblxuLypcbiAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHVzaW5nIEludGVybmV0IEV4cGxvcmVyIDggKGZvciBmYWxsYmFja3MpXG4gKi9cbnZhciBpc0lFOCA9IGZ1bmN0aW9uIGlzSUU4KCkge1xuICByZXR1cm4gd2luZG93LmF0dGFjaEV2ZW50ICYmICF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcjtcbn07XG5cbi8qXG4gKiBJRSBjb21wYXRpYmxlIGxvZ2dpbmcgZm9yIGRldmVsb3BlcnNcbiAqL1xudmFyIGxvZ1N0ciA9IGZ1bmN0aW9uIGxvZ1N0cihzdHJpbmcpIHtcbiAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgLy8gSUUuLi5cbiAgICB3aW5kb3cuY29uc29sZS5sb2coJ1N3ZWV0QWxlcnQ6ICcgKyBzdHJpbmcpO1xuICB9XG59O1xuXG4vKlxuICogU2V0IGhvdmVyLCBhY3RpdmUgYW5kIGZvY3VzLXN0YXRlcyBmb3IgYnV0dG9ucyBcbiAqIChzb3VyY2U6IGh0dHA6Ly93d3cuc2l0ZXBvaW50LmNvbS9qYXZhc2NyaXB0LWdlbmVyYXRlLWxpZ2h0ZXItZGFya2VyLWNvbG9yKVxuICovXG52YXIgY29sb3JMdW1pbmFuY2UgPSBmdW5jdGlvbiBjb2xvckx1bWluYW5jZShoZXgsIGx1bSkge1xuICAvLyBWYWxpZGF0ZSBoZXggc3RyaW5nXG4gIGhleCA9IFN0cmluZyhoZXgpLnJlcGxhY2UoL1teMC05YS1mXS9naSwgJycpO1xuICBpZiAoaGV4Lmxlbmd0aCA8IDYpIHtcbiAgICBoZXggPSBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl07XG4gIH1cbiAgbHVtID0gbHVtIHx8IDA7XG5cbiAgLy8gQ29udmVydCB0byBkZWNpbWFsIGFuZCBjaGFuZ2UgbHVtaW5vc2l0eVxuICB2YXIgcmdiID0gJyMnO1xuICB2YXIgYztcbiAgdmFyIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIGMgPSBwYXJzZUludChoZXguc3Vic3RyKGkgKiAyLCAyKSwgMTYpO1xuICAgIGMgPSBNYXRoLnJvdW5kKE1hdGgubWluKE1hdGgubWF4KDAsIGMgKyBjICogbHVtKSwgMjU1KSkudG9TdHJpbmcoMTYpO1xuICAgIHJnYiArPSAoJzAwJyArIGMpLnN1YnN0cihjLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gcmdiO1xufTtcblxuZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5leHBvcnRzLmhleFRvUmdiID0gaGV4VG9SZ2I7XG5leHBvcnRzLmlzSUU4ID0gaXNJRTg7XG5leHBvcnRzLmxvZ1N0ciA9IGxvZ1N0cjtcbmV4cG9ydHMuY29sb3JMdW1pbmFuY2UgPSBjb2xvckx1bWluYW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOURiMlJsTDNOM1pXVjBZV3hsY25RdlpHVjJMMjF2WkhWc1pYTXZkWFJwYkhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN1FVRkhRU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eFRRVUZVTEUxQlFVMHNRMEZCV1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRk8wRkJRekZDTEU5QlFVc3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRMnBDTEZGQlFVa3NRMEZCUXl4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU42UWl4UFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMHRCUTJwQ08wZEJRMFk3UVVGRFJDeFRRVUZQTEVOQlFVTXNRMEZCUXp0RFFVTldMRU5CUVVNN096czdPMEZCUzBZc1NVRkJTU3hSUVVGUkxFZEJRVWNzVTBGQldDeFJRVUZSTEVOQlFWa3NSMEZCUnl4RlFVRkZPMEZCUXpOQ0xFMUJRVWtzVFVGQlRTeEhRVUZITERKRFFVRXlReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnVSU3hUUVVGUExFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dERRVU5zU0N4RFFVRkRPenM3T3p0QlFVdEdMRWxCUVVrc1MwRkJTeXhIUVVGSExGTkJRVklzUzBGQlN5eEhRVUZqTzBGQlEzSkNMRk5CUVZFc1RVRkJUU3hEUVVGRExGZEJRVmNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlJUdERRVU42UkN4RFFVRkRPenM3T3p0QlFVdEdMRWxCUVVrc1RVRkJUU3hIUVVGSExGTkJRVlFzVFVGQlRTeERRVUZaTEUxQlFVMHNSVUZCUlR0QlFVTTFRaXhOUVVGSkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVTdPMEZCUld4Q0xGVkJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR05CUVdNc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF6dEhRVU0zUXp0RFFVTkdMRU5CUVVNN096czdPenRCUVUxR0xFbEJRVWtzWTBGQll5eEhRVUZITEZOQlFXcENMR05CUVdNc1EwRkJXU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGT3p0QlFVVjBReXhMUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZETjBNc1RVRkJTU3hIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0QlFVTnNRaXhQUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdSMEZETTBRN1FVRkRSQ3hMUVVGSExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN08wRkJSMllzVFVGQlNTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTJRc1RVRkJTU3hEUVVGRExFTkJRVU03UVVGRFRpeE5RVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZUaXhQUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU4wUWl4TFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjJReXhMUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEY2tVc1QwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUVN4RFFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdSMEZEY0VNN08wRkJSVVFzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2l4RFFVRkRPenRSUVVsQkxFMUJRVTBzUjBGQlRpeE5RVUZOTzFGQlEwNHNVVUZCVVN4SFFVRlNMRkZCUVZFN1VVRkRVaXhMUVVGTExFZEJRVXdzUzBGQlN6dFJRVU5NTEUxQlFVMHNSMEZCVGl4TlFVRk5PMUZCUTA0c1kwRkJZeXhIUVVGa0xHTkJRV01pTENKbWFXeGxJam9pTDBOdlpHVXZjM2RsWlhSaGJHVnlkQzlrWlhZdmJXOWtkV3hsY3k5MWRHbHNjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFYRzRnS2lCQmJHeHZkeUIxYzJWeUlIUnZJSEJoYzNNZ2RHaGxhWElnYjNkdUlIQmhjbUZ0YzF4dUlDb3ZYRzUyWVhJZ1pYaDBaVzVrSUQwZ1puVnVZM1JwYjI0b1lTd2dZaWtnZTF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z1lpa2dlMXh1SUNBZ0lHbG1JQ2hpTG1oaGMwOTNibEJ5YjNCbGNuUjVLR3RsZVNrcElIdGNiaUFnSUNBZ0lHRmJhMlY1WFNBOUlHSmJhMlY1WFR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR0U3WEc1OU8xeHVYRzR2S2x4dUlDb2dRMjl1ZG1WeWRDQklSVmdnWTI5a1pYTWdkRzhnVWtkQ0lIWmhiSFZsY3lBb0l6QXdNREF3TUNBdFBpQnlaMklvTUN3d0xEQXBLVnh1SUNvdlhHNTJZWElnYUdWNFZHOVNaMklnUFNCbWRXNWpkR2x2Ymlob1pYZ3BJSHRjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJQzllSXo4b1cyRXRabHhjWkYxN01uMHBLRnRoTFdaY1hHUmRleko5S1NoYllTMW1YRnhrWFhzeWZTa2tMMmt1WlhobFl5aG9aWGdwTzF4dUlDQnlaWFIxY200Z2NtVnpkV3gwSUQ4Z2NHRnljMlZKYm5Rb2NtVnpkV3gwV3pGZExDQXhOaWtnS3lBbkxDQW5JQ3NnY0dGeWMyVkpiblFvY21WemRXeDBXekpkTENBeE5pa2dLeUFuTENBbklDc2djR0Z5YzJWSmJuUW9jbVZ6ZFd4MFd6TmRMQ0F4TmlrZ09pQnVkV3hzTzF4dWZUdGNibHh1THlwY2JpQXFJRU5vWldOcklHbG1JSFJvWlNCMWMyVnlJR2x6SUhWemFXNW5JRWx1ZEdWeWJtVjBJRVY0Y0d4dmNtVnlJRGdnS0dadmNpQm1ZV3hzWW1GamEzTXBYRzRnS2k5Y2JuWmhjaUJwYzBsRk9DQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQnlaWFIxY200Z0tIZHBibVJ2ZHk1aGRIUmhZMmhGZG1WdWRDQW1KaUFoZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSXBPMXh1ZlR0Y2JseHVMeXBjYmlBcUlFbEZJR052YlhCaGRHbGliR1VnYkc5bloybHVaeUJtYjNJZ1pHVjJaV3h2Y0dWeWMxeHVJQ292WEc1MllYSWdiRzluVTNSeUlEMGdablZ1WTNScGIyNG9jM1J5YVc1bktTQjdYRzRnSUdsbUlDaDNhVzVrYjNjdVkyOXVjMjlzWlNrZ2UxeHVJQ0FnSUM4dklFbEZMaTR1WEc0Z0lDQWdkMmx1Wkc5M0xtTnZibk52YkdVdWJHOW5LQ2RUZDJWbGRFRnNaWEowT2lBbklDc2djM1J5YVc1bktUdGNiaUFnZlZ4dWZUdGNibHh1THlwY2JpQXFJRk5sZENCb2IzWmxjaXdnWVdOMGFYWmxJR0Z1WkNCbWIyTjFjeTF6ZEdGMFpYTWdabTl5SUdKMWRIUnZibk1nWEc0Z0tpQW9jMjkxY21ObE9pQm9kSFJ3T2k4dmQzZDNMbk5wZEdWd2IybHVkQzVqYjIwdmFtRjJZWE5qY21sd2RDMW5aVzVsY21GMFpTMXNhV2RvZEdWeUxXUmhjbXRsY2kxamIyeHZjaWxjYmlBcUwxeHVkbUZ5SUdOdmJHOXlUSFZ0YVc1aGJtTmxJRDBnWm5WdVkzUnBiMjRvYUdWNExDQnNkVzBwSUh0Y2JpQWdMeThnVm1Gc2FXUmhkR1VnYUdWNElITjBjbWx1WjF4dUlDQm9aWGdnUFNCVGRISnBibWNvYUdWNEtTNXlaWEJzWVdObEtDOWJYakF0T1dFdFpsMHZaMmtzSUNjbktUdGNiaUFnYVdZZ0tHaGxlQzVzWlc1bmRHZ2dQQ0EyS1NCN1hHNGdJQ0FnYUdWNElEMGdhR1Y0V3pCZElDc2dhR1Y0V3pCZElDc2dhR1Y0V3pGZElDc2dhR1Y0V3pGZElDc2dhR1Y0V3pKZElDc2dhR1Y0V3pKZE8xeHVJQ0I5WEc0Z0lHeDFiU0E5SUd4MWJTQjhmQ0F3TzF4dVhHNGdJQzh2SUVOdmJuWmxjblFnZEc4Z1pHVmphVzFoYkNCaGJtUWdZMmhoYm1kbElHeDFiV2x1YjNOcGRIbGNiaUFnZG1GeUlISm5ZaUE5SUNjakp6dGNiaUFnZG1GeUlHTTdYRzRnSUhaaGNpQnBPMXh1WEc0Z0lHWnZjaUFvYVNBOUlEQTdJR2tnUENBek95QnBLeXNwSUh0Y2JpQWdJQ0JqSUQwZ2NHRnljMlZKYm5Rb2FHVjRMbk4xWW5OMGNpaHBJQ29nTWl3Z01pa3NJREUyS1R0Y2JpQWdJQ0JqSUQwZ1RXRjBhQzV5YjNWdVpDaE5ZWFJvTG0xcGJpaE5ZWFJvTG0xaGVDZ3dMQ0JqSUNzZ1l5QXFJR3gxYlNrc0lESTFOU2twTG5SdlUzUnlhVzVuS0RFMktUdGNiaUFnSUNCeVoySWdLejBnS0Njd01DY2dLeUJqS1M1emRXSnpkSElvWXk1c1pXNW5kR2dwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhKbllqdGNibjA3WEc1Y2JseHVaWGh3YjNKMElIdGNiaUFnWlhoMFpXNWtMRnh1SUNCb1pYaFViMUpuWWl4Y2JpQWdhWE5KUlRnc1hHNGdJR3h2WjFOMGNpeGNiaUFnWTI5c2IzSk1kVzFwYm1GdVkyVmNibjA3WEc0aVhYMD0iXX0=
>>>>>>> 442673c... remove background color/box shadow and add special classes

  
  /*
   * Use SweetAlert with RequireJS
   */
  
  if (typeof define === 'function' && define.amd) {
    define(function () {
      return sweetAlert;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sweetAlert;
  }

})(window, document);